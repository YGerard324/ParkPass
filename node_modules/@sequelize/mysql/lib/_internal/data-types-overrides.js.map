{
  "version": 3,
  "sources": ["../../src/_internal/data-types-overrides.ts"],
  "sourcesContent": ["import type { BindParamOptions, GeoJson } from '@sequelize/core';\nimport type { AcceptedDate } from '@sequelize/core/_non-semver-use-at-your-own-risk_/abstract-dialect/data-types.js';\nimport * as BaseTypes from '@sequelize/core/_non-semver-use-at-your-own-risk_/abstract-dialect/data-types.js';\nimport { isValidTimeZone } from '@sequelize/core/_non-semver-use-at-your-own-risk_/utils/dayjs.js';\nimport { isString } from '@sequelize/utils';\nimport dayjs from 'dayjs';\nimport timezone from 'dayjs/plugin/timezone';\nimport utc from 'dayjs/plugin/utc';\nimport wkx from 'wkx';\n\ndayjs.extend(utc);\ndayjs.extend(timezone);\n\nexport class FLOAT extends BaseTypes.FLOAT {\n  protected getNumberSqlTypeName(): string {\n    return 'FLOAT';\n  }\n\n  protected _supportsNativeUnsigned(): boolean {\n    return true;\n  }\n}\n\nexport class DOUBLE extends BaseTypes.DOUBLE {\n  protected getNumberSqlTypeName(): string {\n    return 'DOUBLE PRECISION';\n  }\n\n  protected _supportsNativeUnsigned(): boolean {\n    return true;\n  }\n}\n\n/** @deprecated */\nexport class REAL extends BaseTypes.REAL {\n  protected _supportsNativeUnsigned(): boolean {\n    return true;\n  }\n}\n\nexport class DECIMAL extends BaseTypes.DECIMAL {\n  protected _supportsNativeUnsigned(): boolean {\n    return true;\n  }\n}\n\nexport class TINYINT extends BaseTypes.TINYINT {\n  protected _supportsNativeUnsigned(): boolean {\n    return true;\n  }\n}\n\nexport class SMALLINT extends BaseTypes.SMALLINT {\n  protected _supportsNativeUnsigned(): boolean {\n    return true;\n  }\n}\n\nexport class MEDIUMINT extends BaseTypes.MEDIUMINT {\n  protected _supportsNativeUnsigned(): boolean {\n    return true;\n  }\n}\n\nexport class INTEGER extends BaseTypes.INTEGER {\n  protected _supportsNativeUnsigned(): boolean {\n    return true;\n  }\n}\n\nexport class BIGINT extends BaseTypes.BIGINT {\n  protected _supportsNativeUnsigned(): boolean {\n    return true;\n  }\n}\n\nexport class BOOLEAN extends BaseTypes.BOOLEAN {\n  toSql() {\n    return 'TINYINT(1)';\n  }\n\n  escape(value: boolean | unknown): string {\n    // must be 'true' & 'false' when inlining so the values are compatible with the 'IS' operator\n    return value ? 'true' : 'false';\n  }\n\n  toBindableValue(value: boolean | unknown): unknown {\n    // when binding, must be an integer\n    return value ? 1 : 0;\n  }\n}\n\nexport class DATE extends BaseTypes.DATE {\n  toBindableValue(date: AcceptedDate) {\n    date = this._applyTimezone(date);\n\n    // MySQL datetime precision defaults to 0\n    const precision = this.options.precision ?? 0;\n    let format = 'YYYY-MM-DD HH:mm:ss';\n    // TODO: We should normally use `S`, `SS` or `SSS` based on the precision, but\n    //  dayjs has a bug which causes `S` and `SS` to be ignored:\n    //  https://github.com/iamkun/dayjs/issues/1734\n    if (precision > 0) {\n      format += `.SSS`;\n    }\n\n    return date.format(format);\n  }\n\n  sanitize(value: unknown, options?: { timezone?: string }): unknown {\n    if (isString(value) && options?.timezone) {\n      if (isValidTimeZone(options.timezone)) {\n        return dayjs.tz(value, options.timezone).toDate();\n      }\n\n      return new Date(`${value} ${options.timezone}`);\n    }\n\n    return super.sanitize(value);\n  }\n}\n\nexport class JSON extends BaseTypes.JSON {\n  escape(value: any): string {\n    // In MySQL, JSON cannot be directly compared to a text, we need to cast it to JSON\n    // This is not necessary for the values of INSERT & UPDATE statements, so we could omit this\n    // if we add context to the escape & getBindParamSql methods\n    return `CAST(${super.escape(value)} AS JSON)`;\n  }\n\n  getBindParamSql(value: any, options: BindParamOptions): string {\n    return `CAST(${super.getBindParamSql(value, options)} AS JSON)`;\n  }\n}\n\nexport class UUID extends BaseTypes.UUID {\n  // TODO: add check constraint to enforce GUID format\n  toSql() {\n    return 'CHAR(36) BINARY';\n  }\n}\n\nexport class GEOMETRY extends BaseTypes.GEOMETRY {\n  toBindableValue(value: GeoJson) {\n    const srid = this.options.srid ? `, ${this.options.srid}` : '';\n\n    return `ST_GeomFromText(${this._getDialect().escapeString(\n      wkx.Geometry.parseGeoJSON(value).toWkt(),\n    )}${srid})`;\n  }\n\n  getBindParamSql(value: GeoJson, options: BindParamOptions) {\n    const srid = this.options.srid ? `, ${options.bindParam(this.options.srid)}` : '';\n\n    return `ST_GeomFromText(${options.bindParam(wkx.Geometry.parseGeoJSON(value).toWkt())}${srid})`;\n  }\n\n  toSql() {\n    const sql = this.options.type?.toUpperCase() || 'GEOMETRY';\n\n    if (this.options.srid) {\n      // According to the documentation examples the format is: POINT NOT NULL SRID 4326\n      // however in practise the order of NOT NULL and the SRID specification doesn't seem to matter.\n      // Using the /*!80003 ... */ syntax is for backwards compat with MySQL versions before 8.0: MySQL 5.7 doesn't support SRIDs on table columns.\n      return `${sql} /*!80003 SRID ${this.options.srid} */`;\n    }\n\n    return sql;\n  }\n}\n\nexport class ENUM<Member extends string> extends BaseTypes.ENUM<Member> {\n  toSql() {\n    const dialect = this._getDialect();\n\n    return `ENUM(${this.options.values.map(value => dialect.escapeString(value)).join(', ')})`;\n  }\n}\n"],
  "mappings": "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",
  "names": ["import_dayjs", "dayjs", "utc", "timezone", "wkx"]
}
