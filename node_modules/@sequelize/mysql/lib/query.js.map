{
  "version": 3,
  "sources": ["../src/query.js"],
  "sourcesContent": ["'use strict';\n\nimport {\n  AbstractQuery,\n  DatabaseError,\n  ForeignKeyConstraintError,\n  UniqueConstraintError,\n  UnknownConstraintError,\n  ValidationErrorItem,\n} from '@sequelize/core';\nimport { logger } from '@sequelize/core/_non-semver-use-at-your-own-risk_/utils/logger.js';\nimport { inspect } from '@sequelize/utils';\nimport forOwn from 'lodash/forOwn';\nimport map from 'lodash/map';\nimport zipObject from 'lodash/zipObject';\n\nconst ER_DUP_ENTRY = 1062;\nconst ER_DEADLOCK = 1213;\nconst ER_ROW_IS_REFERENCED = 1451;\nconst ER_NO_REFERENCED_ROW = 1452;\nconst ER_CONSTRAINT_NOT_FOUND = 3940;\n\nconst debug = logger.debugContext('sql:mysql');\n\nexport class MySqlQuery extends AbstractQuery {\n  constructor(connection, sequelize, options) {\n    super(connection, sequelize, { showWarnings: false, ...options });\n  }\n\n  async run(sql, parameters) {\n    this.sql = sql;\n    const { connection, options } = this;\n\n    const showWarnings = this.sequelize.dialect.options.showWarnings || options.showWarnings;\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    if (parameters) {\n      debug('parameters(%j)', parameters);\n    }\n\n    let results;\n\n    try {\n      if (parameters && parameters.length > 0) {\n        results = await new Promise((resolve, reject) => {\n          connection\n            .execute(sql, parameters, (error, result) => (error ? reject(error) : resolve(result)))\n            .setMaxListeners(100);\n        });\n      } else {\n        results = await new Promise((resolve, reject) => {\n          connection\n            .query({ sql }, (error, result) => (error ? reject(error) : resolve(result)))\n            .setMaxListeners(100);\n        });\n      }\n    } catch (error) {\n      if (options.transaction && error.errno === ER_DEADLOCK) {\n        // MySQL automatically rolls-back transactions in the event of a deadlock.\n        // However, we still initiate a manual rollback to ensure the connection gets released - see #13102.\n        try {\n          await options.transaction.rollback();\n        } catch {\n          // Ignore errors - since MySQL automatically rolled back, we're\n          // not that worried about this redundant rollback failing.\n        }\n      }\n\n      error.sql = sql;\n      error.parameters = parameters;\n      throw this.formatError(error);\n    } finally {\n      complete();\n    }\n\n    if (showWarnings && results && results.warningStatus > 0) {\n      await this.logWarnings(results);\n    }\n\n    return this.formatResults(results);\n  }\n\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   *\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   *\n   * @param {Array} data - The result of the query execution.\n   * @private\n   */\n  formatResults(data) {\n    let result = this.instance;\n\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n\n      if (!this.instance) {\n        const modelDefinition = this.model?.modelDefinition;\n\n        // handle bulkCreate AI primary key\n        if (\n          data.constructor.name === 'ResultSetHeader' &&\n          modelDefinition?.autoIncrementAttributeName &&\n          modelDefinition?.autoIncrementAttributeName === this.model.primaryKeyAttribute\n        ) {\n          const startId = data[this.getInsertIdField()];\n          result = [];\n          for (\n            let i = BigInt(startId);\n            i < BigInt(startId) + BigInt(data.affectedRows);\n            i = i + 1n\n          ) {\n            result.push({\n              [modelDefinition.getColumnName(this.model.primaryKeyAttribute)]:\n                typeof startId === 'string' ? i.toString() : Number(i),\n            });\n          }\n        } else {\n          result = data[this.getInsertIdField()];\n        }\n      }\n    }\n\n    if (this.isSelectQuery()) {\n      return this.handleSelectQuery(data);\n    }\n\n    if (this.isDescribeQuery()) {\n      result = {};\n\n      for (const _result of data) {\n        const enumRegex = /^enum/i;\n        result[_result.Field] = {\n          type: enumRegex.test(_result.Type)\n            ? _result.Type.replace(enumRegex, 'ENUM')\n            : _result.Type.toUpperCase(),\n          allowNull: _result.Null === 'YES',\n          defaultValue: _result.Default,\n          primaryKey: _result.Key === 'PRI',\n          autoIncrement:\n            Object.hasOwn(_result, 'Extra') && _result.Extra.toLowerCase() === 'auto_increment',\n          comment: _result.Comment ? _result.Comment : null,\n        };\n      }\n\n      return result;\n    }\n\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n\n    if (this.isBulkUpdateQuery() || this.isDeleteQuery()) {\n      return data.affectedRows;\n    }\n\n    if (this.isUpsertQuery()) {\n      return [result, data.affectedRows === 1];\n    }\n\n    if (this.isInsertQuery() || this.isUpdateQuery()) {\n      return [result, data.affectedRows];\n    }\n\n    if (this.isShowConstraintsQuery()) {\n      return data;\n    }\n\n    if (this.isRawQuery()) {\n      // MySQL returns row data and metadata (affected rows etc) in a single object - let's standarize it, sorta\n      return [data, data];\n    }\n\n    return result;\n  }\n\n  formatError(err) {\n    const errCode = err.errno || err.code;\n\n    switch (errCode) {\n      case ER_DUP_ENTRY: {\n        const match = err.message.match(/Duplicate entry '([\\S\\s]*)' for key '?((.|\\s)*?)'?$/);\n        let fields = {};\n        let message = 'Validation error';\n        const values = match ? match[1].split('-') : undefined;\n        const fieldKey = match ? match[2].split('.').pop() : undefined;\n        const fieldVal = match ? match[1] : undefined;\n        const uniqueKey =\n          this.model &&\n          this.model.getIndexes().find(index => index.unique && index.name === fieldKey);\n\n        if (uniqueKey) {\n          if (uniqueKey.msg) {\n            message = uniqueKey.msg;\n          }\n\n          fields = zipObject(uniqueKey.fields, values);\n        } else {\n          fields[fieldKey] = fieldVal;\n        }\n\n        const errors = [];\n        forOwn(fields, (value, field) => {\n          errors.push(\n            new ValidationErrorItem(\n              this.getUniqueConstraintErrorMessage(field),\n              'unique violation', // ValidationErrorItem.Origins.DB,\n              field,\n              value,\n              this.instance,\n              'not_unique',\n            ),\n          );\n        });\n\n        return new UniqueConstraintError({ message, errors, cause: err, fields });\n      }\n\n      case ER_ROW_IS_REFERENCED:\n      case ER_NO_REFERENCED_ROW: {\n        // e.g. CONSTRAINT `example_constraint_name` FOREIGN KEY (`example_id`) REFERENCES `examples` (`id`)\n        const match = err.message.match(\n          /CONSTRAINT ([\"`])(.*)\\1 FOREIGN KEY \\(\\1(.*)\\1\\) REFERENCES \\1(.*)\\1 \\(\\1(.*)\\1\\)/,\n        );\n        const quoteChar = match ? match[1] : '`';\n        const fields = match\n          ? match[3].split(new RegExp(`${quoteChar}, *${quoteChar}`))\n          : undefined;\n\n        return new ForeignKeyConstraintError({\n          reltype: String(errCode) === String(ER_ROW_IS_REFERENCED) ? 'parent' : 'child',\n          table: match ? match[4] : undefined,\n          fields,\n          value:\n            (fields && fields.length && this.instance && this.instance[fields[0]]) || undefined,\n          index: match ? match[2] : undefined,\n          cause: err,\n        });\n      }\n\n      case ER_CONSTRAINT_NOT_FOUND: {\n        const constraintMatch = err.sql.match(/(?:constraint|index) `(.+?)`/i);\n        const constraint = constraintMatch ? constraintMatch[1] : undefined;\n        const tableMatch = err.sql.match(/table `(.+?)`/i);\n        const table = tableMatch ? tableMatch[1] : undefined;\n\n        return new UnknownConstraintError({\n          message: err.text,\n          constraint,\n          table,\n          cause: err,\n        });\n      }\n\n      default:\n        return new DatabaseError(err);\n    }\n  }\n\n  handleShowIndexesQuery(data) {\n    // Group by index name, and collect all fields\n    data = data.reduce((acc, item) => {\n      if (!(item.Key_name in acc)) {\n        acc[item.Key_name] = item;\n        item.fields = [];\n      }\n\n      acc[item.Key_name].fields[item.Seq_in_index - 1] = {\n        attribute: item.Column_name,\n        length: item.Sub_part || undefined,\n        order:\n          item.Collation === 'A'\n            ? 'ASC'\n            : item.Collation === 'D'\n              ? 'DESC'\n              : // Not sorted\n                item.Collation === null\n                ? null\n                : (() => {\n                    throw new Error(`Unknown index collation ${inspect(item.Collation)}`);\n                  })(),\n      };\n      delete item.column_name;\n\n      return acc;\n    }, {});\n\n    return map(data, item => {\n      return {\n        primary: item.Key_name === 'PRIMARY',\n        fields: item.fields,\n        name: item.Key_name,\n        tableName: item.Table,\n        // MySQL 8 returns this as a number (Integer), MySQL 5 returns it as a string (BigInt)\n        unique: item.Non_unique !== '1' && item.Non_unique !== 1,\n        type: item.Index_type,\n      };\n    });\n  }\n}\n"],
  "mappings": "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",
  "names": ["zipObject", "forOwn", "map"]
}
