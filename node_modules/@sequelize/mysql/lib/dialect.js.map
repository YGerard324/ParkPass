{
  "version": 3,
  "sources": ["../src/dialect.ts"],
  "sourcesContent": ["import type { Sequelize } from '@sequelize/core';\nimport { AbstractDialect } from '@sequelize/core';\nimport type { SupportableNumericOptions } from '@sequelize/core/_non-semver-use-at-your-own-risk_/abstract-dialect/dialect.js';\nimport { parseCommonConnectionUrlOptions } from '@sequelize/core/_non-semver-use-at-your-own-risk_/utils/connection-options.js';\nimport {\n  createUnspecifiedOrderedBindCollector,\n  escapeMysqlMariaDbString,\n} from '@sequelize/core/_non-semver-use-at-your-own-risk_/utils/sql.js';\nimport { getSynchronizedTypeKeys } from '@sequelize/utils';\nimport {\n  BOOLEAN_CONNECTION_OPTION_NAMES,\n  CONNECTION_OPTION_NAMES,\n  NUMBER_CONNECTION_OPTION_NAMES,\n  STRING_CONNECTION_OPTION_NAMES,\n} from './_internal/connection-options.js';\nimport { registerMySqlDbDataTypeParsers } from './_internal/data-types-db.js';\nimport * as DataTypes from './_internal/data-types-overrides.js';\nimport type { MySql2Module, MySqlConnectionOptions } from './connection-manager.js';\nimport { MySqlConnectionManager } from './connection-manager.js';\nimport { MySqlQueryGenerator } from './query-generator.js';\nimport { MySqlQueryInterface } from './query-interface.js';\nimport { MySqlQuery } from './query.js';\n\nexport interface MySqlDialectOptions {\n  /**\n   * The mysql2 library to use.\n   * If not provided, the mysql2 npm library will be used.\n   * Must be compatible with the mysql2 npm library API.\n   *\n   * Using this option should only be considered as a last resort,\n   * as the Sequelize team cannot guarantee its compatibility.\n   */\n  mysql2Module?: MySql2Module;\n\n  /**\n   * Show warnings if there are any when executing a query\n   */\n  showWarnings?: boolean | undefined;\n}\n\nconst DIALECT_OPTION_NAMES = getSynchronizedTypeKeys<MySqlDialectOptions>({\n  mysql2Module: undefined,\n  showWarnings: undefined,\n});\n\nconst numericOptions: SupportableNumericOptions = {\n  zerofill: true,\n  unsigned: true,\n};\n\nexport class MySqlDialect extends AbstractDialect<MySqlDialectOptions, MySqlConnectionOptions> {\n  static supports = AbstractDialect.extendSupport({\n    'VALUES ()': true,\n    'LIMIT ON UPDATE': true,\n    lock: true,\n    forShare: 'LOCK IN SHARE MODE',\n    settingIsolationLevelDuringTransaction: false,\n    schemas: true,\n    inserts: {\n      ignoreDuplicates: ' IGNORE',\n      updateOnDuplicate: ' ON DUPLICATE KEY UPDATE',\n    },\n    index: {\n      collate: false,\n      length: true,\n      parser: true,\n      type: true,\n      using: 1,\n    },\n    constraints: {\n      foreignKeyChecksDisableable: true,\n    },\n    indexViaAlter: true,\n    indexHints: true,\n    dataTypes: {\n      COLLATE_BINARY: true,\n      GEOMETRY: true,\n      INTS: numericOptions,\n      FLOAT: { ...numericOptions, scaleAndPrecision: true },\n      REAL: { ...numericOptions, scaleAndPrecision: true },\n      DOUBLE: { ...numericOptions, scaleAndPrecision: true },\n      DECIMAL: numericOptions,\n      JSON: true,\n    },\n    jsonOperations: true,\n    jsonExtraction: {\n      unquoted: true,\n      quoted: true,\n    },\n    REGEXP: true,\n    uuidV1Generation: true,\n    globalTimeZoneConfig: true,\n    maxExecutionTimeHint: {\n      select: true,\n    },\n    createSchema: {\n      charset: true,\n      collate: true,\n      ifNotExists: true,\n    },\n    dropSchema: {\n      ifExists: true,\n    },\n    startTransaction: {\n      readOnly: true,\n    },\n  });\n\n  readonly connectionManager: MySqlConnectionManager;\n  readonly queryGenerator: MySqlQueryGenerator;\n  readonly queryInterface: MySqlQueryInterface;\n  readonly Query = MySqlQuery;\n\n  constructor(sequelize: Sequelize, options: MySqlDialectOptions) {\n    super({\n      sequelize,\n      options,\n      dataTypeOverrides: DataTypes,\n      minimumDatabaseVersion: '8.0.19',\n      identifierDelimiter: '`',\n      dataTypesDocumentationUrl: 'https://dev.mysql.com/doc/refman/8.0/en/data-types.html',\n      name: 'mysql',\n    });\n\n    this.connectionManager = new MySqlConnectionManager(this);\n    this.queryGenerator = new MySqlQueryGenerator(this);\n    this.queryInterface = new MySqlQueryInterface(this);\n\n    registerMySqlDbDataTypeParsers(this);\n  }\n\n  createBindCollector() {\n    return createUnspecifiedOrderedBindCollector();\n  }\n\n  escapeString(value: string): string {\n    return escapeMysqlMariaDbString(value);\n  }\n\n  escapeJson(value: unknown): string {\n    return `CAST(${super.escapeJson(value)} AS JSON)`;\n  }\n\n  canBackslashEscape() {\n    return true;\n  }\n\n  getDefaultSchema(): string {\n    return (this.sequelize as Sequelize<MySqlDialect>).options.replication.write.database ?? '';\n  }\n\n  parseConnectionUrl(url: string): MySqlConnectionOptions {\n    return parseCommonConnectionUrlOptions<MySqlConnectionOptions>({\n      url,\n      allowedProtocols: ['mysql'],\n      hostname: 'host',\n      port: 'port',\n      pathname: 'database',\n      username: 'user',\n      password: 'password',\n      stringSearchParams: STRING_CONNECTION_OPTION_NAMES,\n      booleanSearchParams: BOOLEAN_CONNECTION_OPTION_NAMES,\n      numberSearchParams: NUMBER_CONNECTION_OPTION_NAMES,\n    });\n  }\n\n  static getSupportedOptions() {\n    return DIALECT_OPTION_NAMES;\n  }\n\n  static getSupportedConnectionOptions() {\n    return CONNECTION_OPTION_NAMES;\n  }\n}\n"],
  "mappings": "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",
  "names": ["import_connection_options"]
}
