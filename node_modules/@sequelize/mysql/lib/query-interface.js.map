{
  "version": 3,
  "sources": ["../src/query-interface.js"],
  "sourcesContent": ["'use strict';\n\nimport { AbstractQueryInterface, QueryTypes } from '@sequelize/core';\nimport { getObjectFromMap } from '@sequelize/core/_non-semver-use-at-your-own-risk_/utils/object.js';\nimport {\n  assertNoReservedBind,\n  combineBinds,\n} from '@sequelize/core/_non-semver-use-at-your-own-risk_/utils/sql.js';\n\n/**\n * The interface that Sequelize uses to talk with MySQL/MariaDB database\n */\nexport class MySqlQueryInterface extends AbstractQueryInterface {\n  /**\n   * A wrapper that fixes MySQL's inability to cleanly remove columns from existing tables if they have a foreign key constraint.\n   *\n   * @override\n   */\n  async removeColumn(tableName, columnName, options) {\n    const foreignKeys = await this.showConstraints(tableName, {\n      ...options,\n      columnName,\n      constraintType: 'FOREIGN KEY',\n    });\n    await Promise.all(\n      foreignKeys.map(constraint =>\n        this.removeConstraint(tableName, constraint.constraintName, options),\n      ),\n    );\n\n    await super.removeColumn(tableName, columnName, options);\n  }\n\n  /**\n   * @override\n   */\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    if (options.bind) {\n      assertNoReservedBind(options.bind);\n    }\n\n    const modelDefinition = options.model.modelDefinition;\n\n    options = { ...options };\n\n    options.type = QueryTypes.UPSERT;\n    options.updateOnDuplicate = Object.keys(updateValues);\n    options.upsertKeys = Array.from(modelDefinition.primaryKeysAttributeNames, pkAttrName =>\n      modelDefinition.getColumnName(pkAttrName),\n    );\n\n    const { bind, query } = this.queryGenerator.insertQuery(\n      tableName,\n      insertValues,\n      getObjectFromMap(modelDefinition.attributes),\n      options,\n    );\n\n    // unlike bind, replacements are handled by QueryGenerator, not QueryRaw\n    delete options.replacements;\n    options.bind = combineBinds(options.bind, bind);\n\n    return await this.sequelize.queryRaw(query, options);\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,kBAAmD;AACnD,oBAAiC;AACjC,iBAGO;AAKA,MAAM,4BAA4B,mCAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAM9D,MAAM,aAAa,WAAW,YAAY,SAAS;AACjD,UAAM,cAAc,MAAM,KAAK,gBAAgB,WAAW;AAAA,MACxD,GAAG;AAAA,MACH;AAAA,MACA,gBAAgB;AAAA,IAClB,CAAC;AACD,UAAM,QAAQ;AAAA,MACZ,YAAY;AAAA,QAAI,gBACd,KAAK,iBAAiB,WAAW,WAAW,gBAAgB,OAAO;AAAA,MACrE;AAAA,IACF;AAEA,UAAM,MAAM,aAAa,WAAW,YAAY,OAAO;AAAA,EACzD;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,OAAO,WAAW,cAAc,cAAc,OAAO,SAAS;AAClE,QAAI,QAAQ,MAAM;AAChB,2CAAqB,QAAQ,IAAI;AAAA,IACnC;AAEA,UAAM,kBAAkB,QAAQ,MAAM;AAEtC,cAAU,EAAE,GAAG,QAAQ;AAEvB,YAAQ,OAAO,uBAAW;AAC1B,YAAQ,oBAAoB,OAAO,KAAK,YAAY;AACpD,YAAQ,aAAa,MAAM;AAAA,MAAK,gBAAgB;AAAA,MAA2B,gBACzE,gBAAgB,cAAc,UAAU;AAAA,IAC1C;AAEA,UAAM,EAAE,MAAM,MAAM,IAAI,KAAK,eAAe;AAAA,MAC1C;AAAA,MACA;AAAA,UACA,gCAAiB,gBAAgB,UAAU;AAAA,MAC3C;AAAA,IACF;AAGA,WAAO,QAAQ;AACf,YAAQ,WAAO,yBAAa,QAAQ,MAAM,IAAI;AAE9C,WAAO,MAAM,KAAK,UAAU,SAAS,OAAO,OAAO;AAAA,EACrD;AACF;",
  "names": []
}
