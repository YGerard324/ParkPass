{
  "version": 3,
  "sources": ["../src/connection-manager.ts"],
  "sourcesContent": ["import type { AbstractConnection, ConnectionOptions } from '@sequelize/core';\nimport {\n  AbstractConnectionManager,\n  AccessDeniedError,\n  ConnectionError,\n  ConnectionRefusedError,\n  HostNotFoundError,\n  HostNotReachableError,\n  InvalidConnectionError,\n} from '@sequelize/core';\nimport { timeZoneToOffsetString } from '@sequelize/core/_non-semver-use-at-your-own-risk_/utils/dayjs.js';\nimport { logger } from '@sequelize/core/_non-semver-use-at-your-own-risk_/utils/logger.js';\nimport { isError } from '@sequelize/utils';\nimport { isNodeError } from '@sequelize/utils/node';\nimport * as MySql2 from 'mysql2';\nimport assert from 'node:assert';\nimport { promisify } from 'node:util';\nimport type { MySqlDialect } from './dialect.js';\n\nconst debug = logger.debugContext('connection:mysql');\n\nexport type MySql2Module = typeof MySql2;\n\nexport interface MySqlConnection extends MySql2.Connection, AbstractConnection {}\n\nexport interface MySqlConnectionOptions\n  extends Omit<\n    MySql2.ConnectionOptions,\n    // The user cannot modify these options:\n    // This option is currently a global Sequelize option\n    | 'timezone'\n    // Conflicts with our own features\n    | 'nestTables'\n    // We provide our own placeholders.\n    // TODO: should we use named placeholders for mysql?\n    | 'namedPlaceholders'\n    // We provide our own pool\n    | 'pool'\n    // Our code expects specific response formats, setting any of the following option would break Sequelize\n    | 'typeCast'\n    | 'bigNumberStrings'\n    | 'supportBigNumbers'\n    | 'dateStrings'\n    | 'decimalNumbers'\n    | 'rowsAsArray'\n    | 'stringifyObjects'\n    | 'queryFormat'\n    | 'Promise'\n    // We provide our own \"url\" implementation\n    | 'uri'\n  > {}\n\n/**\n * MySQL Connection Manager\n *\n * Get connections, validate and disconnect them.\n * AbstractConnectionManager pooling use it to handle MySQL specific connections\n * Use https://github.com/sidorares/node-mysql2 to connect with MySQL server\n */\nexport class MySqlConnectionManager extends AbstractConnectionManager<\n  MySqlDialect,\n  MySqlConnection\n> {\n  readonly #lib: MySql2Module;\n\n  constructor(dialect: MySqlDialect) {\n    super(dialect);\n    this.#lib = this.dialect.options.mysql2Module ?? MySql2;\n  }\n\n  #typecast(field: MySql2.TypeCastField, next: () => void): unknown {\n    const dataParser = this.dialect.getParserForDatabaseDataType(field.type);\n    if (dataParser) {\n      const value = dataParser(field);\n\n      if (value !== undefined) {\n        return value;\n      }\n    }\n\n    return next();\n  }\n\n  /**\n   * Connect with MySQL database based on config, Handle any errors in connection\n   * Set the pool handlers on connection.error\n   * Also set proper timezone once connection is connected.\n   *\n   * @param config\n   */\n  async connect(config: ConnectionOptions<MySqlDialect>): Promise<MySqlConnection> {\n    assert(typeof config.port === 'number', 'port has not been normalized');\n\n    // TODO: enable dateStrings\n    const connectionConfig: MySql2.ConnectionOptions = {\n      flags: ['-FOUND_ROWS'],\n      port: 3306,\n      ...config,\n      ...(!this.sequelize.options.timezone ? null : { timezone: this.sequelize.options.timezone }),\n      bigNumberStrings: false,\n      supportBigNumbers: true,\n      typeCast: (field, next) => this.#typecast(field, next),\n    };\n\n    try {\n      const connection: MySqlConnection = await createConnection(this.#lib, connectionConfig);\n\n      debug('connection acquired');\n\n      connection.on('error', (error: unknown) => {\n        if (!isNodeError(error)) {\n          return;\n        }\n\n        switch (error.code) {\n          case 'ESOCKET':\n          case 'ECONNRESET':\n          case 'EPIPE':\n          case 'PROTOCOL_CONNECTION_LOST':\n            void this.sequelize.pool.destroy(connection);\n            break;\n          default:\n        }\n      });\n\n      if (!this.sequelize.options.keepDefaultTimezone && this.sequelize.options.timezone) {\n        // set timezone for this connection\n        // but named timezone are not directly supported in mysql, so get its offset first\n        let tzOffset = this.sequelize.options.timezone;\n        tzOffset = tzOffset.includes('/') ? timeZoneToOffsetString(tzOffset) : tzOffset;\n        await promisify(cb => connection.query(`SET time_zone = '${tzOffset}'`, cb))();\n      }\n\n      return connection;\n    } catch (error) {\n      if (!isError(error)) {\n        throw error;\n      }\n\n      const code = isNodeError(error) ? error.code : null;\n\n      switch (code) {\n        case 'ECONNREFUSED':\n          throw new ConnectionRefusedError(error);\n        case 'ER_ACCESS_DENIED_ERROR':\n          throw new AccessDeniedError(error);\n        case 'ENOTFOUND':\n          throw new HostNotFoundError(error);\n        case 'EHOSTUNREACH':\n          throw new HostNotReachableError(error);\n        case 'EINVAL':\n          throw new InvalidConnectionError(error);\n        default:\n          throw new ConnectionError(error);\n      }\n    }\n  }\n\n  async disconnect(connection: MySqlConnection) {\n    // @ts-expect-error -- undeclared var\n    if (connection._closing) {\n      debug('connection tried to disconnect but was already at CLOSED state');\n\n      return;\n    }\n\n    await promisify(callback => connection.end(callback))();\n  }\n\n  validate(connection: MySqlConnection) {\n    return (\n      connection &&\n      // @ts-expect-error -- undeclared var\n      !connection._fatalError &&\n      // @ts-expect-error -- undeclared var\n      !connection._protocolError &&\n      // @ts-expect-error -- undeclared var\n      !connection._closing &&\n      // @ts-expect-error -- undeclared var\n      !connection.stream.destroyed\n    );\n  }\n}\n\nasync function createConnection(\n  lib: typeof MySql2,\n  config: MySql2.ConnectionOptions,\n): Promise<MySqlConnection> {\n  return new Promise((resolve, reject) => {\n    const connection: MySqlConnection = lib.createConnection(config) as MySqlConnection;\n\n    const errorHandler = (e: unknown) => {\n      // clean up connect & error event if there is error\n      connection.removeListener('connect', connectHandler);\n      connection.removeListener('error', connectHandler);\n      reject(e);\n    };\n\n    const connectHandler = () => {\n      // clean up error event if connected\n      connection.removeListener('error', errorHandler);\n      resolve(connection);\n    };\n\n    // don't use connection.once for error event handling here\n    // mysql2 emit error two times in case handshake was failed\n    // first error is protocol_lost and second is timeout\n    // if we will use `once.error` node process will crash on 2nd error emit\n    connection.on('error', errorHandler);\n    connection.once('connect', connectHandler);\n  });\n}\n"],
  "mappings": "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",
  "names": ["assert"]
}
