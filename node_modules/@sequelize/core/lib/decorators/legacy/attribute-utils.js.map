{
  "version": 3,
  "sources": ["../../../src/decorators/legacy/attribute-utils.ts"],
  "sourcesContent": ["import type { AttributeOptions, ModelStatic } from '../../model.js';\nimport { Model } from '../../model.js';\nimport { registerModelAttributeOptions } from '../shared/model.js';\nimport type {\n  OptionalParameterizedPropertyDecorator,\n  RequiredParameterizedPropertyDecorator,\n} from './decorator-utils.js';\nimport {\n  DECORATOR_NO_DEFAULT,\n  createOptionallyParameterizedPropertyDecorator,\n  throwMustBeAttribute,\n  throwMustBeInstanceProperty,\n  throwMustBeMethod,\n} from './decorator-utils.js';\n\n/**\n * Creates a decorator that registers Attribute Options. Parameters are mandatory.\n *\n * @param decoratorName The name of the decorator (must be equal to its export key)\n * @param callback The callback that will return the Attribute Options.\n */\nexport function createRequiredAttributeOptionsDecorator<T>(\n  decoratorName: string,\n  callback: (\n    option: T,\n    target: Object,\n    propertyName: string | symbol,\n    propertyDescriptor: PropertyDescriptor | undefined,\n  ) => Partial<AttributeOptions>,\n): RequiredParameterizedPropertyDecorator<T> {\n  return createOptionalAttributeOptionsDecorator(decoratorName, DECORATOR_NO_DEFAULT, callback);\n}\n\n/**\n * Creates a decorator that registers Attribute Options. Parameters are optional.\n *\n * @param decoratorName The name of the decorator (must be equal to its export key)\n * @param defaultValue The default value, if no parameter was provided.\n * @param callback The callback that will return the Attribute Options.\n */\nexport function createOptionalAttributeOptionsDecorator<T>(\n  decoratorName: string,\n  defaultValue: T | typeof DECORATOR_NO_DEFAULT,\n  callback: (\n    option: T,\n    target: Object,\n    propertyName: string,\n    propertyDescriptor: PropertyDescriptor | undefined,\n  ) => Partial<AttributeOptions>,\n): OptionalParameterizedPropertyDecorator<T> {\n  return createOptionallyParameterizedPropertyDecorator(\n    decoratorName,\n    defaultValue,\n    (decoratorOption, target, propertyName, propertyDescriptor) => {\n      if (typeof propertyName === 'symbol') {\n        throwMustBeAttribute(decoratorName, target, propertyName);\n      }\n\n      const attributeOptions = callback(decoratorOption, target, propertyName, propertyDescriptor);\n\n      annotate(decoratorName, target, propertyName, propertyDescriptor, attributeOptions);\n    },\n  );\n}\n\nfunction annotate(\n  decoratorName: string,\n  target: Object,\n  propertyName: string,\n  propertyDescriptor: PropertyDescriptor | undefined,\n  options: Partial<AttributeOptions>,\n): void {\n  if (typeof target === 'function') {\n    throwMustBeInstanceProperty(decoratorName, target, propertyName);\n  }\n\n  if (!(target instanceof Model)) {\n    throwMustBeMethod(decoratorName, target, propertyName);\n  }\n\n  options = { ...options };\n\n  if (propertyDescriptor) {\n    if (propertyDescriptor.get) {\n      options.get = propertyDescriptor.get;\n    }\n\n    if (propertyDescriptor.set) {\n      options.set = propertyDescriptor.set;\n    }\n  }\n\n  registerModelAttributeOptions(target.constructor as ModelStatic, propertyName, options);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,mBAAsB;AACtB,IAAAA,gBAA8C;AAK9C,6BAMO;AAQA,SAAS,wCACd,eACA,UAM2C;AAC3C,SAAO,wCAAwC,eAAe,6CAAsB,QAAQ;AAC9F;AASO,SAAS,wCACd,eACA,cACA,UAM2C;AAC3C,aAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA,CAAC,iBAAiB,QAAQ,cAAc,uBAAuB;AAC7D,UAAI,OAAO,iBAAiB,UAAU;AACpC,yDAAqB,eAAe,QAAQ,YAAY;AAAA,MAC1D;AAEA,YAAM,mBAAmB,SAAS,iBAAiB,QAAQ,cAAc,kBAAkB;AAE3F,eAAS,eAAe,QAAQ,cAAc,oBAAoB,gBAAgB;AAAA,IACpF;AAAA,EACF;AACF;AAEA,SAAS,SACP,eACA,QACA,cACA,oBACA,SACM;AACN,MAAI,OAAO,WAAW,YAAY;AAChC,4DAA4B,eAAe,QAAQ,YAAY;AAAA,EACjE;AAEA,MAAI,EAAE,kBAAkB,qBAAQ;AAC9B,kDAAkB,eAAe,QAAQ,YAAY;AAAA,EACvD;AAEA,YAAU,EAAE,GAAG,QAAQ;AAEvB,MAAI,oBAAoB;AACtB,QAAI,mBAAmB,KAAK;AAC1B,cAAQ,MAAM,mBAAmB;AAAA,IACnC;AAEA,QAAI,mBAAmB,KAAK;AAC1B,cAAQ,MAAM,mBAAmB;AAAA,IACnC;AAAA,EACF;AAEA,mDAA8B,OAAO,aAA4B,cAAc,OAAO;AACxF;",
  "names": ["import_model"]
}
