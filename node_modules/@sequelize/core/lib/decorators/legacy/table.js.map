{
  "version": 3,
  "sources": ["../../../src/decorators/legacy/table.ts"],
  "sourcesContent": ["import type { Model, ModelOptions, ModelStatic } from '../../model.js';\nimport type { RegisteredModelOptions } from '../shared/model.js';\nimport { registerModelOptions } from '../shared/model.js';\n\n/**\n * The `@Table` decorator is used to configure a model. It is used on a model class, and takes an object as parameter.<br />\n * Using this decorator is completely optional, you only need to use it if you want to configure one of the options of your model.\n *\n * @example\n * ```ts\n * @Table({\n *   tableName: 'users',\n *   timestamps: false,\n * })\n * class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {}\n * ```\n *\n * @param options\n */\nexport function Table<M extends Model = Model>(options: ModelOptions<M>): ClassDecorator;\nexport function Table(target: ModelStatic): void;\nexport function Table(arg: any): undefined | ClassDecorator {\n  if (typeof arg === 'function') {\n    annotate(arg);\n\n    return undefined;\n  }\n\n  const options: ModelOptions = { ...arg };\n\n  // @ts-expect-error -- making sure the option is not provided.\n  if (options.abstract) {\n    throw new Error(\n      '`abstract` is not a valid option for @Table. Did you mean to use @Table.Abstract?',\n    );\n  }\n\n  return (target: any) => annotate(target, options);\n}\n\nfunction AbstractTable<M extends Model = Model>(\n  options: Omit<ModelOptions<M>, 'tableName' | 'name'>,\n): ClassDecorator;\nfunction AbstractTable(target: ModelStatic): void;\nfunction AbstractTable(arg: any): undefined | ClassDecorator {\n  if (typeof arg === 'function') {\n    annotate(arg, { abstract: true });\n\n    return undefined;\n  }\n\n  const options: ModelOptions = { ...arg, abstract: true };\n\n  if (options.tableName || options.name) {\n    throw new Error('Options \"tableName\" and \"name\" cannot be set on abstract models.');\n  }\n\n  return (target: any) => annotate(target, options);\n}\n\nTable.Abstract = AbstractTable;\n\nfunction annotate(target: ModelStatic, options: RegisteredModelOptions = {}): void {\n  registerModelOptions(target, options);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,mBAAqC;AAmB9B,SAAS,MAAM,KAAsC;AAC1D,MAAI,OAAO,QAAQ,YAAY;AAC7B,aAAS,GAAG;AAEZ,WAAO;AAAA,EACT;AAEA,QAAM,UAAwB,EAAE,GAAG,IAAI;AAGvC,MAAI,QAAQ,UAAU;AACpB,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EACF;AAEA,SAAO,CAAC,WAAgB,SAAS,QAAQ,OAAO;AAClD;AAMA,SAAS,cAAc,KAAsC;AAC3D,MAAI,OAAO,QAAQ,YAAY;AAC7B,aAAS,KAAK,EAAE,UAAU,KAAK,CAAC;AAEhC,WAAO;AAAA,EACT;AAEA,QAAM,UAAwB,EAAE,GAAG,KAAK,UAAU,KAAK;AAEvD,MAAI,QAAQ,aAAa,QAAQ,MAAM;AACrC,UAAM,IAAI,MAAM,kEAAkE;AAAA,EACpF;AAEA,SAAO,CAAC,WAAgB,SAAS,QAAQ,OAAO;AAClD;AAEA,MAAM,WAAW;AAEjB,SAAS,SAAS,QAAqB,UAAkC,CAAC,GAAS;AACjF,yCAAqB,QAAQ,OAAO;AACtC;",
  "names": []
}
