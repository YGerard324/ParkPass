{
  "version": 3,
  "sources": ["../../../src/decorators/legacy/attribute.ts"],
  "sourcesContent": ["import type { NonUndefined } from '@sequelize/utils';\nimport { isDataType } from '../../abstract-dialect/data-types-utils.js';\nimport type { DataType } from '../../abstract-dialect/data-types.js';\nimport type { AttributeIndexOptions, AttributeOptions } from '../../model.js';\nimport { columnToAttribute } from '../../utils/deprecations.js';\nimport { underscore } from '../../utils/string.js';\nimport {\n  createOptionalAttributeOptionsDecorator,\n  createRequiredAttributeOptionsDecorator,\n} from './attribute-utils.js';\nimport type { PropertyOrGetterDescriptor } from './decorator-utils.js';\n\ntype AttributeDecoratorOption = DataType | Partial<AttributeOptions>;\n\n/**\n * The `@Attribute` decorator is used to add an attribute to a model. It is used on an instance property.\n *\n * @example\n * The simplest way to use it is to pass a data type as the parameter:\n * ```ts\n * class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n *   @Attribute(DataTypes.STRING)\n *   declare firstName: string | null;\n * }\n * ```\n *\n * @example\n * `@Attribute` also accepts an option bag, {@link index~AttributeOptions}, which allows you to configure all available attribute definition options.\n * ```ts\n * class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n *   @Attribute({\n *     type: DataTypes.STRING,\n *     allowNull: false,\n *   })\n *   declare firstName: string;\n * }\n * ```\n */\nexport const Attribute = createRequiredAttributeOptionsDecorator<AttributeDecoratorOption>(\n  'Attribute',\n  attrOptionOrDataType => {\n    if (isDataType(attrOptionOrDataType)) {\n      return {\n        type: attrOptionOrDataType,\n      };\n    }\n\n    return attrOptionOrDataType;\n  },\n);\n\n/**\n * @param optionsOrDataType\n * @deprecated use {@link Attribute} instead.\n */\nexport function Column(optionsOrDataType: DataType | AttributeOptions): PropertyOrGetterDescriptor {\n  columnToAttribute();\n\n  return Attribute(optionsOrDataType);\n}\n\ntype UniqueOptions = NonNullable<AttributeOptions['unique']>;\n\n/**\n * The `@Unique` decorator is used to make an attribute unique, it is a shortcut for setting the `unique` option of the {@link Attribute} decorator.\n * Learn more about unique constraints in our documentation.\n *\n * @example\n * This makes \"firstName\" unique\n * ```ts\n * class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n *   @Attribute(DataTypes.STRING)\n *   @Unique\n *   declare firstName: string;\n * }\n * ```\n *\n * @example\n * This creates a composite unique on columns \"firstName\" and \"lastName\"\n * ```ts\n * class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n *   @Attribute(DataTypes.STRING)\n *   @Unique('firstName-lastName')\n *   declare firstName: string;\n *\n *   @Attribute(DataTypes.STRING)\n *   @Unique('firstName-lastName')\n *   declare lastName: string;\n * }\n * ```\n */\nexport const Unique = createOptionalAttributeOptionsDecorator<UniqueOptions>(\n  'Unique',\n  true,\n  (unique: UniqueOptions) => ({ unique }),\n);\n\n/**\n * Makes the attribute accept null values. Opposite of {@link NotNull}.\n * It is a shortcut for setting the `allowNull` option of the {@link Attribute} decorator to true.\n *\n * @example\n * ```ts\n * class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n *   @Attribute(DataTypes.STRING)\n *   @AllowNull\n *   declare firstName: string | null;\n * }\n * ```\n */\nexport const AllowNull = createOptionalAttributeOptionsDecorator<boolean>(\n  'AllowNull',\n  true,\n  (allowNull: boolean) => ({ allowNull }),\n);\n\n/**\n * Makes the attribute reject null values. Opposite of {@link AllowNull}.\n * It is a shortcut for setting the `allowNull` option of the {@link Attribute} decorator to false.\n *\n * @example\n * ```ts\n * class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n *   @Attribute(DataTypes.STRING)\n *   @NotNull\n *   declare firstName: string;\n * }\n * ```\n */\nexport const NotNull = createOptionalAttributeOptionsDecorator<boolean>(\n  'NotNull',\n  true,\n  (notNull: boolean) => ({ allowNull: !notNull }),\n);\n\n/**\n * The `@PrimaryKey` decorator is used to make an attribute a primary key,\n * it is a shortcut for setting the `primaryKey` option of the {@link Attribute} decorator to true.\n *\n * @example\n * ```ts\n * class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n *   @Attribute(DataTypes.INTEGER)\n *   @PrimaryKey\n *   declare id: number;\n * }\n * ```\n */\nexport const PrimaryKey = createOptionalAttributeOptionsDecorator<boolean>(\n  'PrimaryKey',\n  true,\n  (primaryKey: boolean) => ({ primaryKey }),\n);\n\n/**\n * The `@AutoIncrement` decorator is used to make an attribute auto-increment,\n * it is a shortcut for setting the `autoIncrement` option of the {@link Attribute} decorator to true.\n *\n * Some dialects require the field to be a primary key.\n *\n * @example\n * ```ts\n * class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n *   @Attribute(DataTypes.INTEGER)\n *   @PrimaryKey\n *   @AutoIncrement\n *   declare id: number;\n * }\n * ```\n */\nexport const AutoIncrement = createOptionalAttributeOptionsDecorator<boolean>(\n  'AutoIncrement',\n  true,\n  (autoIncrement: boolean) => ({ autoIncrement }),\n);\n\n/**\n * The `@Comment` decorator is used to set the comment on a column, it is a shortcut for setting the `comment` option of the {@link Attribute} decorator.\n *\n * This is only useful if you use {@link index~Sequelize#sync} to create your tables.\n */\nexport const Comment = createRequiredAttributeOptionsDecorator<string>(\n  'Comment',\n  (comment: string) => ({ comment }),\n);\n\n/**\n * The `@Default` decorator is used to set a default value for an attribute, it is a shortcut for setting the `defaultValue` option of the {@link Attribute} decorator.\n *\n * @example\n * ```ts\n * class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n *   @Attribute(DataTypes.STRING)\n *   @Default('John Doe')\n *   declare firstName: string;\n * }\n * ```\n */\nexport const Default = createRequiredAttributeOptionsDecorator<unknown>(\n  'Default',\n  (defaultValue: unknown) => ({ defaultValue }),\n);\n\n/**\n * Sets the name of the column (in the database) this attribute maps to.\n * It is a shortcut for setting the `columnName` option of the {@link Attribute} decorator.\n *\n * With a good naming strategy configured, you rarely need to use this decorator.\n * Learn about naming strategies in our documentation.\n *\n * @example\n * ```ts\n * class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n *   @Attribute(DataTypes.STRING)\n *   @ColumnName('first_name')\n *   declare firstName: string;\n * }\n * ```\n */\nexport const ColumnName = createRequiredAttributeOptionsDecorator<string>(\n  'ColumnName',\n  (columnName: string) => ({ columnName }),\n);\n\ntype IndexAttributeOption = NonUndefined<AttributeIndexOptions['attribute']>;\n\nexport function createIndexDecorator(\n  decoratorName: string,\n  options: Omit<AttributeIndexOptions, 'attribute'> = {},\n) {\n  return createOptionalAttributeOptionsDecorator<IndexAttributeOption>(\n    decoratorName,\n    {},\n    (indexField: IndexAttributeOption): Partial<AttributeOptions> => {\n      const index: AttributeIndexOptions = {\n        ...options,\n        // TODO: default index name should be generated using https://github.com/sequelize/sequelize/issues/15312\n        name: options.name || underscore(decoratorName),\n        attribute: indexField,\n      };\n\n      return { index };\n    },\n  );\n}\n\ntype IndexDecoratorOptions = NonUndefined<AttributeOptions['index']>;\n\nexport const Index = createOptionalAttributeOptionsDecorator<IndexDecoratorOptions>(\n  'Index',\n  {},\n  (indexField: IndexDecoratorOptions): Partial<AttributeOptions> => {\n    return {\n      index: indexField,\n    };\n  },\n);\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,8BAA2B;AAG3B,0BAAkC;AAClC,oBAA2B;AAC3B,6BAGO;AA6BA,MAAM,gBAAY;AAAA,EACvB;AAAA,EACA,0BAAwB;AACtB,YAAI,oCAAW,oBAAoB,GAAG;AACpC,aAAO;AAAA,QACL,MAAM;AAAA,MACR;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AACF;AAMO,SAAS,OAAO,mBAA4E;AACjG,6CAAkB;AAElB,SAAO,UAAU,iBAAiB;AACpC;AAgCO,MAAM,aAAS;AAAA,EACpB;AAAA,EACA;AAAA,EACA,CAAC,YAA2B,EAAE,OAAO;AACvC;AAeO,MAAM,gBAAY;AAAA,EACvB;AAAA,EACA;AAAA,EACA,CAAC,eAAwB,EAAE,UAAU;AACvC;AAeO,MAAM,cAAU;AAAA,EACrB;AAAA,EACA;AAAA,EACA,CAAC,aAAsB,EAAE,WAAW,CAAC,QAAQ;AAC/C;AAeO,MAAM,iBAAa;AAAA,EACxB;AAAA,EACA;AAAA,EACA,CAAC,gBAAyB,EAAE,WAAW;AACzC;AAkBO,MAAM,oBAAgB;AAAA,EAC3B;AAAA,EACA;AAAA,EACA,CAAC,mBAA4B,EAAE,cAAc;AAC/C;AAOO,MAAM,cAAU;AAAA,EACrB;AAAA,EACA,CAAC,aAAqB,EAAE,QAAQ;AAClC;AAcO,MAAM,cAAU;AAAA,EACrB;AAAA,EACA,CAAC,kBAA2B,EAAE,aAAa;AAC7C;AAkBO,MAAM,iBAAa;AAAA,EACxB;AAAA,EACA,CAAC,gBAAwB,EAAE,WAAW;AACxC;AAIO,SAAS,qBACd,eACA,UAAoD,CAAC,GACrD;AACA,aAAO;AAAA,IACL;AAAA,IACA,CAAC;AAAA,IACD,CAAC,eAAgE;AAC/D,YAAM,QAA+B;AAAA,QACnC,GAAG;AAAA;AAAA,QAEH,MAAM,QAAQ,YAAQ,0BAAW,aAAa;AAAA,QAC9C,WAAW;AAAA,MACb;AAEA,aAAO,EAAE,MAAM;AAAA,IACjB;AAAA,EACF;AACF;AAIO,MAAM,YAAQ;AAAA,EACnB;AAAA,EACA,CAAC;AAAA,EACD,CAAC,eAAiE;AAChE,WAAO;AAAA,MACL,OAAO;AAAA,IACT;AAAA,EACF;AACF;",
  "names": []
}
