{
  "version": 3,
  "sources": ["../../../src/decorators/legacy/validation.ts"],
  "sourcesContent": ["import type { ColumnValidateOptions, ModelOptions } from '../../model.js';\nimport { isModelStatic } from '../../utils/model-utils.js';\nimport { registerModelOptions } from '../shared/model.js';\nimport { createRequiredAttributeOptionsDecorator } from './attribute-utils.js';\nimport {\n  createOptionallyParameterizedPropertyDecorator,\n  throwMustBeMethod,\n  throwMustBeModel,\n} from './decorator-utils.js';\n\n/**\n * Used to register a function that will be called when an attribute is being validated.\n *\n * @example\n * ```ts\n * class User extends Model {\n *   @Attribute(DataTypes.STRING)\n *   @ValidateAttribute({\n *     myCustomValidator: () => {\n *       // this function will run when this attribute is validated.\n *     },\n *   })\n *   declare name: string;\n * }\n * ```\n *\n * See also {@link ModelValidator}.\n */\nexport const ValidateAttribute = createRequiredAttributeOptionsDecorator<ColumnValidateOptions>(\n  'ValidateAttribute',\n  (decoratorOption: ColumnValidateOptions) => {\n    return { validate: decoratorOption };\n  },\n);\n\n/**\n * Used to register a model method that will be called when an instance is being validated.\n * Available as both an instance and static method (static method receives the model as a parameter).\n *\n * @example\n * ```ts\n * class User extends Model {\n *   @ValidateModel\n *   onValidate() {\n *     if (this.name !== VALID_NAME) {\n *       throw new Error(ERROR_MESSAGE);\n *     }\n *   }\n *\n *   @ValidateModel\n *   static onValidate(instance) {\n *     if (instance.name !== VALID_NAME) {\n *       throw new Error(ERROR_MESSAGE);\n *     }\n *   }\n * }\n * ```\n *\n * See also {@link ValidateAttribute}.\n */\nexport const ModelValidator = createOptionallyParameterizedPropertyDecorator<undefined>(\n  'ModelValidator',\n  undefined,\n  (decoratorOption: ModelOptions['validate'], target: Object, propertyName: string | symbol) => {\n    const isStatic = typeof target === 'function';\n    const targetClass = isStatic ? target : target.constructor;\n\n    if (!isModelStatic(targetClass)) {\n      throwMustBeModel('ModelValidator', target, propertyName);\n    }\n\n    // @ts-expect-error -- it's normal to get any here\n    const property = target[propertyName];\n    if (typeof property !== 'function') {\n      throwMustBeMethod('ModelValidator', target, propertyName);\n    }\n\n    const validator = isStatic\n      ? function validate() {\n          // When registered as a static method, the model is passed as the first parameter, and the context (\"this\") must be the class\n          /* eslint-disable @typescript-eslint/no-invalid-this */\n          // @ts-expect-error -- description above ^\n          property.call(target, this);\n          /* eslint-enable @typescript-eslint/no-invalid-this */\n        }\n      : property;\n\n    registerModelOptions(targetClass, {\n      validate: {\n        [propertyName]: validator,\n      },\n    });\n  },\n);\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,yBAA8B;AAC9B,mBAAqC;AACrC,6BAAwD;AACxD,6BAIO;AAoBA,MAAM,wBAAoB;AAAA,EAC/B;AAAA,EACA,CAAC,oBAA2C;AAC1C,WAAO,EAAE,UAAU,gBAAgB;AAAA,EACrC;AACF;AA2BO,MAAM,qBAAiB;AAAA,EAC5B;AAAA,EACA;AAAA,EACA,CAAC,iBAA2C,QAAgB,iBAAkC;AAC5F,UAAM,WAAW,OAAO,WAAW;AACnC,UAAM,cAAc,WAAW,SAAS,OAAO;AAE/C,QAAI,KAAC,kCAAc,WAAW,GAAG;AAC/B,mDAAiB,kBAAkB,QAAQ,YAAY;AAAA,IACzD;AAGA,UAAM,WAAW,OAAO,YAAY;AACpC,QAAI,OAAO,aAAa,YAAY;AAClC,oDAAkB,kBAAkB,QAAQ,YAAY;AAAA,IAC1D;AAEA,UAAM,YAAY,WACd,SAAS,WAAW;AAIlB,eAAS,KAAK,QAAQ,IAAI;AAAA,IAE5B,IACA;AAEJ,2CAAqB,aAAa;AAAA,MAChC,UAAU;AAAA,QACR,CAAC,YAAY,GAAG;AAAA,MAClB;AAAA,IACF,CAAC;AAAA,EACH;AACF;",
  "names": []
}
