{
  "version": 3,
  "sources": ["../../src/utils/class-to-invokable.ts"],
  "sourcesContent": ["type Callable<A extends abstract new () => any> = A extends new (\n  ...args: infer Args\n) => infer Instance\n  ? A & ((...args: Args) => Instance)\n  : never;\n\n/**\n * Wraps a constructor to not need the `new` keyword using a proxy.\n * Only used for data types.\n *\n * @param constructor The class instance to wrap as invocable.\n * @returns Wrapped class instance.\n * @private\n */\nexport function classToInvokable<Class extends new (...args: any[]) => any>(\n  constructor: Class,\n): Callable<Class> {\n  return new Proxy<Callable<Class>>(constructor as any, {\n    apply(_target, _thisArg, args: ConstructorParameters<Class>) {\n      return new constructor(...args);\n    },\n  });\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAcO,SAAS,iBACd,aACiB;AACjB,SAAO,IAAI,MAAuB,aAAoB;AAAA,IACpD,MAAM,SAAS,UAAU,MAAoC;AAC3D,aAAO,IAAI,YAAY,GAAG,IAAI;AAAA,IAChC;AAAA,EACF,CAAC;AACH;",
  "names": []
}
