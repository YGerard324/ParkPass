{
  "version": 3,
  "sources": ["../../src/utils/connection-options.ts"],
  "sourcesContent": ["import type { PickByType } from '@sequelize/utils';\nimport {\n  EMPTY_ARRAY,\n  inspect,\n  isString,\n  join,\n  parseBoolean,\n  parseFiniteNumber,\n  parseSafeInteger,\n  pojo,\n} from '@sequelize/utils';\nimport type { StringKeyOf } from 'type-fest';\nimport type { AbstractDialect, ConnectionOptions } from '../abstract-dialect/dialect.js';\nimport type { NormalizedReplicationOptions, RawConnectionOptions } from '../sequelize';\nimport type { PersistedSequelizeOptions } from '../sequelize.internals.js';\n\nexport function normalizeReplicationConfig<Dialect extends AbstractDialect>(\n  dialect: Dialect,\n  connectionOptions: RawConnectionOptions<Dialect>,\n  replicationOption: PersistedSequelizeOptions<Dialect>['replication'],\n): NormalizedReplicationOptions<Dialect> {\n  const normalizedConnectionOptions = normalizeRawConnectionOptions(dialect, connectionOptions);\n\n  return {\n    write: {\n      ...normalizedConnectionOptions,\n      ...(replicationOption &&\n        replicationOption.write &&\n        normalizeRawConnectionOptions(dialect, replicationOption.write)),\n    },\n    read: !replicationOption\n      ? EMPTY_ARRAY\n      : replicationOption.read.map(readOptions => {\n          return {\n            ...normalizedConnectionOptions,\n            ...normalizeRawConnectionOptions(dialect, readOptions),\n          };\n        }),\n  };\n}\n\nfunction normalizeRawConnectionOptions<Dialect extends AbstractDialect>(\n  dialect: Dialect,\n  options: RawConnectionOptions<Dialect>,\n): ConnectionOptions<Dialect> {\n  if (isString(options)) {\n    return dialect.parseConnectionUrl(options);\n  }\n\n  const { url, ...remainingOptions } = options;\n\n  if (url) {\n    return {\n      ...dialect.parseConnectionUrl(url),\n      ...remainingOptions,\n    };\n  }\n\n  return remainingOptions;\n}\n\nexport function parseCommonConnectionUrlOptions<TConnectionOptions extends object>(options: {\n  url: URL | string;\n\n  /**\n   * The list of protocols that the URL can use\n   */\n  allowedProtocols: readonly string[];\n\n  /**\n   * The name of the dialect-specific connection option to use for the hostname\n   */\n  hostname: keyof PickByType<TConnectionOptions, string>;\n\n  /**\n   * The name of the dialect-specific connection option to use for the port\n   */\n  port: keyof PickByType<TConnectionOptions, number>;\n\n  /**\n   * The name of the dialect-specific connection option to use for the database name\n   */\n  pathname: keyof PickByType<TConnectionOptions, string>;\n\n  /**\n   * The name of the dialect-specific connection option to use for the username\n   *\n   * If not provided, the username will be ignored\n   */\n  username?: keyof PickByType<TConnectionOptions, string>;\n\n  /**\n   * The name of the dialect-specific connection option to use for the password\n   *\n   * If not provided, the password will be ignored\n   */\n  password?: keyof PickByType<TConnectionOptions, string>;\n\n  /**\n   * The string options that can be set via the search parameters in the URL\n   */\n  stringSearchParams?: ReadonlyArray<StringKeyOf<PickByType<TConnectionOptions, string>>>;\n\n  /**\n   * The boolean options that can be set via the search parameters in the URL.\n   * Will be parsed as a boolean.\n   */\n  booleanSearchParams?: ReadonlyArray<StringKeyOf<PickByType<TConnectionOptions, boolean>>>;\n\n  /**\n   * The number options that can be set via the search parameters in the URL.\n   * Will be parsed as a JS number.\n   */\n  numberSearchParams?: ReadonlyArray<StringKeyOf<PickByType<TConnectionOptions, number>>>;\n}): TConnectionOptions {\n  const url: URL = isString(options.url) ? new URL(options.url) : options.url;\n\n  const assignTo = pojo<TConnectionOptions>();\n\n  const scheme = url.protocol.slice(0, -1);\n  if (!options.allowedProtocols.includes(scheme)) {\n    throw new Error(\n      `URL ${inspect(url.toString())} is not a valid connection URL. Expected the protocol to be one of ${options.allowedProtocols.map(inspect).join(', ')}, but it's ${inspect(scheme)}.`,\n    );\n  }\n\n  if (url.hostname) {\n    // @ts-expect-error -- the above typings ensure this is a string\n    assignTo[options.hostname] = decodeURIComponent(url.hostname);\n  }\n\n  if (url.port) {\n    // @ts-expect-error -- the above typings ensure this is a number\n    assignTo[options.port] = parseSafeInteger.orThrow(url.port);\n  }\n\n  if (url.pathname) {\n    // @ts-expect-error -- the above typings ensure this is a string\n    assignTo[options.pathname] = decodeURIComponent(url.pathname.replace(/^\\//, ''));\n  }\n\n  if (options.username && url.username) {\n    // @ts-expect-error -- the above typings ensure this is a string\n    assignTo[options.username] = decodeURIComponent(url.username);\n  }\n\n  if (options.password && url.password) {\n    // @ts-expect-error -- the above typings ensure this is a string\n    assignTo[options.password] = decodeURIComponent(url.password);\n  }\n\n  const allSearchParams = new Set<string>([\n    ...(options.stringSearchParams ?? EMPTY_ARRAY),\n    ...(options.booleanSearchParams ?? EMPTY_ARRAY),\n    ...(options.numberSearchParams ?? EMPTY_ARRAY),\n  ]);\n\n  if (url.searchParams) {\n    for (const key of url.searchParams.keys()) {\n      if (!allSearchParams.has(key)) {\n        throw new Error(\n          `Option ${inspect(key)} cannot be set as a connection URL search parameter. Only the following options can be set: ${join(allSearchParams, ', ')}`,\n        );\n      }\n\n      if (options.stringSearchParams?.includes(key as any)) {\n        // @ts-expect-error -- the above typings ensure this is a string\n        assignTo[key] = url.searchParams.get(key)!;\n      }\n\n      try {\n        if (options.booleanSearchParams?.includes(key as any)) {\n          // @ts-expect-error -- the above typings ensure this is a boolean\n          assignTo[key] = parseBoolean.orThrow(url.searchParams.get(key));\n        }\n\n        if (options.numberSearchParams?.includes(key as any)) {\n          // @ts-expect-error -- the above typings ensure this is a number\n          assignTo[key] = parseFiniteNumber.orThrow(url.searchParams.get(key));\n        }\n      } catch (error) {\n        throw new Error(`Could not parse URL search parameter ${key}`, { cause: error });\n      }\n    }\n  }\n\n  return assignTo;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,mBASO;AAMA,SAAS,2BACd,SACA,mBACA,mBACuC;AACvC,QAAM,8BAA8B,8BAA8B,SAAS,iBAAiB;AAE5F,SAAO;AAAA,IACL,OAAO;AAAA,MACL,GAAG;AAAA,MACH,GAAI,qBACF,kBAAkB,SAClB,8BAA8B,SAAS,kBAAkB,KAAK;AAAA,IAClE;AAAA,IACA,MAAM,CAAC,oBACH,2BACA,kBAAkB,KAAK,IAAI,iBAAe;AACxC,aAAO;AAAA,QACL,GAAG;AAAA,QACH,GAAG,8BAA8B,SAAS,WAAW;AAAA,MACvD;AAAA,IACF,CAAC;AAAA,EACP;AACF;AAEA,SAAS,8BACP,SACA,SAC4B;AAC5B,UAAI,uBAAS,OAAO,GAAG;AACrB,WAAO,QAAQ,mBAAmB,OAAO;AAAA,EAC3C;AAEA,QAAM,EAAE,KAAK,GAAG,iBAAiB,IAAI;AAErC,MAAI,KAAK;AACP,WAAO;AAAA,MACL,GAAG,QAAQ,mBAAmB,GAAG;AAAA,MACjC,GAAG;AAAA,IACL;AAAA,EACF;AAEA,SAAO;AACT;AAEO,SAAS,gCAAmE,SAqD5D;AACrB,QAAM,UAAW,uBAAS,QAAQ,GAAG,IAAI,IAAI,IAAI,QAAQ,GAAG,IAAI,QAAQ;AAExE,QAAM,eAAW,mBAAyB;AAE1C,QAAM,SAAS,IAAI,SAAS,MAAM,GAAG,EAAE;AACvC,MAAI,CAAC,QAAQ,iBAAiB,SAAS,MAAM,GAAG;AAC9C,UAAM,IAAI;AAAA,MACR,WAAO,sBAAQ,IAAI,SAAS,CAAC,uEAAuE,QAAQ,iBAAiB,IAAI,oBAAO,EAAE,KAAK,IAAI,mBAAe,sBAAQ,MAAM;AAAA,IAClL;AAAA,EACF;AAEA,MAAI,IAAI,UAAU;AAEhB,aAAS,QAAQ,QAAQ,IAAI,mBAAmB,IAAI,QAAQ;AAAA,EAC9D;AAEA,MAAI,IAAI,MAAM;AAEZ,aAAS,QAAQ,IAAI,IAAI,8BAAiB,QAAQ,IAAI,IAAI;AAAA,EAC5D;AAEA,MAAI,IAAI,UAAU;AAEhB,aAAS,QAAQ,QAAQ,IAAI,mBAAmB,IAAI,SAAS,QAAQ,OAAO,EAAE,CAAC;AAAA,EACjF;AAEA,MAAI,QAAQ,YAAY,IAAI,UAAU;AAEpC,aAAS,QAAQ,QAAQ,IAAI,mBAAmB,IAAI,QAAQ;AAAA,EAC9D;AAEA,MAAI,QAAQ,YAAY,IAAI,UAAU;AAEpC,aAAS,QAAQ,QAAQ,IAAI,mBAAmB,IAAI,QAAQ;AAAA,EAC9D;AAEA,QAAM,kBAAkB,oBAAI,IAAY;AAAA,IACtC,GAAI,QAAQ,sBAAsB;AAAA,IAClC,GAAI,QAAQ,uBAAuB;AAAA,IACnC,GAAI,QAAQ,sBAAsB;AAAA,EACpC,CAAC;AAED,MAAI,IAAI,cAAc;AACpB,eAAW,OAAO,IAAI,aAAa,KAAK,GAAG;AACzC,UAAI,CAAC,gBAAgB,IAAI,GAAG,GAAG;AAC7B,cAAM,IAAI;AAAA,UACR,cAAU,sBAAQ,GAAG,oGAAgG,mBAAK,iBAAiB,IAAI;AAAA,QACjJ;AAAA,MACF;AAEA,UAAI,QAAQ,oBAAoB,SAAS,GAAU,GAAG;AAEpD,iBAAS,GAAG,IAAI,IAAI,aAAa,IAAI,GAAG;AAAA,MAC1C;AAEA,UAAI;AACF,YAAI,QAAQ,qBAAqB,SAAS,GAAU,GAAG;AAErD,mBAAS,GAAG,IAAI,0BAAa,QAAQ,IAAI,aAAa,IAAI,GAAG,CAAC;AAAA,QAChE;AAEA,YAAI,QAAQ,oBAAoB,SAAS,GAAU,GAAG;AAEpD,mBAAS,GAAG,IAAI,+BAAkB,QAAQ,IAAI,aAAa,IAAI,GAAG,CAAC;AAAA,QACrE;AAAA,MACF,SAAS,OAAP;AACA,cAAM,IAAI,MAAM,wCAAwC,OAAO,EAAE,OAAO,MAAM,CAAC;AAAA,MACjF;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AACT;",
  "names": []
}
