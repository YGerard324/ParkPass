{
  "version": 3,
  "sources": ["../../src/utils/dayjs.ts"],
  "sourcesContent": ["import dayjs from 'dayjs';\nimport timezone from 'dayjs/plugin/timezone';\nimport utc from 'dayjs/plugin/utc';\n\ndayjs.extend(utc);\ndayjs.extend(timezone);\n\nconst history = new Map<string, boolean>();\n\nexport function timeZoneToOffsetString(timeZone: string) {\n  if (isValidTimeZone(timeZone)) {\n    return dayjs().tz(timeZone).format('Z');\n  }\n\n  throw new Error(`Invalid time zone: ${timeZone}`);\n}\n\nexport function isValidTimeZone(tz: string) {\n  if (history.has(tz)) {\n    return history.get(tz);\n  }\n\n  let status: boolean;\n  try {\n    Intl.DateTimeFormat(undefined, { timeZone: tz });\n\n    status = true;\n  } catch {\n    status = false;\n  }\n\n  history.set(tz, status);\n\n  return status;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAkB;AAClB,sBAAqB;AACrB,iBAAgB;AAEhB,aAAAA,QAAM,OAAO,WAAAC,OAAG;AAChB,aAAAD,QAAM,OAAO,gBAAAE,OAAQ;AAErB,MAAM,UAAU,oBAAI,IAAqB;AAElC,SAAS,uBAAuB,UAAkB;AACvD,MAAI,gBAAgB,QAAQ,GAAG;AAC7B,eAAO,aAAAF,SAAM,EAAE,GAAG,QAAQ,EAAE,OAAO,GAAG;AAAA,EACxC;AAEA,QAAM,IAAI,MAAM,sBAAsB,UAAU;AAClD;AAEO,SAAS,gBAAgB,IAAY;AAC1C,MAAI,QAAQ,IAAI,EAAE,GAAG;AACnB,WAAO,QAAQ,IAAI,EAAE;AAAA,EACvB;AAEA,MAAI;AACJ,MAAI;AACF,SAAK,eAAe,QAAW,EAAE,UAAU,GAAG,CAAC;AAE/C,aAAS;AAAA,EACX,QAAE;AACA,aAAS;AAAA,EACX;AAEA,UAAQ,IAAI,IAAI,MAAM;AAEtB,SAAO;AACT;",
  "names": ["dayjs", "utc", "timezone"]
}
