{
  "version": 3,
  "sources": ["../../src/utils/string.ts"],
  "sourcesContent": ["import * as _inflection from 'inflection';\nimport lowerFirst from 'lodash/lowerFirst';\nimport NodeUtil from 'node:util';\nimport type { IndexOptions, TableName } from '../abstract-dialect/query-interface.js';\nimport { BaseSqlExpression } from '../expression-builders/base-sql-expression.js';\n\n/* Inflection */\ntype Inflection = typeof _inflection;\n\nlet inflection: Inflection = _inflection;\n\nexport function useInflection(newInflection: Inflection) {\n  inflection = newInflection;\n}\n\n/* String utils */\n\nexport function camelize(str: string): string {\n  return lowerFirst(str.trim()).replaceAll(/[-_\\s]+(.)?/g, (match, c) => c.toUpperCase());\n}\n\nexport function underscoredIf(str: string, condition: boolean): string {\n  let result = str;\n\n  if (condition) {\n    result = underscore(str);\n  }\n\n  return result;\n}\n\nexport function underscore(str: string): string {\n  return inflection.underscore(str);\n}\n\nexport function spliceStr(str: string, index: number, count: number, add: string): string {\n  return str.slice(0, index) + add + str.slice(index + count);\n}\n\nexport function singularize(str: string): string {\n  return inflection.singularize(str);\n}\n\nexport function pluralize(str: string): string {\n  return inflection.pluralize(str);\n}\n\ntype NameIndexIndex = {\n  fields: Array<{ name: string; attribute: string }>;\n  name: string;\n};\n\n/**\n *\n * @param index\n * @param index.fields\n * @param index.name\n * @param tableName\n *\n * @private\n */\nexport function nameIndex(index: NameIndexIndex, tableName: TableName) {\n  if (Object.hasOwn(index, 'name')) {\n    return index;\n  }\n\n  index.name = generateIndexName(tableName, index);\n\n  return index;\n}\n\nexport function generateIndexName(tableName: TableName, index: IndexOptions): string {\n  if (typeof tableName !== 'string' && tableName.tableName) {\n    tableName = tableName.tableName;\n  }\n\n  if (!index.fields) {\n    throw new Error(`Index on table ${tableName} has not fields:\n${NodeUtil.inspect(index)}`);\n  }\n\n  const fields = index.fields.map(field => {\n    if (typeof field === 'string') {\n      return field;\n    }\n\n    if (field instanceof BaseSqlExpression) {\n      throw new Error(\n        `Index on table ${tableName} uses Sequelize's ${field.constructor.name} as one of its fields. You need to name this index manually.`,\n      );\n    }\n\n    if ('attribute' in field) {\n      throw new Error('Property \"attribute\" in IndexField has been renamed to \"name\"');\n    }\n\n    return field.name;\n  });\n\n  let out = `${tableName}_${fields.join('_')}`;\n\n  if (index.unique) {\n    out += '_unique';\n  }\n\n  return underscore(out);\n}\n\nexport function removeTrailingSemicolon(str: string): string {\n  if (!str.endsWith(';')) {\n    return str;\n  }\n\n  return str.slice(0, Math.max(0, str.length - 1));\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA6B;AAC7B,wBAAuB;AACvB,uBAAqB;AAErB,iCAAkC;AAKlC,IAAI,aAAyB;AAEtB,SAAS,cAAc,eAA2B;AACvD,eAAa;AACf;AAIO,SAAS,SAAS,KAAqB;AAC5C,aAAO,kBAAAA,SAAW,IAAI,KAAK,CAAC,EAAE,WAAW,gBAAgB,CAAC,OAAO,MAAM,EAAE,YAAY,CAAC;AACxF;AAEO,SAAS,cAAc,KAAa,WAA4B;AACrE,MAAI,SAAS;AAEb,MAAI,WAAW;AACb,aAAS,WAAW,GAAG;AAAA,EACzB;AAEA,SAAO;AACT;AAEO,SAAS,WAAW,KAAqB;AAC9C,SAAO,WAAW,WAAW,GAAG;AAClC;AAEO,SAAS,UAAU,KAAa,OAAe,OAAe,KAAqB;AACxF,SAAO,IAAI,MAAM,GAAG,KAAK,IAAI,MAAM,IAAI,MAAM,QAAQ,KAAK;AAC5D;AAEO,SAAS,YAAY,KAAqB;AAC/C,SAAO,WAAW,YAAY,GAAG;AACnC;AAEO,SAAS,UAAU,KAAqB;AAC7C,SAAO,WAAW,UAAU,GAAG;AACjC;AAgBO,SAAS,UAAU,OAAuB,WAAsB;AACrE,MAAI,OAAO,OAAO,OAAO,MAAM,GAAG;AAChC,WAAO;AAAA,EACT;AAEA,QAAM,OAAO,kBAAkB,WAAW,KAAK;AAE/C,SAAO;AACT;AAEO,SAAS,kBAAkB,WAAsB,OAA6B;AACnF,MAAI,OAAO,cAAc,YAAY,UAAU,WAAW;AACxD,gBAAY,UAAU;AAAA,EACxB;AAEA,MAAI,CAAC,MAAM,QAAQ;AACjB,UAAM,IAAI,MAAM,kBAAkB;AAAA,EACpC,iBAAAC,QAAS,QAAQ,KAAK,GAAG;AAAA,EACzB;AAEA,QAAM,SAAS,MAAM,OAAO,IAAI,WAAS;AACvC,QAAI,OAAO,UAAU,UAAU;AAC7B,aAAO;AAAA,IACT;AAEA,QAAI,iBAAiB,8CAAmB;AACtC,YAAM,IAAI;AAAA,QACR,kBAAkB,8BAA8B,MAAM,YAAY;AAAA,MACpE;AAAA,IACF;AAEA,QAAI,eAAe,OAAO;AACxB,YAAM,IAAI,MAAM,+DAA+D;AAAA,IACjF;AAEA,WAAO,MAAM;AAAA,EACf,CAAC;AAED,MAAI,MAAM,GAAG,aAAa,OAAO,KAAK,GAAG;AAEzC,MAAI,MAAM,QAAQ;AAChB,WAAO;AAAA,EACT;AAEA,SAAO,WAAW,GAAG;AACvB;AAEO,SAAS,wBAAwB,KAAqB;AAC3D,MAAI,CAAC,IAAI,SAAS,GAAG,GAAG;AACtB,WAAO;AAAA,EACT;AAEA,SAAO,IAAI,MAAM,GAAG,KAAK,IAAI,GAAG,IAAI,SAAS,CAAC,CAAC;AACjD;",
  "names": ["lowerFirst", "NodeUtil"]
}
