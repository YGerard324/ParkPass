{
  "version": 3,
  "sources": ["../../src/errors/validation-error.ts"],
  "sourcesContent": ["import type { Model } from '..';\nimport { BaseError } from './base-error';\n\n/**\n * An enum that is used internally by the `ValidationErrorItem` class\n * that maps current `type` strings (as given to ValidationErrorItem.constructor()) to\n * our new `origin` values.\n */\nexport enum ValidationErrorItemType {\n  'notNull violation' = 'CORE',\n  'unique violation' = 'DB',\n  'Validation error' = 'FUNCTION',\n}\n\n/**\n * An enum that defines valid ValidationErrorItem `origin` values\n */\nexport enum ValidationErrorItemOrigin {\n  /**\n   * specifies errors that originate from the sequelize \"core\"\n   */\n  CORE = 'CORE',\n\n  /**\n   * specifies validation errors that originate from the storage engine\n   */\n  DB = 'DB',\n\n  /**\n   * specifies validation errors that originate from validator functions (both built-in and custom) defined for a given attribute\n   */\n  FUNCTION = 'FUNCTION',\n\n  /**\n   * specifies validation errors that originate from {@link DataTypes.ABSTRACT#validate} constraint validation.\n   */\n  DATATYPE = 'DATATYPE',\n}\n\n/**\n * Validation Error Item\n * Instances of this class are included in the `ValidationError.errors` property.\n */\nexport class ValidationErrorItem extends Error {\n  /**\n   * @deprecated Will be removed in v7\n   */\n  static TypeStringMap = ValidationErrorItemType;\n\n  /**\n   * @deprecated Will be removed in v7\n   */\n  static Origins = ValidationErrorItemOrigin;\n\n  /**\n   * The type/origin of the validation error\n   */\n  readonly type: keyof typeof ValidationErrorItemType | null;\n\n  /**\n   * The field that triggered the validation error\n   */\n  path: string | null;\n\n  /**\n   * The value that generated the error\n   */\n  value: unknown;\n\n  readonly origin: keyof typeof ValidationErrorItemOrigin | null;\n\n  /**\n   * The DAO instance that caused the validation error\n   */\n  instance: Model | null;\n\n  /**\n   * A validation \"key\", used for identification\n   */\n  validatorKey: string | null;\n\n  /**\n   * Property name of the BUILT-IN validator function that caused the validation error (e.g. \"in\" or \"len\"), if applicable\n   */\n  validatorName: string | null;\n\n  /**\n   * Parameters used with the BUILT-IN validator function, if applicable\n   */\n  readonly validatorArgs: unknown[];\n\n  static throwDataTypeValidationError(message: string): never {\n    throw new ValidationErrorItem(message, 'Validation error', ValidationErrorItemOrigin.DATATYPE);\n  }\n\n  /**\n   * Creates a new ValidationError item. Instances of this class are included in the `ValidationError.errors` property.\n   *\n   * @param message An error message\n   * @param type The type/origin of the validation error\n   * @param path The field that triggered the validation error\n   * @param value The value that generated the error\n   * @param instance the DAO instance that caused the validation error\n   * @param validatorKey a validation \"key\", used for identification\n   * @param fnName property name of the BUILT-IN validator function that caused the validation error (e.g. \"in\" or \"len\"), if applicable\n   * @param fnArgs parameters used with the BUILT-IN validator function, if applicable\n   */\n  constructor(\n    message: string,\n    type: keyof typeof ValidationErrorItemType | keyof typeof ValidationErrorItemOrigin,\n    path?: string,\n    value?: string,\n    instance?: Model,\n    validatorKey?: string,\n    fnName?: string,\n    fnArgs?: unknown[],\n  ) {\n    super(message);\n\n    this.type = null;\n    this.path = path || null;\n\n    this.value = value ?? null;\n\n    this.origin = null;\n\n    this.instance = instance || null;\n\n    this.validatorKey = validatorKey || null;\n\n    this.validatorName = fnName || null;\n\n    this.validatorArgs = fnArgs || [];\n\n    if (type) {\n      if (this.isValidationErrorItemOrigin(type)) {\n        this.origin = type;\n      } else {\n        const realType = ValidationErrorItemType[type];\n\n        if (realType && ValidationErrorItemOrigin[realType]) {\n          this.origin = realType;\n          this.type = type;\n        }\n      }\n    }\n\n    // This doesn't need captureStackTrace because it's not a subclass of Error\n  }\n\n  private isValidationErrorItemOrigin(\n    origin: keyof typeof ValidationErrorItemOrigin | keyof typeof ValidationErrorItemType,\n  ): origin is keyof typeof ValidationErrorItemOrigin {\n    return (\n      ValidationErrorItemOrigin[origin as keyof typeof ValidationErrorItemOrigin] !== undefined\n    );\n  }\n\n  /**\n   * return a lowercase, trimmed string \"key\" that identifies the validator.\n   *\n   * Note: the string will be empty if the instance has neither a valid `validatorKey` property nor a valid `validatorName` property\n   *\n   * @param useTypeAsNS controls whether the returned value is \"namespace\",\n   *                    this parameter is ignored if the validator's `type` is not one of ValidationErrorItem.Origins\n   * @throws {Error}    thrown if NSSeparator is found to be invalid.\n   */\n  getValidatorKey(useTypeAsNS: false): string;\n\n  /**\n   * @param useTypeAsNS controls whether the returned value is \"namespace\",\n   *                    this parameter is ignored if the validator's `type` is not one of ValidationErrorItem.Origins\n   * @param NSSeparator a separator string for concatenating the namespace, must be not be empty,\n   *                    defaults to \".\" (fullstop). only used and validated if useTypeAsNS is TRUE.\n   */\n  getValidatorKey(useTypeAsNS?: true, NSSeparator?: string): string;\n  getValidatorKey(useTypeAsNS: boolean = true, NSSeparator: string = '.'): string {\n    const useTANS = useTypeAsNS === undefined || Boolean(useTypeAsNS);\n\n    const type = this.origin;\n    const key = this.validatorKey || this.validatorName;\n    const useNS = useTANS && type && ValidationErrorItemOrigin[type];\n\n    if (useNS && (typeof NSSeparator !== 'string' || NSSeparator.length === 0)) {\n      throw new Error('Invalid namespace separator given, must be a non-empty string');\n    }\n\n    if (!(typeof key === 'string' && key.length > 0)) {\n      return '';\n    }\n\n    return (useNS ? [this.origin, key].join(NSSeparator) : key).toLowerCase().trim();\n  }\n}\n\n/**\n * Validation Error. Thrown when the sequelize validation has failed. The error contains an `errors` property,\n * which is an array with 1 or more ValidationErrorItems, one for each validation that failed.\n *\n * @param message Error message\n * @param errors Array of ValidationErrorItem objects describing the validation errors\n */\nexport class ValidationError extends BaseError {\n  /** Array of ValidationErrorItem objects describing the validation errors */\n  readonly errors: ValidationErrorItem[];\n\n  constructor(message: string, errors: ValidationErrorItem[] = [], options: ErrorOptions = {}) {\n    super(message, options);\n\n    this.name = 'SequelizeValidationError';\n    this.errors = errors;\n\n    // Use provided error message if available...\n    if (message) {\n      this.message = message;\n\n      // ... otherwise create a concatenated message out of existing errors.\n    } else if (this.errors.length > 0 && this.errors[0].message) {\n      this.message = this.errors\n        .map((err: ValidationErrorItem) => `${err.type || err.origin}: ${err.message}`)\n        .join(',\\n');\n    }\n  }\n\n  /**\n   * Gets all validation error items for the path / field specified.\n   *\n   * @param path The path to be checked for error items\n   *\n   * @returns Validation error items for the specified path\n   */\n  get(path: string): ValidationErrorItem[] {\n    const out: ValidationErrorItem[] = [];\n\n    for (const error of this.errors) {\n      if (error.path === path) {\n        out.push(error);\n      }\n    }\n\n    return out;\n  }\n}\n"],
  "mappings": "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",
  "names": ["ValidationErrorItemType", "ValidationErrorItemOrigin"]
}
