{
  "version": 3,
  "sources": ["../src/data-types.ts"],
  "sourcesContent": ["/**\n * The classes declared in this files are the DataTypes available on the `DataTypes` namespace.\n * You can access them as follows:\n *\n * ```ts\n * import { DataTypes } from '@sequelize/core';\n *\n * DataTypes.STRING;\n * ```\n *\n * @module DataTypes\n */\n\nimport * as DataTypes from './abstract-dialect/data-types.js';\nimport { classToInvokable } from './utils/class-to-invokable.js';\n\nexport { AbstractDataType as ABSTRACT } from './abstract-dialect/data-types.js';\n\n/** This is a simple wrapper to make the DataType constructable without `new`. See the return type for all available options. */\nexport const STRING = classToInvokable(DataTypes.STRING);\n/** This is a simple wrapper to make the DataType constructable without `new`. See the return type for all available options. */\nexport const CHAR = classToInvokable(DataTypes.CHAR);\n/** This is a simple wrapper to make the DataType constructable without `new`. See the return type for all available options. */\nexport const TEXT = classToInvokable(DataTypes.TEXT);\n/** This is a simple wrapper to make the DataType constructable without `new`. See the return type for all available options. */\nexport const TINYINT = classToInvokable(DataTypes.TINYINT);\n/** This is a simple wrapper to make the DataType constructable without `new`. See the return type for all available options. */\nexport const SMALLINT = classToInvokable(DataTypes.SMALLINT);\n/** This is a simple wrapper to make the DataType constructable without `new`. See the return type for all available options. */\nexport const MEDIUMINT = classToInvokable(DataTypes.MEDIUMINT);\n/** This is a simple wrapper to make the DataType constructable without `new`. See the return type for all available options. */\nexport const INTEGER = classToInvokable(DataTypes.INTEGER);\n/** This is a simple wrapper to make the DataType constructable without `new`. See the return type for all available options. */\nexport const BIGINT = classToInvokable(DataTypes.BIGINT);\n/** This is a simple wrapper to make the DataType constructable without `new`. See the return type for all available options. */\nexport const FLOAT = classToInvokable(DataTypes.FLOAT);\n/** This is a simple wrapper to make the DataType constructable without `new`. See the return type for all available options. */\nexport const TIME = classToInvokable(DataTypes.TIME);\n/** This is a simple wrapper to make the DataType constructable without `new`. See the return type for all available options. */\nexport const DATE = classToInvokable(DataTypes.DATE);\n/** This is a simple wrapper to make the DataType constructable without `new`. See the return type for all available options. */\nexport const DATEONLY = classToInvokable(DataTypes.DATEONLY);\n/** This is a simple wrapper to make the DataType constructable without `new`. See the return type for all available options. */\nexport const BOOLEAN = classToInvokable(DataTypes.BOOLEAN);\n/** This is a simple wrapper to make the DataType constructable without `new`. See the return type for all available options. */\nexport const NOW = classToInvokable(DataTypes.NOW);\n/** This is a simple wrapper to make the DataType constructable without `new`. See the return type for all available options. */\nexport const BLOB = classToInvokable(DataTypes.BLOB);\n/** This is a simple wrapper to make the DataType constructable without `new`. See the return type for all available options. */\nexport const DECIMAL = classToInvokable(DataTypes.DECIMAL);\n/** This is a simple wrapper to make the DataType constructable without `new`. See the return type for all available options. */\nexport const UUID = classToInvokable(DataTypes.UUID);\n/** This is a simple wrapper to make the DataType constructable without `new`. See the return type for all available options. */\nexport const UUIDV1 = classToInvokable(DataTypes.UUIDV1);\n/** This is a simple wrapper to make the DataType constructable without `new`. See the return type for all available options. */\nexport const UUIDV4 = classToInvokable(DataTypes.UUIDV4);\n/** This is a simple wrapper to make the DataType constructable without `new`. See the return type for all available options. */\nexport const HSTORE = classToInvokable(DataTypes.HSTORE);\n/** This is a simple wrapper to make the DataType constructable without `new`. See the return type for all available options. */\nexport const JSON = classToInvokable(DataTypes.JSON);\n/** This is a simple wrapper to make the DataType constructable without `new`. See the return type for all available options. */\nexport const JSONB = classToInvokable(DataTypes.JSONB);\n/** This is a simple wrapper to make the DataType constructable without `new`. See the return type for all available options. */\nexport const VIRTUAL = classToInvokable(DataTypes.VIRTUAL);\n/** This is a simple wrapper to make the DataType constructable without `new`. See the return type for all available options. */\nexport const ARRAY = classToInvokable(DataTypes.ARRAY);\n/** This is a simple wrapper to make the DataType constructable without `new`. See the return type for all available options. */\nexport const ENUM = classToInvokable(DataTypes.ENUM);\n/** This is a simple wrapper to make the DataType constructable without `new`. See the return type for all available options. */\nexport const RANGE = classToInvokable(DataTypes.RANGE);\n/** This is a simple wrapper to make the DataType constructable without `new`. See the return type for all available options. */\nexport const REAL = classToInvokable(DataTypes.REAL);\n/** This is a simple wrapper to make the DataType constructable without `new`. See the return type for all available options. */\nexport const DOUBLE = classToInvokable(DataTypes.DOUBLE);\n/** This is a simple wrapper to make the DataType constructable without `new`. See the return type for all available options. */\nexport const GEOMETRY = classToInvokable(DataTypes.GEOMETRY);\n/** This is a simple wrapper to make the DataType constructable without `new`. See the return type for all available options. */\nexport const GEOGRAPHY = classToInvokable(DataTypes.GEOGRAPHY);\n/** This is a simple wrapper to make the DataType constructable without `new`. See the return type for all available options. */\nexport const CIDR = classToInvokable(DataTypes.CIDR);\n/** This is a simple wrapper to make the DataType constructable without `new`. See the return type for all available options. */\nexport const INET = classToInvokable(DataTypes.INET);\n/** This is a simple wrapper to make the DataType constructable without `new`. See the return type for all available options. */\nexport const MACADDR = classToInvokable(DataTypes.MACADDR);\n/** This is a simple wrapper to make the DataType constructable without `new`. See the return type for all available options. */\nexport const MACADDR8 = classToInvokable(DataTypes.MACADDR8);\n/** This is a simple wrapper to make the DataType constructable without `new`. See the return type for all available options. */\nexport const CITEXT = classToInvokable(DataTypes.CITEXT);\n/** This is a simple wrapper to make the DataType constructable without `new`. See the return type for all available options. */\nexport const TSVECTOR = classToInvokable(DataTypes.TSVECTOR);\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA,gBAA2B;AAC3B,gCAAiC;AAEjC,wBAA6C;AAGtC,MAAM,aAAS,4CAAiB,UAAU,MAAM;AAEhD,MAAM,WAAO,4CAAiB,UAAU,IAAI;AAE5C,MAAM,WAAO,4CAAiB,UAAU,IAAI;AAE5C,MAAM,cAAU,4CAAiB,UAAU,OAAO;AAElD,MAAM,eAAW,4CAAiB,UAAU,QAAQ;AAEpD,MAAM,gBAAY,4CAAiB,UAAU,SAAS;AAEtD,MAAM,cAAU,4CAAiB,UAAU,OAAO;AAElD,MAAM,aAAS,4CAAiB,UAAU,MAAM;AAEhD,MAAM,YAAQ,4CAAiB,UAAU,KAAK;AAE9C,MAAM,WAAO,4CAAiB,UAAU,IAAI;AAE5C,MAAM,WAAO,4CAAiB,UAAU,IAAI;AAE5C,MAAM,eAAW,4CAAiB,UAAU,QAAQ;AAEpD,MAAM,cAAU,4CAAiB,UAAU,OAAO;AAElD,MAAM,UAAM,4CAAiB,UAAU,GAAG;AAE1C,MAAM,WAAO,4CAAiB,UAAU,IAAI;AAE5C,MAAM,cAAU,4CAAiB,UAAU,OAAO;AAElD,MAAM,WAAO,4CAAiB,UAAU,IAAI;AAE5C,MAAM,aAAS,4CAAiB,UAAU,MAAM;AAEhD,MAAM,aAAS,4CAAiB,UAAU,MAAM;AAEhD,MAAM,aAAS,4CAAiB,UAAU,MAAM;AAEhD,MAAM,WAAO,4CAAiB,UAAU,IAAI;AAE5C,MAAM,YAAQ,4CAAiB,UAAU,KAAK;AAE9C,MAAM,cAAU,4CAAiB,UAAU,OAAO;AAElD,MAAM,YAAQ,4CAAiB,UAAU,KAAK;AAE9C,MAAM,WAAO,4CAAiB,UAAU,IAAI;AAE5C,MAAM,YAAQ,4CAAiB,UAAU,KAAK;AAE9C,MAAM,WAAO,4CAAiB,UAAU,IAAI;AAE5C,MAAM,aAAS,4CAAiB,UAAU,MAAM;AAEhD,MAAM,eAAW,4CAAiB,UAAU,QAAQ;AAEpD,MAAM,gBAAY,4CAAiB,UAAU,SAAS;AAEtD,MAAM,WAAO,4CAAiB,UAAU,IAAI;AAE5C,MAAM,WAAO,4CAAiB,UAAU,IAAI;AAE5C,MAAM,cAAU,4CAAiB,UAAU,OAAO;AAElD,MAAM,eAAW,4CAAiB,UAAU,QAAQ;AAEpD,MAAM,aAAS,4CAAiB,UAAU,MAAM;AAEhD,MAAM,eAAW,4CAAiB,UAAU,QAAQ;",
  "names": []
}
