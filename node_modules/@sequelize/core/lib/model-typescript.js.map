{
  "version": 3,
  "sources": ["../src/model-typescript.ts"],
  "sourcesContent": ["import type { PartialBy } from '@sequelize/utils';\nimport type {\n  AbstractQueryGenerator,\n  AbstractQueryInterface,\n  Association,\n  AttributeOptions,\n  Attributes,\n  BrandedKeysOf,\n  BuiltModelOptions,\n  ForeignKeyBrand,\n  IndexOptions,\n  InitOptions,\n  ModelAttributes,\n  ModelStatic,\n  NormalizedAttributeOptions,\n  Sequelize,\n  TableNameWithSchema,\n} from '.';\nimport { isDecoratedModel } from './decorators/shared/model.js';\nimport {\n  legacyBuildAddAnyHook,\n  legacyBuildAddHook,\n  legacyBuildHasHook,\n  legacyBuildRemoveHook,\n  legacyBuildRunHook,\n} from './hooks-legacy.js';\nimport {\n  ModelDefinition,\n  getModelDefinition,\n  hasModelDefinition,\n  registerModelDefinition,\n} from './model-definition.js';\nimport { staticModelHooks } from './model-hooks.js';\nimport type { ModelRepository } from './model-repository.js';\nimport { getModelRepository } from './model-repository.js';\nimport type { DestroyOptions, Model } from './model.js';\nimport { noModelTableName } from './utils/deprecations.js';\nimport { getObjectFromMap } from './utils/object.js';\n\n// DO NOT MAKE THIS CLASS PUBLIC!\n/**\n * This is a temporary class used to progressively migrate the Model class to TypeScript by slowly moving its functions here.\n * Always use {@link Model} instead.\n */\nexport class ModelTypeScript {\n  static get queryInterface(): AbstractQueryInterface {\n    return this.sequelize.queryInterface;\n  }\n\n  static get queryGenerator(): AbstractQueryGenerator {\n    return this.sequelize.queryGenerator;\n  }\n\n  /**\n   * A reference to the sequelize instance.\n   */\n  get sequelize(): Sequelize {\n    return (this.constructor as typeof ModelTypeScript).sequelize;\n  }\n\n  /**\n   * A reference to the sequelize instance.\n   *\n   * Accessing this property throws if the model has not been registered with a Sequelize instance yet.\n   */\n  static get sequelize(): Sequelize {\n    return this.modelDefinition.sequelize;\n  }\n\n  /**\n   * Returns the model definition of this model.\n   * The model definition contains all metadata about this model.\n   */\n  static get modelDefinition(): ModelDefinition {\n    // @ts-expect-error -- getModelDefinition expects ModelStatic\n    return getModelDefinition(this);\n  }\n\n  get modelDefinition(): ModelDefinition {\n    return (this.constructor as ModelStatic).modelDefinition;\n  }\n\n  static get modelRepository(): ModelRepository {\n    return getModelRepository(this.modelDefinition);\n  }\n\n  get modelRepository(): ModelRepository {\n    return (this.constructor as ModelStatic).modelRepository;\n  }\n\n  /**\n   * An object hash from alias to the association object\n   */\n  static get associations(): { [associationName: string]: Association } {\n    return this.modelDefinition.associations;\n  }\n\n  /**\n   * The name of the primary key attribute (on the JS side).\n   *\n   * @deprecated This property doesn't work for composed primary keys. Use {@link primaryKeyAttributes} instead.\n   */\n  static get primaryKeyAttribute(): string | null {\n    return this.primaryKeyAttributes[0] ?? null;\n  }\n\n  /**\n   * The name of the primary key attributes (on the JS side).\n   *\n   * @deprecated use {@link modelDefinition}.\n   */\n  static get primaryKeyAttributes(): string[] {\n    return [...this.modelDefinition.primaryKeysAttributeNames];\n  }\n\n  /**\n   * The column name of the primary key.\n   *\n   * @deprecated don't use this. It doesn't work with composite PKs. It may be removed in the future to reduce duplication.\n   *  Use the. Use {@link Model.primaryKeys} instead.\n   */\n  static get primaryKeyField(): string | null {\n    const primaryKeyAttribute = this.primaryKeyAttribute;\n    if (!primaryKeyAttribute) {\n      return null;\n    }\n\n    return this.modelDefinition.getColumnName(primaryKeyAttribute);\n  }\n\n  /**\n   * Like {@link Model.rawAttributes}, but only includes attributes that are part of the Primary Key.\n   */\n  static get primaryKeys(): { [attribute: string]: NormalizedAttributeOptions } {\n    const out = Object.create(null);\n\n    const definition = this.modelDefinition;\n\n    for (const primaryKey of definition.primaryKeysAttributeNames) {\n      out[primaryKey] = definition.attributes.get(primaryKey)!;\n    }\n\n    return out;\n  }\n\n  /**\n   * The options that the model was initialized with\n   */\n  static get options(): BuiltModelOptions {\n    return this.modelDefinition.options;\n  }\n\n  /**\n   * The name of the database table\n   *\n   * @deprecated use {@link modelDefinition} or {@link table}.\n   */\n  static get tableName(): string {\n    noModelTableName();\n\n    return this.modelDefinition.table.tableName;\n  }\n\n  static get table(): TableNameWithSchema {\n    return this.modelDefinition.table;\n  }\n\n  /**\n   * @deprecated use {@link modelDefinition}'s {@link ModelDefinition#rawAttributes} or {@link ModelDefinition#attributes} instead.\n   */\n  static get rawAttributes(): { [attribute: string]: AttributeOptions } {\n    throw new Error(`${this.name}.rawAttributes has been removed, as it has been split in two:\n- If you only need to read the final attributes, use ${this.name}.modelDefinition.attributes\n- If you need to modify the attributes, mutate ${this.name}.modelDefinition.rawAttributes, then call ${this.name}.modelDefinition.refreshAttributes()`);\n  }\n\n  /**\n   * @deprecated use {@link modelDefinition}'s {@link ModelDefinition#rawAttributes} or {@link ModelDefinition#attributes} instead.\n   */\n  get rawAttributes(): { [attribute: string]: AttributeOptions } {\n    return (this.constructor as typeof ModelTypeScript).rawAttributes;\n  }\n\n  /**\n   * @deprecated use {@link modelDefinition}'s {@link ModelDefinition#columns}.\n   */\n  static get fieldRawAttributesMap(): { [columnName: string]: NormalizedAttributeOptions } {\n    return getObjectFromMap(this.modelDefinition.columns);\n  }\n\n  /**\n   * @deprecated use {@link modelDefinition}'s {@link ModelDefinition#physicalAttributes}.\n   */\n  static get tableAttributes(): { [attribute: string]: NormalizedAttributeOptions } {\n    return getObjectFromMap(this.modelDefinition.physicalAttributes);\n  }\n\n  /**\n   * A mapping of column name to attribute name\n   *\n   * @private\n   */\n  static get fieldAttributeMap(): { [columnName: string]: string } {\n    const out = Object.create(null);\n\n    const attributes = this.modelDefinition.attributes;\n    for (const attribute of attributes.values()) {\n      out[attribute.columnName] = attribute.attributeName;\n    }\n\n    return out;\n  }\n\n  static get hooks() {\n    return this.modelDefinition.hooks;\n  }\n\n  static addHook = legacyBuildAddAnyHook(staticModelHooks);\n  static hasHook = legacyBuildHasHook(staticModelHooks);\n  static hasHooks = legacyBuildHasHook(staticModelHooks);\n  static removeHook = legacyBuildRemoveHook(staticModelHooks);\n  static runHooks = legacyBuildRunHook(staticModelHooks);\n\n  static beforeValidate = legacyBuildAddHook(staticModelHooks, 'beforeValidate');\n  static afterValidate = legacyBuildAddHook(staticModelHooks, 'afterValidate');\n  static validationFailed = legacyBuildAddHook(staticModelHooks, 'validationFailed');\n\n  static beforeCreate = legacyBuildAddHook(staticModelHooks, 'beforeCreate');\n  static afterCreate = legacyBuildAddHook(staticModelHooks, 'afterCreate');\n\n  static beforeDestroy = legacyBuildAddHook(staticModelHooks, 'beforeDestroy');\n  static afterDestroy = legacyBuildAddHook(staticModelHooks, 'afterDestroy');\n\n  static beforeRestore = legacyBuildAddHook(staticModelHooks, 'beforeRestore');\n  static afterRestore = legacyBuildAddHook(staticModelHooks, 'afterRestore');\n\n  static beforeUpdate = legacyBuildAddHook(staticModelHooks, 'beforeUpdate');\n  static afterUpdate = legacyBuildAddHook(staticModelHooks, 'afterUpdate');\n\n  static beforeUpsert = legacyBuildAddHook(staticModelHooks, 'beforeUpsert');\n  static afterUpsert = legacyBuildAddHook(staticModelHooks, 'afterUpsert');\n\n  static beforeSave = legacyBuildAddHook(staticModelHooks, 'beforeSave');\n  static afterSave = legacyBuildAddHook(staticModelHooks, 'afterSave');\n\n  static beforeBulkCreate = legacyBuildAddHook(staticModelHooks, 'beforeBulkCreate');\n  static afterBulkCreate = legacyBuildAddHook(staticModelHooks, 'afterBulkCreate');\n\n  static beforeBulkDestroy = legacyBuildAddHook(staticModelHooks, 'beforeBulkDestroy');\n  static afterBulkDestroy = legacyBuildAddHook(staticModelHooks, 'afterBulkDestroy');\n\n  static beforeBulkRestore = legacyBuildAddHook(staticModelHooks, 'beforeBulkRestore');\n  static afterBulkRestore = legacyBuildAddHook(staticModelHooks, 'afterBulkRestore');\n\n  static beforeBulkUpdate = legacyBuildAddHook(staticModelHooks, 'beforeBulkUpdate');\n  static afterBulkUpdate = legacyBuildAddHook(staticModelHooks, 'afterBulkUpdate');\n\n  static beforeCount = legacyBuildAddHook(staticModelHooks, 'beforeCount');\n\n  static beforeFind = legacyBuildAddHook(staticModelHooks, 'beforeFind');\n  static beforeFindAfterExpandIncludeAll = legacyBuildAddHook(\n    staticModelHooks,\n    'beforeFindAfterExpandIncludeAll',\n  );\n\n  static beforeFindAfterOptions = legacyBuildAddHook(staticModelHooks, 'beforeFindAfterOptions');\n  static afterFind = legacyBuildAddHook(staticModelHooks, 'afterFind');\n\n  static beforeSync = legacyBuildAddHook(staticModelHooks, 'beforeSync');\n  static afterSync = legacyBuildAddHook(staticModelHooks, 'afterSync');\n\n  static beforeAssociate = legacyBuildAddHook(staticModelHooks, 'beforeAssociate');\n  static afterAssociate = legacyBuildAddHook(staticModelHooks, 'afterAssociate');\n\n  /**\n   * Initialize a model, representing a table in the DB, with attributes and options.\n   *\n   * The table columns are defined by the hash that is given as the first argument.\n   * Each attribute of the hash represents a column.\n   *\n   * @example\n   * ```javascript\n   * Project.init({\n   *   columnA: {\n   *     type: DataTypes.BOOLEAN,\n   *     validate: {\n   *       is: ['[a-z]','i'],        // will only allow letters\n   *       max: 23,                  // only allow values <= 23\n   *       isIn: {\n   *         args: [['en', 'zh']],\n   *         msg: \"Must be English or Chinese\"\n   *       }\n   *     },\n   *     field: 'column_a'\n   *     // Other attributes here\n   *   },\n   *   columnB: DataTypes.STRING,\n   *   columnC: 'MY VERY OWN COLUMN TYPE'\n   * }, {sequelize})\n   * ```\n   *\n   * sequelize.models.modelName // The model will now be available in models under the class name\n   *\n   * @see https://sequelize.org/docs/v7/core-concepts/model-basics/\n   * @see https://sequelize.org/docs/v7/core-concepts/validations-and-constraints/\n   *\n   * @param attributes An object, where each attribute is a column of the table. Each column can be either a\n   *   DataType, a string or a type-description object.\n   * @param options These options are merged with the default define options provided to the Sequelize constructor\n   */\n  static init<M extends Model, MS extends ModelStatic<M>>(\n    this: MS,\n    attributes: ModelAttributes<\n      M,\n      // 'foreign keys' are optional in Model.init as they are added by association declaration methods\n      PartialBy<Attributes<M>, BrandedKeysOf<Attributes<M>, typeof ForeignKeyBrand>>\n    >,\n    options: InitOptions<M>,\n  ): MS {\n    if (isDecoratedModel(this)) {\n      throw new Error(\n        `Model.init cannot be used if the model uses one of Sequelize's decorators. You must pass your model to the Sequelize constructor using the \"models\" option instead.`,\n      );\n    }\n\n    if (!options.sequelize) {\n      throw new Error(\n        'Model.init expects a Sequelize instance to be passed through the option bag, which is the second parameter.',\n      );\n    }\n\n    initModel(this, attributes, options);\n\n    return this;\n  }\n\n  static getIndexes(): readonly IndexOptions[] {\n    return this.modelDefinition.getIndexes();\n  }\n\n  /**\n   * Unique indexes that can be declared as part of a CREATE TABLE query.\n   *\n   * @deprecated prefer using {@link getIndexes}, this will eventually be removed.\n   */\n  static get uniqueKeys() {\n    const indexes = this.getIndexes();\n    const uniqueKeys = Object.create(null);\n\n    // TODO: \"column\" should be removed from index definitions\n    const supportedOptions = ['unique', 'fields', 'column', 'name'];\n\n    for (const index of indexes) {\n      if (!index.unique) {\n        continue;\n      }\n\n      if (!index.name) {\n        continue;\n      }\n\n      if (!index.fields) {\n        continue;\n      }\n\n      if (!index.fields.every(field => typeof field === 'string')) {\n        continue;\n      }\n\n      if (!Object.keys(index).every(optionName => supportedOptions.includes(optionName))) {\n        continue;\n      }\n\n      uniqueKeys[index.name] = index;\n    }\n\n    return uniqueKeys;\n  }\n\n  // TODO [>7]: Remove this\n  private static get _indexes(): never {\n    throw new Error('Model._indexes has been replaced with Model.getIndexes()');\n  }\n\n  /**\n   * Refreshes the Model's attribute definition.\n   *\n   * @deprecated use {@link modelDefinition}.\n   */\n  static refreshAttributes(): void {\n    this.modelDefinition.refreshAttributes();\n  }\n\n  static assertIsInitialized(): void {\n    if (!this.isInitialized()) {\n      throw new Error(\n        `Model \"${this.name}\" has not been initialized yet. You can check whether a model has been initialized by calling its isInitialized method.`,\n      );\n    }\n  }\n\n  static isInitialized(): boolean {\n    // @ts-expect-error -- getModelDefinition expects ModelStatic\n    return hasModelDefinition(this);\n  }\n\n  /**\n   * Get the table name of the model, taking schema into account. The method will an object with `tableName`, `schema` and `delimiter` properties.\n   *\n   * @deprecated use {@link modelDefinition} or {@link table}.\n   */\n  static getTableName(): TableNameWithSchema {\n    noModelTableName();\n\n    const queryGenerator = this.sequelize.queryGenerator;\n\n    return {\n      ...this.table,\n      /**\n       * @deprecated This should not be relied upon!\n       */\n      // @ts-expect-error -- This toString is a hacky property that must be removed\n      toString() {\n        return queryGenerator.quoteTable(this);\n      },\n    };\n  }\n\n  /**\n   * Works like the {@link Model#destroy} instance method, but is capable of deleting multiple instances in one query.\n   * Unlike {@link Model.destroy}, this method takes instances, not a `where` option.\n   *\n   * @param instances The instances to delete.\n   * @param options Options.\n   */\n  static async _UNSTABLE_destroyMany<M extends Model>(\n    this: ModelStatic<M>,\n    instances: M | M[],\n    options?: DestroyOptions<Attributes<M>>,\n  ): Promise<number> {\n    return this.modelRepository._UNSTABLE_destroy(instances, options);\n  }\n}\n\nexport function initModel<M extends Model>(\n  model: ModelStatic<M>,\n  attributes: ModelAttributes<M>,\n  options: InitOptions<M>,\n): void {\n  options.modelName ||= model.name;\n\n  const modelDefinition = new ModelDefinition(attributes, options, model);\n\n  Object.defineProperty(model, 'name', { value: modelDefinition.modelName });\n\n  registerModelDefinition(model, modelDefinition);\n\n  // @ts-expect-error -- TODO: type\n  model._scope = model.options.defaultScope;\n  // @ts-expect-error -- TODO: type\n  model._scopeNames = ['defaultScope'];\n\n  model.sequelize.hooks.runSync('afterDefine', model);\n\n  addAttributeGetterAndSetters(model);\n  model.hooks.addListener('afterDefinitionRefresh', () => {\n    addAttributeGetterAndSetters(model);\n  });\n}\n\nfunction addAttributeGetterAndSetters(model: ModelStatic) {\n  const modelDefinition = model.modelDefinition;\n\n  // TODO: temporary workaround due to cyclic import. Should not be necessary once Model is fully migrated to TypeScript.\n  const { Model: TmpModel } = require('./model.js');\n\n  // add attributes to the DAO prototype\n  for (const attribute of modelDefinition.attributes.values()) {\n    const attributeName = attribute.attributeName;\n\n    if (attributeName in TmpModel.prototype) {\n      model.sequelize.log(\n        `Attribute ${attributeName} in model ${model.name} is shadowing a built-in property of the Model prototype. This is not recommended. Consider renaming your attribute.`,\n      );\n\n      continue;\n    }\n\n    const attributeProperty: PropertyDescriptor = {\n      configurable: true,\n      get(this: Model) {\n        return this.get(attributeName);\n      },\n      set(this: Model, value: unknown) {\n        return this.set(attributeName, value);\n      },\n    };\n\n    Object.defineProperty(model.prototype, attributeName, attributeProperty);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
