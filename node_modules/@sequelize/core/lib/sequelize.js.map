{
  "version": 3,
  "sources": ["../src/sequelize.js"],
  "sourcesContent": ["'use strict';\n\nimport { EMPTY_OBJECT, shallowClonePojo } from '@sequelize/utils';\nimport defaults from 'lodash/defaults';\nimport isPlainObject from 'lodash/isPlainObject';\nimport map from 'lodash/map';\nimport retry from 'retry-as-promised';\nimport { AbstractConnectionManager } from './abstract-dialect/connection-manager.js';\nimport { AbstractDialect } from './abstract-dialect/dialect.js';\nimport { AbstractQueryGenerator } from './abstract-dialect/query-generator.js';\nimport { AbstractQueryInterface } from './abstract-dialect/query-interface';\nimport { AbstractQuery } from './abstract-dialect/query.js';\nimport { Association } from './associations/base.js';\nimport { BelongsToAssociation } from './associations/belongs-to';\nimport { BelongsToManyAssociation } from './associations/belongs-to-many';\nimport { HasManyAssociation } from './associations/has-many';\nimport { HasOneAssociation } from './associations/has-one';\nimport * as DataTypes from './data-types';\nimport { ConstraintChecking, Deferrable } from './deferrable';\nimport * as SequelizeErrors from './errors';\nimport { AssociationPath } from './expression-builders/association-path';\nimport { Attribute } from './expression-builders/attribute';\nimport { BaseSqlExpression } from './expression-builders/base-sql-expression.js';\nimport { Cast, cast } from './expression-builders/cast.js';\nimport { Col, col } from './expression-builders/col.js';\nimport { Fn, fn } from './expression-builders/fn.js';\nimport { Identifier } from './expression-builders/identifier';\nimport { JsonPath } from './expression-builders/json-path';\nimport { JSON_NULL, SQL_NULL } from './expression-builders/json-sql-null.js';\nimport { json } from './expression-builders/json.js';\nimport { List } from './expression-builders/list';\nimport { Literal, literal } from './expression-builders/literal.js';\nimport { sql } from './expression-builders/sql';\nimport { Value } from './expression-builders/value';\nimport { Where, where } from './expression-builders/where.js';\nimport { importModels } from './import-models.js';\nimport { IndexHints } from './index-hints';\nimport { Model } from './model';\nimport { setTransactionFromCls } from './model-internals.js';\nimport { ManualOnDelete } from './model-repository.types.js';\nimport { Op } from './operators';\nimport { QueryTypes } from './query-types';\nimport { SequelizeTypeScript } from './sequelize-typescript';\nimport { TableHints } from './table-hints';\nimport {\n  COMPLETES_TRANSACTION,\n  IsolationLevel,\n  Lock,\n  Transaction,\n  TransactionNestMode,\n  TransactionType,\n} from './transaction.js';\nimport * as Deprecations from './utils/deprecations';\nimport {\n  noGetDialect,\n  noGetQueryInterface,\n  noSequelizeDataType,\n  noSequelizeIsDefined,\n  noSequelizeModel,\n} from './utils/deprecations';\nimport { isModelStatic, isSameInitialModel } from './utils/model-utils';\nimport { injectReplacements, mapBindParameters } from './utils/sql';\nimport { withSqliteForeignKeysOff } from './utils/sql.js';\nimport { useInflection } from './utils/string';\nimport { validator as Validator } from './utils/validator-extras';\n\n/**\n * This is the main class, the entry point to sequelize.\n */\nexport class Sequelize extends SequelizeTypeScript {\n  /**\n   * Returns the specified dialect.\n   *\n   * @returns {string} The specified dialect.\n   */\n  getDialect() {\n    noGetDialect();\n\n    return this.dialect.name;\n  }\n\n  /**\n   * Returns the database name.\n   *\n   * @returns {string} The database name.\n   */\n  getDatabaseName() {\n    throw new Error(\n      'getDatabaseName has been removed as it does not make sense in every dialect. Please use the values available in sequelize.options.replication.write for an equivalent option.',\n    );\n  }\n\n  /**\n   * Returns an instance of AbstractQueryInterface.\n   *\n   * @returns {AbstractQueryInterface} An instance (singleton) of AbstractQueryInterface.\n   */\n  getQueryInterface() {\n    noGetQueryInterface();\n\n    return this.queryInterface;\n  }\n\n  /**\n   * Define a new model, representing a table in the database.\n   *\n   * The table columns are defined by the object that is given as the second argument. Each key of the object represents a column\n   *\n   * @param {string} modelName The name of the model. The model will be stored in `sequelize.models` under this name\n   * @param {object} attributes An object, where each attribute is a column of the table. See {@link Model.init}\n   * @param {object} [options] These options are merged with the default define options provided to the Sequelize constructor and passed to Model.init()\n   *\n   * @see\n   * {@link Model.init} for a more comprehensive specification of the `options` and `attributes` objects.\n   * @see\n   * <a href=\"/master/manual/model-basics.html\">Model Basics</a> guide\n   *\n   * @returns {Model} Newly defined model\n   *\n   * @example\n   * sequelize.define('modelName', {\n   *   columnA: {\n   *       type: DataTypes.BOOLEAN,\n   *       validate: {\n   *         is: [\"[a-z]\",'i'],        // will only allow letters\n   *         max: 23,                  // only allow values <= 23\n   *         isIn: {\n   *           args: [['en', 'zh']],\n   *           msg: \"Must be English or Chinese\"\n   *         }\n   *       },\n   *       field: 'column_a'\n   *   },\n   *   columnB: DataTypes.STRING,\n   *   columnC: 'MY VERY OWN COLUMN TYPE'\n   * });\n   *\n   * sequelize.models.modelName // The model will now be available in models under the name given to define\n   */\n  define(modelName, attributes = EMPTY_OBJECT, options = EMPTY_OBJECT) {\n    options = shallowClonePojo(options);\n\n    options.modelName = modelName;\n    options.sequelize = this;\n\n    const model = class extends Model {};\n\n    model.init(attributes, options);\n\n    return model;\n  }\n\n  /**\n   * Fetch a Model which is already defined\n   *\n   * @param {string} modelName The name of a model defined with Sequelize.define\n   *\n   * @throws Will throw an error if the model is not defined (that is, if sequelize#isDefined returns false)\n   * @returns {Model} Specified model\n   */\n  model(modelName) {\n    noSequelizeModel();\n\n    return this.models.getOrThrow(modelName);\n  }\n\n  /**\n   * Checks whether a model with the given name is defined\n   *\n   * @param {string} modelName The name of a model defined with Sequelize.define\n   *\n   * @returns {boolean} Returns true if model is already defined, otherwise false\n   */\n  isDefined(modelName) {\n    noSequelizeIsDefined();\n\n    return this.models.hasByName(modelName);\n  }\n\n  /**\n   * Execute a query on the DB, optionally bypassing all the Sequelize goodness.\n   *\n   * By default, the function will return two arguments: an array of results, and a metadata object, containing number of affected rows etc.\n   *\n   * If you are running a type of query where you don't need the metadata, for example a `SELECT` query, you can pass in a query type to make sequelize format the results:\n   *\n   * ```js\n   * const [results, metadata] = await sequelize.query('SELECT...'); // Raw query - use array destructuring\n   *\n   * const results = await sequelize.query('SELECT...', { type: sequelize.QueryTypes.SELECT }); // SELECT query - no destructuring\n   * ```\n   *\n   * @param {string}          sql\n   * @param {object}          [options={}] Query options.\n   * @param {boolean}         [options.raw] If true, sequelize will not try to format the results of the query, or build an instance of a model from the result\n   * @param {Transaction}     [options.transaction=null] The transaction that the query should be executed under\n   * @param {QueryTypes}      [options.type='RAW'] The type of query you are executing. The query type affects how results are formatted before they are passed back. The type is a string, but `Sequelize.QueryTypes` is provided as convenience shortcuts.\n   * @param {boolean}         [options.nest=false] If true, transforms objects with `.` separated property names into nested objects using [dottie.js](https://github.com/mickhansen/dottie.js). For example { 'user.username': 'john' } becomes { user: { username: 'john' }}. When `nest` is true, the query type is assumed to be `'SELECT'`, unless otherwise specified\n   * @param {boolean}         [options.plain=false] Sets the query type to `SELECT` and return a single row\n   * @param {object|Array}    [options.replacements] Either an object of named parameter replacements in the format `:param` or an array of unnamed replacements to replace `?` in your SQL.\n   * @param {object|Array}    [options.bind] Either an object of named bind parameter in the format `_param` or an array of unnamed bind parameter to replace `$1, $2, ...` in your SQL.\n   * @param {boolean}         [options.useMaster=false] Force the query to use the write pool, regardless of the query type.\n   * @param {Function}        [options.logging=false] A function that gets executed while running the query to log the sql.\n   * @param {Model}           [options.instance] A sequelize model instance whose Model is to be used to build the query result\n   * @param {ModelStatic<Model>}    [options.model] A sequelize model used to build the returned model instances\n   * @param {object}          [options.retry] Set of flags that control when a query is automatically retried. Accepts all options for [`retry-as-promised`](https://github.com/mickhansen/retry-as-promised).\n   * @param {Array}           [options.retry.match] Only retry a query if the error matches one of these strings.\n   * @param {Integer}         [options.retry.max] How many times a failing query is automatically retried.\n   * @param {number}          [options.retry.timeout] Maximum duration, in milliseconds, to retry until an error is thrown.\n   * @param {number}          [options.retry.backoffBase=100] Initial backoff duration, in milliseconds.\n   * @param {number}          [options.retry.backoffExponent=1.1] Exponent to increase backoff duration after each retry.\n   * @param {Function}        [options.retry.report] Function that is executed after each retry, called with a message and the current retry options.\n   * @param {string}          [options.retry.name='unknown'] Name used when composing error/reporting messages.\n   * @param {string}          [options.searchPath=DEFAULT] An optional parameter to specify the schema search_path (Postgres only)\n   * @param {boolean}         [options.supportsSearchPath] If false do not prepend the query with the search_path (Postgres only)\n   * @param {boolean}         [options.mapToModel=false] Map returned fields to model's fields if `options.model` or `options.instance` is present. Mapping will occur before building the model instance.\n   * @param {object}          [options.fieldMap] Map returned fields to arbitrary names for `SELECT` query type.\n   * @param {boolean}         [options.rawErrors=false] Set to `true` to cause errors coming from the underlying connection/database library to be propagated unmodified and unformatted. Else, the default behavior (=false) is to reinterpret errors as sequelize.errors.BaseError objects.\n   *\n   * @returns {Promise}\n   *\n   * @see {@link Model.build} for more information about instance option.\n   */\n  async query(sql, options) {\n    options = { ...this.options.query, ...options };\n\n    if (sql instanceof BaseSqlExpression) {\n      sql = this.queryGenerator.formatSqlExpression(sql, options);\n    }\n\n    if (typeof sql === 'object') {\n      throw new TypeError(\n        '\"sql\" cannot be an object. Pass a string instead, and pass bind and replacement parameters through the \"options\" parameter',\n      );\n    }\n\n    sql = sql.trim();\n\n    if (options.replacements) {\n      sql = injectReplacements(sql, this.dialect, options.replacements);\n    }\n\n    // queryRaw will throw if 'replacements' is specified, as a way to warn users that they are miusing the method.\n    delete options.replacements;\n\n    return this.queryRaw(sql, options);\n  }\n\n  async queryRaw(sql, options) {\n    if (typeof sql !== 'string') {\n      throw new TypeError('Sequelize#rawQuery requires a string as the first parameter.');\n    }\n\n    if (options != null && 'replacements' in options) {\n      throw new TypeError(`Sequelize#rawQuery does not accept the \"replacements\" options.\nOnly bind parameters can be provided, in the dialect-specific syntax.\nUse Sequelize#query if you wish to use replacements.`);\n    }\n\n    options = { ...this.options.query, ...options, bindParameterOrder: null };\n\n    let bindParameters;\n    if (options.bind != null) {\n      const isBindArray = Array.isArray(options.bind);\n      if (!isPlainObject(options.bind) && !isBindArray) {\n        throw new TypeError(\n          'options.bind must be either a plain object (for named parameters) or an array (for numeric parameters)',\n        );\n      }\n\n      const mappedResult = mapBindParameters(sql, this.dialect);\n\n      for (const parameterName of mappedResult.parameterSet) {\n        if (isBindArray) {\n          if (!/[1-9][0-9]*/.test(parameterName) || options.bind.length < Number(parameterName)) {\n            throw new Error(\n              `Query includes bind parameter \"$${parameterName}\", but no value has been provided for that bind parameter.`,\n            );\n          }\n        } else if (!(parameterName in options.bind)) {\n          throw new Error(\n            `Query includes bind parameter \"$${parameterName}\", but no value has been provided for that bind parameter.`,\n          );\n        }\n      }\n\n      sql = mappedResult.sql;\n\n      // used by dialects that support \"INOUT\" parameters to map the OUT parameters back the the name the dev used.\n      options.bindParameterOrder = mappedResult.bindOrder;\n      if (mappedResult.bindOrder == null) {\n        bindParameters = options.bind;\n      } else {\n        bindParameters = mappedResult.bindOrder.map(key => {\n          if (isBindArray) {\n            return options.bind[key - 1];\n          }\n\n          return options.bind[key];\n        });\n      }\n    }\n\n    if (options.instance && !options.model) {\n      options.model = options.instance.constructor;\n    }\n\n    if (!options.instance && !options.model) {\n      options.raw = true;\n    }\n\n    // map raw fields to model attributes\n    if (options.mapToModel) {\n      // TODO: throw if model is not specified\n      options.fieldMap = options.model?.fieldAttributeMap;\n    }\n\n    options = defaults(options, {\n      logging: Object.hasOwn(this.options, 'logging') ? this.options.logging : console.debug,\n      searchPath: Object.hasOwn(this.options, 'searchPath') ? this.options.searchPath : 'DEFAULT',\n    });\n\n    if (!options.type) {\n      if (options.model || options.nest || options.plain) {\n        options.type = QueryTypes.SELECT;\n      } else {\n        options.type = QueryTypes.RAW;\n      }\n    }\n\n    // if dialect doesn't support search_path or dialect option\n    // to prepend searchPath is not true delete the searchPath option\n    if (\n      !this.dialect.supports.searchPath ||\n      !this.options.prependSearchPath ||\n      options.supportsSearchPath === false\n    ) {\n      delete options.searchPath;\n    } else if (!options.searchPath) {\n      // if user wants to always prepend searchPath (preprendSearchPath = true)\n      // then set to DEFAULT if none is provided\n      options.searchPath = 'DEFAULT';\n    }\n\n    const checkTransaction = () => {\n      if (options.transaction && options.transaction.finished && !options[COMPLETES_TRANSACTION]) {\n        const error = new Error(\n          `${options.transaction.finished} has been called on this transaction(${options.transaction.id}), you can no longer use it. (The rejected query is attached as the 'sql' property of this error)`,\n        );\n        error.sql = sql;\n        throw error;\n      }\n    };\n\n    setTransactionFromCls(options, this);\n    const retryOptions = { ...this.options.retry, ...options.retry };\n\n    return await retry(async () => {\n      checkTransaction();\n\n      const connection = options.transaction\n        ? options.transaction.getConnection()\n        : options.connection\n          ? options.connection\n          : await this.pool.acquire({\n              useMaster: options.useMaster,\n              type: options.type === 'SELECT' ? 'read' : 'write',\n            });\n\n      if (this.dialect.name === 'db2' && options.alter && options.alter.drop === false) {\n        connection.dropTable = false;\n      }\n\n      const query = new this.dialect.Query(connection, this, options);\n\n      try {\n        await this.hooks.runAsync('beforeQuery', options, query);\n        checkTransaction();\n\n        return await query.run(sql, bindParameters, { minifyAliases: options.minifyAliases });\n      } finally {\n        await this.hooks.runAsync('afterQuery', options, query);\n        if (!options.transaction && !options.connection) {\n          this.pool.release(connection);\n        }\n      }\n    }, retryOptions);\n  }\n\n  /**\n   * Execute a query which would set an environment or user variable. The variables are set per connection, so this function needs a transaction.\n   * Only works for MySQL or MariaDB.\n   *\n   * @param {object} variables Object with multiple variables.\n   * @param {object} [options] query options.\n   *\n   * @returns {Promise}\n   */\n  async setSessionVariables(variables, options) {\n    // Prepare options\n    options = { ...this.options.setSessionVariables, ...options };\n\n    if (!['mysql', 'mariadb'].includes(this.dialect.name)) {\n      throw new Error('sequelize.setSessionVariables is only supported for mysql or mariadb');\n    }\n\n    setTransactionFromCls(options, this);\n\n    if (\n      (!options.transaction || !(options.transaction instanceof Transaction)) &&\n      !options.connection\n    ) {\n      throw new Error(\n        'You must specify either options.transaction or options.connection, as sequelize.setSessionVariables is used to set the session options of a connection',\n      );\n    }\n\n    // Override some options, since this isn't a SELECT\n    options.raw = true;\n    options.plain = true;\n    options.type = 'SET';\n\n    // Generate SQL Query\n    const query = `SET ${map(\n      variables,\n      (v, k) => `@${k} := ${typeof v === 'string' ? `\"${v}\"` : v}`,\n    ).join(', ')}`;\n\n    return await this.query(query, options);\n  }\n\n  /**\n   * Sync all defined models to the DB.\n   *\n   * @param {object} [options={}] sync options\n   * @param {boolean} [options.force=false] If force is true, each Model will run `DROP TABLE IF EXISTS`, before it tries to create its own table\n   * @param {boolean|Function} [options.logging=console.log] A function that logs sql queries, or false for no logging\n   * @param {string} [options.schema='public'] The schema that the tables should be created in. This can be overridden for each table in sequelize.define\n   * @param {string} [options.searchPath=DEFAULT] An optional parameter to specify the schema search_path (Postgres only)\n   * @param {boolean} [options.hooks=true] If hooks is true then beforeSync, afterSync, beforeBulkSync, afterBulkSync hooks will be called\n   * @param {boolean|object} [options.alter=false] Alters tables to fit models. Provide an object for additional configuration. Not recommended for production use. If not further configured deletes data in columns that were removed or had their type changed in the model.\n   * @param {boolean} [options.alter.drop=true] Prevents any drop statements while altering a table when set to `false`\n   *\n   * @returns {Promise}\n   */\n  async sync(options) {\n    options = {\n      ...this.options.sync,\n      ...options,\n      hooks: options ? options.hooks !== false : true,\n    };\n\n    if ('match' in options) {\n      throw new Error(\n        'The \"match\" option has been removed as matching against a database name does not make sense in every dialects.',\n      );\n    }\n\n    if (options.hooks) {\n      await this.hooks.runAsync('beforeBulkSync', options);\n    }\n\n    if (options.force) {\n      await this.drop({\n        ...options,\n        cascade: this.dialect.supports.dropTable.cascade || undefined,\n      });\n    }\n\n    // no models defined, just authenticate\n    if (this.models.size === 0) {\n      await this.authenticate(options);\n    } else {\n      const models = this.models.getModelsTopoSortedByForeignKey();\n      if (models == null) {\n        return this._syncModelsWithCyclicReferences(options);\n      }\n\n      // reverse to start with the one model that does not depend on anything\n      models.reverse();\n\n      // Topologically sort by foreign key constraints to give us an appropriate\n      // creation order\n      for (const model of models) {\n        await model.sync(options);\n      }\n    }\n\n    if (options.hooks) {\n      await this.hooks.runAsync('afterBulkSync', options);\n    }\n\n    return this;\n  }\n\n  /**\n   * Used instead of sync() when two models reference each-other, so their foreign keys cannot be created immediately.\n   *\n   * @param {object} options - sync options\n   * @private\n   */\n  async _syncModelsWithCyclicReferences(options) {\n    if (this.dialect.name === 'sqlite3') {\n      // Optimisation: no need to do this in two passes in SQLite because we can temporarily disable foreign keys\n      await withSqliteForeignKeysOff(this, options, async () => {\n        for (const model of this.models) {\n          await model.sync(options);\n        }\n      });\n\n      return;\n    }\n\n    // create all tables, but don't create foreign key constraints\n    for (const model of this.models) {\n      await model.sync({ ...options, withoutForeignKeyConstraints: true });\n    }\n\n    // add foreign key constraints\n    for (const model of this.models) {\n      await model.sync({ ...options, force: false, alter: true });\n    }\n  }\n\n  /**\n   * Drop all tables defined through this sequelize instance.\n   * This is done by calling {@link Model.drop} on each model.\n   *\n   * @param {object} [options] The options passed to each call to Model.drop\n   * @param {boolean|Function} [options.logging] A function that logs sql queries, or false for no logging\n   *\n   * @returns {Promise}\n   */\n  async drop(options) {\n    // if 'cascade' is specified, we don't have to worry about cyclic dependencies.\n    if (options && options.cascade) {\n      for (const model of this.models) {\n        await model.drop(options);\n      }\n    }\n\n    const sortedModels = this.models.getModelsTopoSortedByForeignKey();\n\n    // no cyclic dependency between models, we can delete them in an order that will not cause an error.\n    if (sortedModels) {\n      for (const model of sortedModels) {\n        await model.drop(options);\n      }\n    }\n\n    if (this.dialect.name === 'sqlite3') {\n      // Optimisation: no need to do this in two passes in SQLite because we can temporarily disable foreign keys\n      await withSqliteForeignKeysOff(this, options, async () => {\n        for (const model of this.models) {\n          await model.drop(options);\n        }\n      });\n\n      return;\n    }\n\n    // has cyclic dependency: we first remove each foreign key, then delete each model.\n    for (const model of this.models) {\n      const foreignKeys = await this.queryInterface.showConstraints(model, {\n        ...options,\n        constraintType: 'FOREIGN KEY',\n      });\n\n      await Promise.all(\n        foreignKeys.map(foreignKey => {\n          return this.queryInterface.removeConstraint(model, foreignKey.constraintName, options);\n        }),\n      );\n    }\n\n    for (const model of this.models) {\n      await model.drop(options);\n    }\n  }\n\n  /**\n   * Test the connection by trying to authenticate. It runs `SELECT 1+1 AS result` query.\n   *\n   * @param {object} [options={}] query options\n   *\n   * @returns {Promise}\n   */\n  async authenticate(options) {\n    options = {\n      raw: true,\n      plain: true,\n      type: QueryTypes.SELECT,\n      ...options,\n    };\n\n    await this.query(\n      `SELECT 1+1 AS result${this.dialect.name === 'ibmi' ? ' FROM SYSIBM.SYSDUMMY1' : ''}`,\n      options,\n    );\n  }\n\n  /**\n   * Get the fn for random based on the dialect\n   *\n   * @returns {Fn}\n   */\n  // TODO: replace with sql.random\n  random() {\n    if (['postgres', 'sqlite3', 'snowflake'].includes(this.dialect.name)) {\n      return fn('RANDOM');\n    }\n\n    return fn('RAND');\n  }\n\n  // Global exports\n  static Fn = Fn;\n  static Col = Col;\n  static Cast = Cast;\n  static Literal = Literal;\n  static Where = Where;\n  static List = List;\n  static Identifier = Identifier;\n  static Attribute = Attribute;\n  static Value = Value;\n  static AssociationPath = AssociationPath;\n  static JsonPath = JsonPath;\n\n  static sql = sql;\n\n  // these are all available on the \"sql\" object, but are exposed for backwards compatibility\n  static fn = fn;\n  static col = col;\n  static cast = cast;\n  static literal = literal;\n  static json = json;\n  static where = where;\n\n  static and = and;\n\n  static or = or;\n\n  static isModelStatic = isModelStatic;\n\n  static isSameInitialModel = isSameInitialModel;\n\n  static importModels = importModels;\n\n  static TransactionNestMode = TransactionNestMode;\n  static TransactionType = TransactionType;\n  static Lock = Lock;\n  static IsolationLevel = IsolationLevel;\n\n  log(...args) {\n    let options;\n\n    const last = args.at(-1);\n\n    if (last && isPlainObject(last) && Object.hasOwn(last, 'logging')) {\n      options = last;\n\n      // remove options from set of logged arguments if options.logging is equal to console.log or console.debug\n      // eslint-disable-next-line no-console -- intended console.log use\n      if (options.logging === console.log || options.logging === console.debug) {\n        args.splice(-1, 1);\n      }\n    } else {\n      options = this.options;\n    }\n\n    if (options.logging) {\n      if (options.logging === true) {\n        Deprecations.noTrueLogging();\n        options.logging = console.debug;\n      }\n\n      // second argument is sql-timings, when benchmarking option enabled\n      if ((this.options.benchmark || options.benchmark) && options.logging === console.debug) {\n        args = [`${args[0]} Elapsed time: ${args[1]}ms`];\n      }\n\n      options.logging(...args);\n    }\n  }\n\n  normalizeAttribute(attribute) {\n    if (!isPlainObject(attribute)) {\n      attribute = { type: attribute };\n    } else {\n      attribute = { ...attribute };\n    }\n\n    if (attribute.values) {\n      throw new TypeError(\n        `\nThe \"values\" property has been removed from column definitions. The following is no longer supported:\n\nsequelize.define('MyModel', {\n  roles: {\n    type: DataTypes.ENUM,\n    values: ['admin', 'user'],\n  },\n});\n\nInstead, define enum values like this:\n\nsequelize.define('MyModel', {\n  roles: {\n    type: DataTypes.ENUM(['admin', 'user']),\n  },\n});\n\nRemove the \"values\" property to resolve this issue.\n        `.trim(),\n      );\n    }\n\n    if (!attribute.type) {\n      return attribute;\n    }\n\n    attribute.type = this.normalizeDataType(attribute.type);\n\n    return attribute;\n  }\n}\n\n// Aliases\nSequelize.prototype.fn = Sequelize.fn;\nSequelize.prototype.col = Sequelize.col;\nSequelize.prototype.cast = Sequelize.cast;\nSequelize.prototype.literal = Sequelize.literal;\nSequelize.prototype.and = Sequelize.and;\nSequelize.prototype.or = Sequelize.or;\nSequelize.prototype.json = Sequelize.json;\nSequelize.prototype.where = Sequelize.where;\nSequelize.prototype.validate = Sequelize.prototype.authenticate;\n\n/**\n * Sequelize version number.\n */\n// To avoid any errors on startup when this field is unused, only resolve it as needed.\n// this is to prevent any potential issues on startup with unusual environments (eg, bundled code)\n// where relative paths may fail that are unnecessary.\nObject.defineProperty(Sequelize, 'version', {\n  enumerable: true,\n  get() {\n    return require('../package.json').version;\n  },\n});\n\n/**\n * Operators symbols to be used for querying data\n *\n * @see  {@link Operators}\n */\nSequelize.Op = Op;\n\n/**\n * Available table hints to be used for querying data in mssql for table hints\n *\n * @see {@link TableHints}\n */\nSequelize.TableHints = TableHints;\n\n/**\n * Available index hints to be used for querying data in mysql for index hints\n *\n * @see {@link IndexHints}\n */\nSequelize.IndexHints = IndexHints;\n\n/**\n * A reference to the sequelize transaction class. Use this to access isolationLevels and types when creating a transaction\n *\n * @see {@link Transaction}\n * @see {@link Sequelize.transaction}\n */\nSequelize.Transaction = Transaction;\n\nSequelize.GeoJsonType = require('./geo-json').GeoJsonType;\n\n/**\n * A reference to Sequelize constructor from sequelize. Useful for accessing DataTypes, Errors etc.\n *\n * @see {@link Sequelize}\n */\nSequelize.prototype.Sequelize = Sequelize;\n\n/**\n * Available query types for use with `sequelize.query`\n *\n * @see {@link QueryTypes}\n */\nSequelize.prototype.QueryTypes = Sequelize.QueryTypes = QueryTypes;\n\n/**\n * Exposes the validator.js object, so you can extend it with custom validation functions. The validator is exposed both on the instance, and on the constructor.\n *\n * @see https://github.com/chriso/validator.js\n */\nSequelize.prototype.Validator = Sequelize.Validator = Validator;\n\nSequelize.Model = Model;\n\nSequelize.AbstractQueryInterface = AbstractQueryInterface;\nSequelize.BelongsToAssociation = BelongsToAssociation;\nSequelize.HasOneAssociation = HasOneAssociation;\nSequelize.HasManyAssociation = HasManyAssociation;\nSequelize.BelongsToManyAssociation = BelongsToManyAssociation;\n\nSequelize.DataTypes = DataTypes;\nfor (const dataTypeName in DataTypes) {\n  Object.defineProperty(Sequelize, dataTypeName, {\n    get() {\n      noSequelizeDataType();\n\n      return DataTypes[dataTypeName];\n    },\n  });\n}\n\n/**\n * A reference to the deferrable collection. Use this to access the different deferrable options.\n *\n * @see {@link QueryInterface#addConstraint}\n */\nSequelize.Deferrable = Deferrable;\n\n/**\n * A reference to the deferrable collection. Use this to access the different deferrable options.\n *\n * @see {@link Transaction.Deferrable}\n * @see {@link Sequelize#transaction}\n */\nSequelize.ConstraintChecking = ConstraintChecking;\n\n/**\n * A reference to the sequelize association class.\n *\n * @see {@link Association}\n */\nSequelize.prototype.Association = Sequelize.Association = Association;\n\n/**\n * Provide alternative version of `inflection` module to be used by `pluralize` etc.\n *\n * @param {object} _inflection - `inflection` module\n */\nSequelize.useInflection = useInflection;\n\nSequelize.SQL_NULL = SQL_NULL;\nSequelize.JSON_NULL = JSON_NULL;\nSequelize.ManualOnDelete = ManualOnDelete;\n\nSequelize.AbstractConnectionManager = AbstractConnectionManager;\nSequelize.AbstractQueryGenerator = AbstractQueryGenerator;\nSequelize.AbstractQuery = AbstractQuery;\nSequelize.AbstractDialect = AbstractDialect;\n\n/**\n * Expose various errors available\n */\n\nfor (const error of Object.keys(SequelizeErrors)) {\n  Sequelize[error] = SequelizeErrors[error];\n}\n\n/**\n * An AND query\n *\n * @see Model.findAll\n *\n * @param {...string|object} args Each argument will be joined by AND\n * @since v2.0.0-dev3\n * @memberof Sequelize\n *\n * @returns {Sequelize.and}\n */\nexport function and(...args) {\n  return { [Op.and]: args };\n}\n\n/**\n * An OR query\n *\n * @see\n * {@link Model.findAll}\n *\n * @param {...string|object} args Each argument will be joined by OR\n * @since v2.0.0-dev3\n * @memberof Sequelize\n *\n * @returns {Sequelize.or}\n */\nexport function or(...args) {\n  if (args.length === 1) {\n    return { [Op.or]: args[0] };\n  }\n\n  return { [Op.or]: args };\n}\n"],
  "mappings": "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",
  "names": ["import_sql", "sql", "isPlainObject", "defaults", "retry", "map", "Validator"]
}
