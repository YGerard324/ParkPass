{
  "version": 3,
  "sources": ["../src/sequelize.internals.ts"],
  "sourcesContent": ["import type { Nullish } from '@sequelize/utils';\nimport { getSynchronizedTypeKeys } from '@sequelize/utils';\nimport type { Class } from 'type-fest';\nimport type { AbstractDialect } from './abstract-dialect/dialect.js';\nimport type { Logging, ModelOptions, ModelStatic } from './model.js';\nimport type { SequelizeHooks } from './sequelize-typescript.js';\nimport type {\n  DefaultSetOptions,\n  DialectName,\n  QueryOptions,\n  ReplicationOptions,\n  RetryOptions,\n  SyncOptions,\n} from './sequelize.js';\nimport type { PoolOptions } from './sequelize.types.js';\nimport type { IsolationLevel, TransactionNestMode, TransactionType } from './transaction.js';\n\nexport function importDialect(dialect: string): typeof AbstractDialect {\n  // Requiring the dialect in a switch-case to keep the\n  // require calls static. (Browserify fix)\n  switch (dialect) {\n    case 'mariadb':\n      // eslint-disable-next-line import/no-extraneous-dependencies -- legacy function, will be removed. User needs to install the dependency themselves\n      return require('@sequelize/mariadb').MariaDbDialect;\n    case 'mssql':\n      // eslint-disable-next-line import/no-extraneous-dependencies -- legacy function, will be removed. User needs to install the dependency themselves\n      return require('@sequelize/mssql').MsSqlDialect;\n    case 'mysql':\n      // eslint-disable-next-line import/no-extraneous-dependencies -- legacy function, will be removed. User needs to install the dependency themselves\n      return require('@sequelize/mysql').MySqlDialect;\n    case 'postgres':\n      // eslint-disable-next-line import/no-extraneous-dependencies -- legacy function, will be removed. User needs to install the dependency themselves\n      return require('@sequelize/postgres').PostgresDialect;\n    case 'sqlite':\n    case 'sqlite3':\n      // eslint-disable-next-line import/no-extraneous-dependencies -- legacy function, will be removed. User needs to install the dependency themselves\n      return require('@sequelize/sqlite3').SqliteDialect;\n    case 'ibmi':\n      // eslint-disable-next-line import/no-extraneous-dependencies -- legacy function, will be removed. User needs to install the dependency themselves\n      return require('@sequelize/db2-ibmi').IBMiDialect;\n    case 'db2':\n      // eslint-disable-next-line import/no-extraneous-dependencies -- legacy function, will be removed. User needs to install the dependency themselves\n      return require('@sequelize/db2').Db2Dialect;\n    case 'snowflake':\n      // eslint-disable-next-line import/no-extraneous-dependencies -- legacy function, will be removed. User needs to install the dependency themselves\n      return require('@sequelize/snowflake').SnowflakeDialect;\n    default:\n      throw new Error(\n        `The dialect ${dialect} is not natively supported. Native dialects: mariadb, mssql, mysql, postgres, sqlite3, ibmi, db2 and snowflake.`,\n      );\n  }\n}\n\nexport const PERSISTED_SEQUELIZE_OPTIONS = getSynchronizedTypeKeys<\n  PersistedSequelizeOptions<AbstractDialect>\n>({\n  benchmark: undefined,\n  defaultTimestampPrecision: undefined,\n  defaultTransactionNestMode: undefined,\n  define: undefined,\n  disableClsTransactions: undefined,\n  isolationLevel: undefined,\n  keepDefaultTimezone: undefined,\n  logQueryParameters: undefined,\n  logging: undefined,\n  minifyAliases: undefined,\n  noTypeValidation: undefined,\n  nullJsonStringification: undefined,\n  omitNull: undefined,\n  prependSearchPath: undefined,\n  query: undefined,\n  quoteIdentifiers: undefined,\n  replication: undefined,\n  retry: undefined,\n  schema: undefined,\n  set: undefined,\n  sync: undefined,\n  timezone: undefined,\n  transactionType: undefined,\n});\n\n/**\n * The options that are accessible via {@link Sequelize#options}.\n */\nexport interface PersistedSequelizeOptions<Dialect extends AbstractDialect> extends Logging {\n  /**\n   * The precision for the `createdAt`/`updatedAt`/`deletedAt` DATETIME columns that Sequelize adds to models.\n   * Can be a number between 0 and 6, or null to use the default precision of the database. Defaults to 6.\n   *\n   * @default 6\n   */\n  defaultTimestampPrecision?: number | null;\n\n  /**\n   * How nested transaction blocks behave by default.\n   * See {@link ManagedTransactionOptions#nestMode} for more information.\n   *\n   * @default TransactionNestMode.reuse\n   */\n  defaultTransactionNestMode?: TransactionNestMode;\n\n  /**\n   * Default options for model definitions. See Model.init.\n   */\n  define?: Omit<ModelOptions, 'name' | 'modelName' | 'tableName'>;\n\n  /**\n   * Disable the use of AsyncLocalStorage to automatically pass transactions started by {@link Sequelize#transaction}.\n   * You will need to pass transactions around manually if you disable this.\n   */\n  disableClsTransactions?: boolean;\n\n  /**\n   * Set the default transaction isolation level.\n   * If not set, does not change the database's default transaction isolation level.\n   */\n  isolationLevel?: IsolationLevel | undefined;\n\n  /**\n   * A flag that defines if the default timezone is used to convert dates from the database.\n   *\n   * @default false\n   */\n  keepDefaultTimezone?: boolean;\n\n  /**\n   * Set to `true` to show bind parameters in log.\n   *\n   * @default false\n   */\n  logQueryParameters?: boolean;\n\n  /**\n   * Set to `true` to automatically minify aliases generated by sequelize.\n   * Mostly useful to circumvent the POSTGRES alias limit of 64 characters.\n   *\n   * @default false\n   */\n  minifyAliases?: boolean;\n\n  /**\n   * Disable built in type validators on insert and update, e.g. don't validate that arguments passed to integer\n   * fields are integer-like.\n   *\n   * @default false\n   */\n  noTypeValidation?: boolean;\n\n  /**\n   * When representing the JavaScript null primitive in a JSON column, Sequelize can\n   * use either the SQL NULL value, or a JSON 'null'.\n   *\n   * Set this to \"json\" if you want the null to be stored as a JSON 'null'.\n   * Set this to \"sql\" if you want the null to be stored as the SQL NULL value.\n   * Set this to \"explicit\" if you don't want Sequelize to make any assumptions.\n   * This means that you won't be able to use the JavaScript null primitive as the top level value of a JSON column,\n   * you will have to use {@link SQL_NULL} or {@link JSON_NULL} instead.\n   *\n   * This only impacts serialization when inserting or updating values.\n   * Comparing always requires to be explicit.\n   *\n   * Read more: https://sequelize.org/docs/v7/querying/json/\n   *\n   * @default json\n   */\n  nullJsonStringification?: 'explicit' | 'json' | 'sql';\n\n  /**\n   * A flag that defines if null values should be passed to SQL queries or not.\n   *\n   * @default false\n   */\n  omitNull?: boolean;\n\n  // TODO [>7]: remove this option\n  prependSearchPath?: boolean | undefined;\n\n  /**\n   * Default options for sequelize.query\n   */\n  query?: QueryOptions;\n\n  /**\n   * Set to `false` to make table names and attributes case-insensitive on Postgres and skip double quoting of\n   * them.\n   *\n   * @default true\n   */\n  quoteIdentifiers?: boolean;\n\n  /**\n   * Use read / write replication. To enable replication, pass an object, with two properties, read and write.\n   * Write should be an object (a single server for handling writes), and read an array of object (several\n   * servers to handle reads). Each read/write server can have the following properties: `host`, `port`,\n   * `username`, `password`, `database`.  Connection strings can be used instead of objects.\n   *\n   * @default false\n   */\n  replication?: ReplicationOptions<Dialect> | false | Nullish;\n\n  retry?: RetryOptions;\n\n  /**\n   * If defined, the connection will use the provided schema instead of the default (\"public\").\n   */\n  schema?: string;\n\n  /**\n   * Default options for sequelize.set\n   */\n  set?: DefaultSetOptions;\n\n  /**\n   * Default options for sequelize.sync\n   */\n  sync?: SyncOptions;\n\n  /**\n   * The timezone used when converting a date from the database into a JavaScript date. The timezone is also\n   * used to SET TIMEZONE when connecting to the server, to ensure that the result of NOW, CURRENT_TIMESTAMP\n   * and other time related functions have in the right timezone. For best cross platform performance use the\n   * format\n   * +/-HH:MM. Will also accept string versions of timezones supported by Intl.Locale (e.g. 'America/Los_Angeles');\n   * this is useful to capture daylight savings time changes.\n   *\n   * @default '+00:00'\n   */\n  timezone?: string;\n\n  /**\n   * Set the default transaction type. See Sequelize.Transaction.TYPES for possible options. Sqlite only.\n   *\n   * @default 'DEFERRED'\n   */\n  transactionType?: TransactionType;\n}\n\nexport const EPHEMERAL_SEQUELIZE_OPTIONS = getSynchronizedTypeKeys<\n  EphemeralSequelizeOptions<AbstractDialect>\n>({\n  databaseVersion: undefined,\n  dialect: undefined,\n  hooks: undefined,\n  models: undefined,\n  pool: undefined,\n  url: undefined,\n});\n\n/**\n * Sequelize options that are not persisted in the Sequelize instance.\n */\nexport interface EphemeralSequelizeOptions<Dialect extends AbstractDialect> {\n  /**\n   * The version of the Database Sequelize will connect to.\n   * If unspecified, or set to 0, Sequelize will retrieve it during its first connection to the Database.\n   */\n  databaseVersion?: string;\n\n  /**\n   * The dialect of the database you are connecting to. Either the name of the dialect, or a dialect class.\n   */\n  dialect: DialectName | Class<Dialect>;\n\n  /**\n   * Sets global permanent hooks.\n   */\n  hooks?: Partial<SequelizeHooks<Dialect>>;\n\n  /**\n   * A list of models to load and init.\n   *\n   * This option is only useful if you created your models using decorators.\n   * Models created using {@link Model.init} or {@link Sequelize#define} don't need to be specified in this option.\n   *\n   * Use {@link importModels} to load models dynamically:\n   *\n   * @example\n   * ```ts\n   * import { User } from './models/user.js';\n   *\n   * new Sequelize({\n   *   models: [User],\n   * });\n   * ```\n   *\n   * @example\n   * ```ts\n   * new Sequelize({\n   *   models: await importModels(__dirname + '/*.model.ts'),\n   * });\n   * ```\n   */\n  models?: ModelStatic[];\n\n  /**\n   * Connection pool options\n   */\n  pool?: PoolOptions<Dialect> | undefined;\n\n  /**\n   * The connection URL.\n   * If other connection options are set, they will override the values set in this URL.\n   */\n  url?: string | undefined;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,mBAAwC;AAgBjC,SAAS,cAAc,SAAyC;AAGrE,UAAQ,SAAS;AAAA,IACf,KAAK;AAEH,aAAO,QAAQ,oBAAoB,EAAE;AAAA,IACvC,KAAK;AAEH,aAAO,QAAQ,kBAAkB,EAAE;AAAA,IACrC,KAAK;AAEH,aAAO,QAAQ,kBAAkB,EAAE;AAAA,IACrC,KAAK;AAEH,aAAO,QAAQ,qBAAqB,EAAE;AAAA,IACxC,KAAK;AAAA,IACL,KAAK;AAEH,aAAO,QAAQ,oBAAoB,EAAE;AAAA,IACvC,KAAK;AAEH,aAAO,QAAQ,qBAAqB,EAAE;AAAA,IACxC,KAAK;AAEH,aAAO,QAAQ,gBAAgB,EAAE;AAAA,IACnC,KAAK;AAEH,aAAO,QAAQ,sBAAsB,EAAE;AAAA,IACzC;AACE,YAAM,IAAI;AAAA,QACR,eAAe;AAAA,MACjB;AAAA,EACJ;AACF;AAEO,MAAM,kCAA8B,sCAEzC;AAAA,EACA,WAAW;AAAA,EACX,2BAA2B;AAAA,EAC3B,4BAA4B;AAAA,EAC5B,QAAQ;AAAA,EACR,wBAAwB;AAAA,EACxB,gBAAgB;AAAA,EAChB,qBAAqB;AAAA,EACrB,oBAAoB;AAAA,EACpB,SAAS;AAAA,EACT,eAAe;AAAA,EACf,kBAAkB;AAAA,EAClB,yBAAyB;AAAA,EACzB,UAAU;AAAA,EACV,mBAAmB;AAAA,EACnB,OAAO;AAAA,EACP,kBAAkB;AAAA,EAClB,aAAa;AAAA,EACb,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,KAAK;AAAA,EACL,MAAM;AAAA,EACN,UAAU;AAAA,EACV,iBAAiB;AACnB,CAAC;AA8JM,MAAM,kCAA8B,sCAEzC;AAAA,EACA,iBAAiB;AAAA,EACjB,SAAS;AAAA,EACT,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,KAAK;AACP,CAAC;",
  "names": []
}
