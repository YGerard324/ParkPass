{
  "version": 3,
  "sources": ["../../src/expression-builders/literal.ts"],
  "sourcesContent": ["import { BaseSqlExpression } from './base-sql-expression.js';\n\n/**\n * Do not use me directly. Use {@link literal}\n */\nexport class Literal extends BaseSqlExpression {\n  /** this (type-only) brand prevents TypeScript from thinking Cast is assignable to Literal because they share the same shape */\n  private declare readonly brand: 'literal';\n\n  readonly val: ReadonlyArray<string | BaseSqlExpression>;\n\n  constructor(val: string | Array<string | BaseSqlExpression>) {\n    super();\n\n    this.val = Array.isArray(val) ? val : [val];\n  }\n}\n\n/**\n * Creates an object representing a literal, i.e. something that will not be escaped.\n * We recommend using {@link sql} for a better DX.\n *\n * @param val literal value\n */\nexport function literal(val: string | Array<string | BaseSqlExpression>): Literal {\n  return new Literal(val);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAkC;AAK3B,MAAM,gBAAgB,6CAAkB;AAAA,EAIpC;AAAA,EAET,YAAY,KAAiD;AAC3D,UAAM;AAEN,SAAK,MAAM,MAAM,QAAQ,GAAG,IAAI,MAAM,CAAC,GAAG;AAAA,EAC5C;AACF;AAQO,SAAS,QAAQ,KAA0D;AAChF,SAAO,IAAI,QAAQ,GAAG;AACxB;",
  "names": []
}
