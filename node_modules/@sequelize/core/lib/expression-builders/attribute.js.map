{
  "version": 3,
  "sources": ["../../src/expression-builders/attribute.ts"],
  "sourcesContent": ["import { parseAttributeSyntax } from '../utils/attribute-syntax.js';\nimport type { AssociationPath } from './association-path.js';\nimport { BaseSqlExpression } from './base-sql-expression.js';\nimport type { Cast } from './cast.js';\nimport type { DialectAwareFn } from './dialect-aware-fn.js';\nimport type { JsonPath } from './json-path.js';\n\n/**\n * Use {@link attribute} instead.\n */\nexport class Attribute extends BaseSqlExpression {\n  private declare readonly brand: 'attribute';\n\n  constructor(readonly attributeName: string) {\n    super();\n  }\n}\n\n/**\n * Used to represent the attribute of a model. You should use the attribute name, which will be mapped to the correct column name.\n * This attribute name follows the same rules as the attribute names in POJO where options.\n * As such, you can use dot notation to access nested JSON properties, and you can reference included associations.\n *\n * If you want to use a database name, without mapping, you can use {@link Identifier}.\n *\n * @example\n * Let's say the class User has an attribute `firstName`, which maps to the column `first_name`.\n *\n * ```ts\n * User.findAll({\n *  where: sql`${attribute('firstName')} = 'John'`\n * });\n * ```\n *\n * Will generate:\n *\n * ```sql\n * SELECT * FROM users WHERE first_name = 'John'\n * ```\n *\n * @example\n * Let's say the class User has an attribute `data`, which is a JSON column.\n *\n * ```ts\n * User.findAll({\n *  where: sql`${attribute('data.registered')} = 'true'`\n * });\n * ```\n *\n * Will generate (assuming the dialect supports JSON operators):\n *\n * ```sql\n * SELECT * FROM users WHERE data->'registered' = 'true'\n * ```\n *\n * @param attributeName\n */\nexport function attribute(\n  attributeName: string,\n): Cast | JsonPath | AssociationPath | Attribute | DialectAwareFn {\n  return parseAttributeSyntax(attributeName);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAqC;AAErC,iCAAkC;AAQ3B,MAAM,kBAAkB,6CAAkB;AAAA,EAG/C,YAAqB,eAAuB;AAC1C,UAAM;AADa;AAAA,EAErB;AACF;AAyCO,SAAS,UACd,eACgE;AAChE,aAAO,8CAAqB,aAAa;AAC3C;",
  "names": []
}
