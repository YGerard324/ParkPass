{
  "version": 3,
  "sources": ["../../src/expression-builders/fn.ts"],
  "sourcesContent": ["import { isPlainObject } from '@sequelize/utils';\nimport { Op } from '../operators.js';\nimport type { Expression } from '../sequelize.js';\nimport { BaseSqlExpression } from './base-sql-expression.js';\nimport { where } from './where.js';\n\n/**\n * Do not use me directly. Use {@link fn}\n */\nexport class Fn extends BaseSqlExpression {\n  private declare readonly brand: 'fn';\n\n  readonly fn: string;\n  readonly args: readonly Expression[];\n\n  constructor(fnName: string, args: Fn['args']) {\n    super();\n    this.fn = fnName;\n    this.args = args;\n  }\n}\n\n/**\n * Creates an object representing a database function. This can be used in search queries, both in where and order parts, and as default values in column definitions.\n * If you want to refer to columns in your function, you should use {@link Attribute} (recommended), {@link Identifier}, or {@link col} (discouraged)\n * otherwise the value will be interpreted as a string.\n *\n * \u2139\uFE0F This method is usually verbose and we recommend using the {@link sql} template string tag instead.\n *\n * @param fnName The SQL function you want to call\n * @param args All further arguments will be passed as arguments to the function\n *\n * @example Convert a user's username to upper case\n * ```ts\n * instance.update({\n *   username: fn('upper', col('username'))\n * });\n * ```\n */\nexport function fn(fnName: string, ...args: Fn['args']): Fn {\n  for (let i = 0; i < args.length; i++) {\n    // Users should wrap this parameter with `where` themselves, but we do it to ensure backwards compatibility\n    // with https://github.com/sequelize/sequelize/issues/6666\n    // @ts-expect-error -- backwards compatibility hack\n    if (isPlainObject(args[i]) && !(Op.col in args[i])) {\n      // @ts-expect-error -- backwards compatibility hack\n      args[i] = where(args[i]);\n    }\n  }\n\n  return new Fn(fnName, args);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAA8B;AAC9B,uBAAmB;AAEnB,iCAAkC;AAClC,mBAAsB;AAKf,MAAM,WAAW,6CAAkB;AAAA,EAG/B;AAAA,EACA;AAAA,EAET,YAAY,QAAgB,MAAkB;AAC5C,UAAM;AACN,SAAK,KAAK;AACV,SAAK,OAAO;AAAA,EACd;AACF;AAmBO,SAAS,GAAG,WAAmB,MAAsB;AAC1D,WAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AAIpC,YAAI,4BAAc,KAAK,CAAC,CAAC,KAAK,EAAE,oBAAG,OAAO,KAAK,CAAC,IAAI;AAElD,WAAK,CAAC,QAAI,oBAAM,KAAK,CAAC,CAAC;AAAA,IACzB;AAAA,EACF;AAEA,SAAO,IAAI,GAAG,QAAQ,IAAI;AAC5B;",
  "names": []
}
