{
  "version": 3,
  "sources": ["../../src/expression-builders/json-path.ts"],
  "sourcesContent": ["import type { Expression } from '../sequelize.js';\nimport { BaseSqlExpression } from './base-sql-expression.js';\n\n/**\n * Do not use me directly. Use {@link jsonPath}.\n */\nexport class JsonPath extends BaseSqlExpression {\n  private declare readonly brand: 'jsonPath';\n\n  constructor(\n    readonly expression: Expression,\n    readonly path: ReadonlyArray<string | number>,\n  ) {\n    super();\n  }\n}\n\n/**\n * Use this to access nested properties in a JSON column.\n * You can also use the dot notation with {@link Attribute}, but this works with any values, not just attributes.\n *\n * @param expression The expression to access the property on.\n * @param path The path to the property. If a number is used, it will be treated as an array index, otherwise as a key.\n *\n * @example\n * ```ts\n * sql`${jsonPath('data', ['name'])} = '\"John\"'`\n * ```\n *\n * will produce\n *\n * ```sql\n * -- postgres\n * \"data\"->'name' = '\"John\"'\n * -- sqlite, mysql, mariadb\n * JSON_EXTRACT(\"data\", '$.name') = '\"John\"'\n * ```\n *\n * @example\n * ```ts\n * // notice here that 0 is a number, not a string. It will be treated as an array index.\n * sql`${jsonPath('array', [0])}`\n * ```\n *\n * will produce\n *\n * ```sql\n * -- postgres\n * \"array\"->0\n * -- sqlite, mysql, mariadb\n * JSON_EXTRACT(`array`, '$[0]')\n * ```\n *\n * @example\n * ```ts\n * // notice here that 0 is a string, not a number. It will be treated as an object key.\n * sql`${jsonPath('object', ['0'])}`\n * ```\n *\n * will produce\n *\n * ```sql\n * -- postgres\n * \"object\"->'0'\n * -- sqlite, mysql, mariadb\n * JSON_EXTRACT(`object`, '$.0')\n * ```\n */\nexport function jsonPath(expression: Expression, path: ReadonlyArray<string | number>): JsonPath {\n  return new JsonPath(expression, path);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,iCAAkC;AAK3B,MAAM,iBAAiB,6CAAkB;AAAA,EAG9C,YACW,YACA,MACT;AACA,UAAM;AAHG;AACA;AAAA,EAGX;AACF;AAqDO,SAAS,SAAS,YAAwB,MAAgD;AAC/F,SAAO,IAAI,SAAS,YAAY,IAAI;AACtC;",
  "names": []
}
