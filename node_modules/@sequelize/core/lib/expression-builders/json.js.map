{
  "version": 3,
  "sources": ["../../src/expression-builders/json.ts"],
  "sourcesContent": ["import { noSqlJson } from '../utils/deprecations.js';\nimport type { AssociationPath } from './association-path.js';\nimport type { Attribute } from './attribute.js';\nimport { attribute } from './attribute.js';\nimport type { Cast } from './cast.js';\nimport type { DialectAwareFn } from './dialect-aware-fn.js';\nimport type { JsonPath } from './json-path.js';\nimport type { Where } from './where.js';\nimport { where } from './where.js';\n\n/**\n * Creates an object representing nested where conditions for postgres/sqlite/mysql json data-type.\n *\n * @param conditionsOrPath A hash containing strings/numbers or other nested hash, a string using dot notation or a string using postgres/sqlite/mysql json syntax.\n * @param value An optional value to compare against. Produces a string of the form \"<json path> = '<value>'\".\n *\n * @deprecated use {@link sql.where}, {@link sql.attribute}, and/or {@link sql.jsonPath} instead.\n */\nexport function json(\n  conditionsOrPath: { [key: string]: any } | string,\n  value?: string | number | boolean | null,\n): Cast | JsonPath | AssociationPath | Attribute | DialectAwareFn | Where {\n  noSqlJson();\n\n  if (typeof conditionsOrPath === 'string') {\n    const attr = attribute(conditionsOrPath);\n\n    // json('profile.id') is identical to attribute('profile.id')\n    if (value === undefined) {\n      return attr;\n    }\n\n    // json('profile.id', value) is identical to where(attribute('profile.id'), value)\n    return where(attr, value);\n  }\n\n  if (value === undefined && typeof conditionsOrPath === 'string') {\n    return attribute(conditionsOrPath);\n  }\n\n  // json({ key: value }) is identical to where({ key: value })\n\n  return where(conditionsOrPath);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAA0B;AAG1B,uBAA0B;AAK1B,mBAAsB;AAUf,SAAS,KACd,kBACA,OACwE;AACxE,qCAAU;AAEV,MAAI,OAAO,qBAAqB,UAAU;AACxC,UAAM,WAAO,4BAAU,gBAAgB;AAGvC,QAAI,UAAU,QAAW;AACvB,aAAO;AAAA,IACT;AAGA,eAAO,oBAAM,MAAM,KAAK;AAAA,EAC1B;AAEA,MAAI,UAAU,UAAa,OAAO,qBAAqB,UAAU;AAC/D,eAAO,4BAAU,gBAAgB;AAAA,EACnC;AAIA,aAAO,oBAAM,gBAAgB;AAC/B;",
  "names": []
}
