{
  "version": 3,
  "sources": ["../src/model-internals.ts"],
  "sourcesContent": ["import { cloneDeepPlainValues, freezeDescendants } from '@sequelize/utils';\nimport NodeUtil from 'node:util';\nimport type { IndexOptions } from './abstract-dialect/query-interface.js';\nimport type { WhereAttributeHash } from './abstract-dialect/where-sql-builder-types.js';\nimport { EagerLoadingError } from './errors';\nimport type { Attributes, Filterable, Model, Transactionable } from './model';\nimport type { ModelDefinition } from './model-definition.js';\nimport type { Sequelize } from './sequelize';\nimport { isDevEnv } from './utils/check.js';\nimport { isModelStatic } from './utils/model-utils.js';\n// TODO: strictly type this file during the TS migration of model.js\n\n// The goal of this file is to include the different private methods that are currently present on the Model class.\n// This reduces the risk of having a user implement a static method with the same name as us in their Model subclass,\n// it also prevents accessing internal methods.\n\nexport function _validateIncludedElements(options: any, tableNames: any = {}) {\n  if (!isModelStatic(options.model)) {\n    throw new TypeError('options.model must be provided, and a Model subclass.');\n  }\n\n  const ModelSubclass = options.model;\n\n  options.includeNames = [];\n  options.includeMap = {};\n\n  /* Legacy */\n  options.hasSingleAssociation = false;\n  options.hasMultiAssociation = false;\n\n  if (!options.parent) {\n    options.topModel = options.model;\n    options.topLimit = options.limit;\n  }\n\n  options.include = options.include.map((include: any) => {\n    include = ModelSubclass._conformInclude(include, options.model);\n    include.parent = options;\n    include.topLimit = options.topLimit;\n\n    ModelSubclass._validateIncludedElement.call(options.model, include, tableNames, options);\n\n    if (include.duplicating === undefined) {\n      include.duplicating = include.association.isMultiAssociation;\n    }\n\n    include.hasDuplicating = include.hasDuplicating || include.duplicating;\n    include.hasRequired = include.hasRequired || include.required;\n\n    options.hasDuplicating = options.hasDuplicating || include.hasDuplicating;\n    options.hasRequired = options.hasRequired || include.required;\n\n    options.hasWhere = options.hasWhere || include.hasWhere || Boolean(include.where);\n\n    return include;\n  });\n\n  for (const include of options.include) {\n    include.hasParentWhere = options.hasParentWhere || Boolean(options.where);\n    include.hasParentRequired = options.hasParentRequired || Boolean(options.required);\n\n    if (include.subQuery !== false && options.hasDuplicating && options.topLimit) {\n      if (include.duplicating) {\n        include.subQuery = include.subQuery || false;\n        include.subQueryFilter = include.hasRequired;\n      } else {\n        include.subQuery = include.hasRequired;\n        include.subQueryFilter = false;\n      }\n    } else {\n      include.subQuery = include.subQuery || false;\n      if (include.duplicating) {\n        include.subQueryFilter = include.subQuery;\n      } else {\n        include.subQueryFilter = false;\n        include.subQuery =\n          include.subQuery ||\n          (include.hasParentRequired && include.hasRequired && !include.separate);\n      }\n    }\n\n    options.includeMap[include.as] = include;\n    options.includeNames.push(include.as);\n\n    // Set top level options\n    if (options.topModel === options.model && options.subQuery === undefined && options.topLimit) {\n      if (include.subQuery) {\n        options.subQuery = include.subQuery;\n      } else if (include.hasDuplicating) {\n        options.subQuery = true;\n      }\n    }\n\n    /* Legacy */\n    options.hasIncludeWhere =\n      options.hasIncludeWhere || include.hasIncludeWhere || Boolean(include.where);\n    options.hasIncludeRequired =\n      options.hasIncludeRequired || include.hasIncludeRequired || Boolean(include.required);\n\n    if (include.association.isMultiAssociation || include.hasMultiAssociation) {\n      options.hasMultiAssociation = true;\n    }\n\n    if (include.association.isSingleAssociation || include.hasSingleAssociation) {\n      options.hasSingleAssociation = true;\n    }\n  }\n\n  if (options.topModel === options.model && options.subQuery === undefined) {\n    options.subQuery = false;\n  }\n\n  return options;\n}\n\nexport function combineIncludes(a: any, b: any): any {\n  if (a == null) {\n    return b;\n  }\n\n  if (b == null) {\n    return a;\n  }\n\n  if (!Array.isArray(a) || !Array.isArray(b)) {\n    throw new TypeError(\n      'Includes should have already been normalized before calling this method, but it received something else than an array.',\n    );\n  }\n\n  const combinedIncludes = [...a];\n\n  for (const newInclude of b) {\n    const existingIndex = combinedIncludes.findIndex(include => {\n      if (!include.association || !newInclude.association) {\n        throw new TypeError('Include should have been normalized');\n      }\n\n      return include.association === newInclude.association;\n    });\n\n    if (existingIndex === -1) {\n      combinedIncludes.push(newInclude);\n      continue;\n    }\n\n    const ModelClass = newInclude.model;\n    // _assignOptions *must* be called on the class of the Include's Model,\n    //  otherwise the Include's includes won't be checked correctly.\n    ModelClass._assignOptions(combinedIncludes[existingIndex], newInclude);\n  }\n\n  return combinedIncludes;\n}\n\nexport function throwInvalidInclude(include: any): never {\n  throw new EagerLoadingError(`Invalid Include received. Include has to be either a Model, an Association, the name of an association, or a plain object compatible with IncludeOptions.\nGot ${NodeUtil.inspect(include)} instead`);\n}\n\nexport function setTransactionFromCls(options: Transactionable, sequelize: Sequelize): void {\n  if (\n    options.transaction &&\n    options.connection &&\n    options.connection !== options.transaction.getConnection()\n  ) {\n    throw new Error(\n      `You are using mismatching \"transaction\" and \"connection\" options. Please pass either one of them, or make sure they're both using the same connection.`,\n    );\n  }\n\n  if (options.transaction === undefined && options.connection == null) {\n    const currentTransaction = sequelize.getCurrentClsTransaction();\n    if (currentTransaction) {\n      options.transaction = currentTransaction;\n    }\n  }\n\n  if (options.connection) {\n    const clsTransaction = sequelize.getCurrentClsTransaction();\n    const transactionConnection = clsTransaction?.getConnectionIfExists();\n    if (transactionConnection && transactionConnection === options.connection) {\n      options.transaction = clsTransaction;\n    }\n  } else {\n    const connection = options.transaction?.getConnectionIfExists();\n    if (connection) {\n      options.connection = connection;\n    }\n  }\n}\n\nexport function conformIndex(index: IndexOptions): IndexOptions {\n  if (!index.fields) {\n    throw new Error('Missing \"fields\" property for index definition');\n  }\n\n  index = { ...index };\n\n  if (index.type && index.type.toLowerCase() === 'unique') {\n    index.unique = true;\n    delete index.type;\n  }\n\n  return index;\n}\n\nexport function getPrimaryKeyValueOrThrow(instance: Model, attributeName: string): unknown {\n  const attrVal = instance.get(attributeName, { raw: true });\n  if (attrVal == null) {\n    throw new TypeError(\n      `This model instance method needs to be able to identify the entity in a stable way, but this model instance is missing the value of its primary key \"${attributeName}\". Make sure that attribute was not excluded when retrieving the model from the database.`,\n    );\n  }\n\n  return attrVal;\n}\n\n/**\n * Returns a Where Object that can be used to uniquely select this instance, using the instance's primary keys.\n *\n * @param instance The instance for which the where options should be built.\n * @param checkVersion include version attribute in where hash\n * @param nullIfImpossible return null instead of throwing an error if the instance is missing its\n *   primary keys and therefore no Where object can be built.\n */\nexport function getModelPkWhere<M extends Model>(\n  instance: M,\n  checkVersion?: boolean,\n  nullIfImpossible?: boolean,\n): WhereAttributeHash<Attributes<M>> | null {\n  const modelDefinition = instance.modelDefinition;\n\n  if (modelDefinition.primaryKeysAttributeNames.size === 0) {\n    if (nullIfImpossible) {\n      return null;\n    }\n\n    assertHasPrimaryKey(modelDefinition);\n  }\n\n  const where = Object.create(null);\n\n  for (const attributeName of modelDefinition.primaryKeysAttributeNames) {\n    const attrVal = nullIfImpossible\n      ? instance.get(attributeName, { raw: true })\n      : getPrimaryKeyValueOrThrow(instance, attributeName);\n\n    // nullIfImpossible case\n    if (attrVal == null) {\n      return null;\n    }\n\n    where[attributeName] = attrVal;\n  }\n\n  const versionAttr = modelDefinition.versionAttributeName;\n  if (checkVersion && versionAttr) {\n    where[versionAttr] = instance.get(versionAttr, { raw: true });\n  }\n\n  return where;\n}\n\nexport function assertHasPrimaryKey(modelDefinition: ModelDefinition<any>) {\n  if (modelDefinition.primaryKeysAttributeNames.size === 0) {\n    throw new Error(\n      `This model instance method needs to be able to identify the entity in a stable way, but the model does not have a primary key attribute definition.\nEither add a primary key to this model, or use one of the following alternatives:\n\n- instance methods \"save\", \"update\", \"decrement\", \"increment\": Use the static \"update\" method instead.\n- instance method \"reload\": Use the static \"findOne\" method instead.\n- instance methods \"destroy\" and \"restore\": use the static \"destroy\" and \"restore\" methods instead.\n        `.trim(),\n    );\n  }\n}\n\nexport function assertHasWhereOptions(options: Filterable | undefined): void {\n  if (options?.where == null) {\n    throw new Error(\n      'As a safeguard, this method requires explicitly specifying a \"where\" option. If you actually mean to delete all rows in the table, set the option to a dummy condition such as sql`1 = 1`.',\n    );\n  }\n}\n\nexport function ensureOptionsAreImmutable<T extends object>(options: T): T {\n  if (isDevEnv()) {\n    // Users should not mutate any mutable value inside `options`, and instead mutate the `options` object directly\n    // This ensures `options` remains immutable while limiting ourselves to a shallow clone in production,\n    // improving performance.\n    return freezeDescendants(cloneDeepPlainValues(options, true));\n  }\n\n  return options;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAwD;AACxD,uBAAqB;AAGrB,oBAAkC;AAIlC,mBAAyB;AACzB,yBAA8B;AAOvB,SAAS,0BAA0B,SAAc,aAAkB,CAAC,GAAG;AAC5E,MAAI,KAAC,kCAAc,QAAQ,KAAK,GAAG;AACjC,UAAM,IAAI,UAAU,uDAAuD;AAAA,EAC7E;AAEA,QAAM,gBAAgB,QAAQ;AAE9B,UAAQ,eAAe,CAAC;AACxB,UAAQ,aAAa,CAAC;AAGtB,UAAQ,uBAAuB;AAC/B,UAAQ,sBAAsB;AAE9B,MAAI,CAAC,QAAQ,QAAQ;AACnB,YAAQ,WAAW,QAAQ;AAC3B,YAAQ,WAAW,QAAQ;AAAA,EAC7B;AAEA,UAAQ,UAAU,QAAQ,QAAQ,IAAI,CAAC,YAAiB;AACtD,cAAU,cAAc,gBAAgB,SAAS,QAAQ,KAAK;AAC9D,YAAQ,SAAS;AACjB,YAAQ,WAAW,QAAQ;AAE3B,kBAAc,yBAAyB,KAAK,QAAQ,OAAO,SAAS,YAAY,OAAO;AAEvF,QAAI,QAAQ,gBAAgB,QAAW;AACrC,cAAQ,cAAc,QAAQ,YAAY;AAAA,IAC5C;AAEA,YAAQ,iBAAiB,QAAQ,kBAAkB,QAAQ;AAC3D,YAAQ,cAAc,QAAQ,eAAe,QAAQ;AAErD,YAAQ,iBAAiB,QAAQ,kBAAkB,QAAQ;AAC3D,YAAQ,cAAc,QAAQ,eAAe,QAAQ;AAErD,YAAQ,WAAW,QAAQ,YAAY,QAAQ,YAAY,QAAQ,QAAQ,KAAK;AAEhF,WAAO;AAAA,EACT,CAAC;AAED,aAAW,WAAW,QAAQ,SAAS;AACrC,YAAQ,iBAAiB,QAAQ,kBAAkB,QAAQ,QAAQ,KAAK;AACxE,YAAQ,oBAAoB,QAAQ,qBAAqB,QAAQ,QAAQ,QAAQ;AAEjF,QAAI,QAAQ,aAAa,SAAS,QAAQ,kBAAkB,QAAQ,UAAU;AAC5E,UAAI,QAAQ,aAAa;AACvB,gBAAQ,WAAW,QAAQ,YAAY;AACvC,gBAAQ,iBAAiB,QAAQ;AAAA,MACnC,OAAO;AACL,gBAAQ,WAAW,QAAQ;AAC3B,gBAAQ,iBAAiB;AAAA,MAC3B;AAAA,IACF,OAAO;AACL,cAAQ,WAAW,QAAQ,YAAY;AACvC,UAAI,QAAQ,aAAa;AACvB,gBAAQ,iBAAiB,QAAQ;AAAA,MACnC,OAAO;AACL,gBAAQ,iBAAiB;AACzB,gBAAQ,WACN,QAAQ,YACP,QAAQ,qBAAqB,QAAQ,eAAe,CAAC,QAAQ;AAAA,MAClE;AAAA,IACF;AAEA,YAAQ,WAAW,QAAQ,EAAE,IAAI;AACjC,YAAQ,aAAa,KAAK,QAAQ,EAAE;AAGpC,QAAI,QAAQ,aAAa,QAAQ,SAAS,QAAQ,aAAa,UAAa,QAAQ,UAAU;AAC5F,UAAI,QAAQ,UAAU;AACpB,gBAAQ,WAAW,QAAQ;AAAA,MAC7B,WAAW,QAAQ,gBAAgB;AACjC,gBAAQ,WAAW;AAAA,MACrB;AAAA,IACF;AAGA,YAAQ,kBACN,QAAQ,mBAAmB,QAAQ,mBAAmB,QAAQ,QAAQ,KAAK;AAC7E,YAAQ,qBACN,QAAQ,sBAAsB,QAAQ,sBAAsB,QAAQ,QAAQ,QAAQ;AAEtF,QAAI,QAAQ,YAAY,sBAAsB,QAAQ,qBAAqB;AACzE,cAAQ,sBAAsB;AAAA,IAChC;AAEA,QAAI,QAAQ,YAAY,uBAAuB,QAAQ,sBAAsB;AAC3E,cAAQ,uBAAuB;AAAA,IACjC;AAAA,EACF;AAEA,MAAI,QAAQ,aAAa,QAAQ,SAAS,QAAQ,aAAa,QAAW;AACxE,YAAQ,WAAW;AAAA,EACrB;AAEA,SAAO;AACT;AAEO,SAAS,gBAAgB,GAAQ,GAAa;AACnD,MAAI,KAAK,MAAM;AACb,WAAO;AAAA,EACT;AAEA,MAAI,KAAK,MAAM;AACb,WAAO;AAAA,EACT;AAEA,MAAI,CAAC,MAAM,QAAQ,CAAC,KAAK,CAAC,MAAM,QAAQ,CAAC,GAAG;AAC1C,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EACF;AAEA,QAAM,mBAAmB,CAAC,GAAG,CAAC;AAE9B,aAAW,cAAc,GAAG;AAC1B,UAAM,gBAAgB,iBAAiB,UAAU,aAAW;AAC1D,UAAI,CAAC,QAAQ,eAAe,CAAC,WAAW,aAAa;AACnD,cAAM,IAAI,UAAU,qCAAqC;AAAA,MAC3D;AAEA,aAAO,QAAQ,gBAAgB,WAAW;AAAA,IAC5C,CAAC;AAED,QAAI,kBAAkB,IAAI;AACxB,uBAAiB,KAAK,UAAU;AAChC;AAAA,IACF;AAEA,UAAM,aAAa,WAAW;AAG9B,eAAW,eAAe,iBAAiB,aAAa,GAAG,UAAU;AAAA,EACvE;AAEA,SAAO;AACT;AAEO,SAAS,oBAAoB,SAAqB;AACvD,QAAM,IAAI,gCAAkB;AAAA,MACxB,iBAAAA,QAAS,QAAQ,OAAO,WAAW;AACzC;AAEO,SAAS,sBAAsB,SAA0B,WAA4B;AAC1F,MACE,QAAQ,eACR,QAAQ,cACR,QAAQ,eAAe,QAAQ,YAAY,cAAc,GACzD;AACA,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EACF;AAEA,MAAI,QAAQ,gBAAgB,UAAa,QAAQ,cAAc,MAAM;AACnE,UAAM,qBAAqB,UAAU,yBAAyB;AAC9D,QAAI,oBAAoB;AACtB,cAAQ,cAAc;AAAA,IACxB;AAAA,EACF;AAEA,MAAI,QAAQ,YAAY;AACtB,UAAM,iBAAiB,UAAU,yBAAyB;AAC1D,UAAM,wBAAwB,gBAAgB,sBAAsB;AACpE,QAAI,yBAAyB,0BAA0B,QAAQ,YAAY;AACzE,cAAQ,cAAc;AAAA,IACxB;AAAA,EACF,OAAO;AACL,UAAM,aAAa,QAAQ,aAAa,sBAAsB;AAC9D,QAAI,YAAY;AACd,cAAQ,aAAa;AAAA,IACvB;AAAA,EACF;AACF;AAEO,SAAS,aAAa,OAAmC;AAC9D,MAAI,CAAC,MAAM,QAAQ;AACjB,UAAM,IAAI,MAAM,gDAAgD;AAAA,EAClE;AAEA,UAAQ,EAAE,GAAG,MAAM;AAEnB,MAAI,MAAM,QAAQ,MAAM,KAAK,YAAY,MAAM,UAAU;AACvD,UAAM,SAAS;AACf,WAAO,MAAM;AAAA,EACf;AAEA,SAAO;AACT;AAEO,SAAS,0BAA0B,UAAiB,eAAgC;AACzF,QAAM,UAAU,SAAS,IAAI,eAAe,EAAE,KAAK,KAAK,CAAC;AACzD,MAAI,WAAW,MAAM;AACnB,UAAM,IAAI;AAAA,MACR,wJAAwJ;AAAA,IAC1J;AAAA,EACF;AAEA,SAAO;AACT;AAUO,SAAS,gBACd,UACA,cACA,kBAC0C;AAC1C,QAAM,kBAAkB,SAAS;AAEjC,MAAI,gBAAgB,0BAA0B,SAAS,GAAG;AACxD,QAAI,kBAAkB;AACpB,aAAO;AAAA,IACT;AAEA,wBAAoB,eAAe;AAAA,EACrC;AAEA,QAAM,QAAQ,uBAAO,OAAO,IAAI;AAEhC,aAAW,iBAAiB,gBAAgB,2BAA2B;AACrE,UAAM,UAAU,mBACZ,SAAS,IAAI,eAAe,EAAE,KAAK,KAAK,CAAC,IACzC,0BAA0B,UAAU,aAAa;AAGrD,QAAI,WAAW,MAAM;AACnB,aAAO;AAAA,IACT;AAEA,UAAM,aAAa,IAAI;AAAA,EACzB;AAEA,QAAM,cAAc,gBAAgB;AACpC,MAAI,gBAAgB,aAAa;AAC/B,UAAM,WAAW,IAAI,SAAS,IAAI,aAAa,EAAE,KAAK,KAAK,CAAC;AAAA,EAC9D;AAEA,SAAO;AACT;AAEO,SAAS,oBAAoB,iBAAuC;AACzE,MAAI,gBAAgB,0BAA0B,SAAS,GAAG;AACxD,UAAM,IAAI;AAAA,MACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAMI,KAAK;AAAA,IACX;AAAA,EACF;AACF;AAEO,SAAS,sBAAsB,SAAuC;AAC3E,MAAI,SAAS,SAAS,MAAM;AAC1B,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EACF;AACF;AAEO,SAAS,0BAA4C,SAAe;AACzE,UAAI,uBAAS,GAAG;AAId,eAAO,oCAAkB,mCAAqB,SAAS,IAAI,CAAC;AAAA,EAC9D;AAEA,SAAO;AACT;",
  "names": ["NodeUtil"]
}
