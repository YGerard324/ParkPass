{
  "version": 3,
  "sources": ["../src/deferrable.ts"],
  "sourcesContent": ["import { EMPTY_ARRAY } from '@sequelize/utils';\nimport isEqual from 'lodash/isEqual';\nimport { classToInvokable } from './utils/class-to-invokable.js';\n\n/**\n * Can be used to make foreign key constraints deferrable.\n * This is only supported in PostgreSQL.\n *\n * The foreign keys can be configured like this. It will create a foreign key\n * that will check the constraints immediately when the data was inserted.\n *\n * ```js\n * class MyModel extends Model {}\n * MyModel.init({\n *   foreign_id: {\n *     type: DataTypes.INTEGER,\n *     references: {\n *       model: OtherModel,\n *       key: 'id',\n *       deferrable: Sequelize.Deferrable.INITIALLY_IMMEDIATE\n *     }\n *   }\n * }, { sequelize });\n * ```\n */\nexport enum Deferrable {\n  INITIALLY_DEFERRED = 'INITIALLY_DEFERRED',\n  INITIALLY_IMMEDIATE = 'INITIALLY_IMMEDIATE',\n  NOT = 'NOT',\n}\n\n/**\n * Can be used to set constraints deferrable within a transaction.\n * This is only supported in PostgreSQL.\n *\n * The constraints can be configured to be deferrable in a transaction like this.\n * It will trigger a query once the transaction has been started and set the constraints\n * to be checked at the very end of the transaction.\n *\n * ```js\n * sequelize.transaction({\n *   constraintChecking: Sequelize.ConstraintChecking.DEFERRED\n * });\n * ```\n */\nexport class ConstraintChecking {\n  toString() {\n    return this.constructor.name;\n  }\n\n  isEqual(_other: unknown): boolean {\n    throw new Error('isEqual implementation missing');\n  }\n\n  static toString() {\n    return this.name;\n  }\n\n  get constraints(): readonly string[] {\n    throw new Error('constraints getter implementation missing');\n  }\n\n  /**\n   * Will trigger an additional query at the beginning of a\n   * transaction which sets the constraints to deferred.\n   */\n  static readonly DEFERRED = classToInvokable(\n    class DEFERRED extends ConstraintChecking {\n      readonly #constraints: readonly string[];\n\n      /**\n       * @param constraints An array of constraint names. Will defer all constraints by default.\n       */\n      constructor(constraints: readonly string[] = EMPTY_ARRAY) {\n        super();\n        this.#constraints = Object.freeze([...constraints]);\n      }\n\n      isEqual(other: unknown): boolean {\n        return other instanceof DEFERRED && isEqual(this.#constraints, other.#constraints);\n      }\n\n      get constraints(): readonly string[] {\n        return this.#constraints;\n      }\n    },\n  );\n\n  /**\n   * Will trigger an additional query at the beginning of a\n   * transaction which sets the constraints to immediately.\n   */\n  static readonly IMMEDIATE = classToInvokable(\n    class IMMEDIATE extends ConstraintChecking {\n      readonly #constraints: readonly string[];\n\n      /**\n       * @param constraints An array of constraint names. Will defer all constraints by default.\n       */\n      constructor(constraints: readonly string[] = EMPTY_ARRAY) {\n        super();\n        this.#constraints = Object.freeze([...constraints]);\n      }\n\n      isEqual(other: unknown): boolean {\n        return other instanceof IMMEDIATE && isEqual(this.#constraints, other.#constraints);\n      }\n\n      get constraints(): readonly string[] {\n        return this.#constraints;\n      }\n    },\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAA4B;AAC5B,qBAAoB;AACpB,gCAAiC;AAuB1B,IAAK,aAAL,kBAAKA,gBAAL;AACL,EAAAA,YAAA,wBAAqB;AACrB,EAAAA,YAAA,yBAAsB;AACtB,EAAAA,YAAA,SAAM;AAHI,SAAAA;AAAA,GAAA;AAoBL,MAAM,mBAAmB;AAAA,EAC9B,WAAW;AACT,WAAO,KAAK,YAAY;AAAA,EAC1B;AAAA,EAEA,QAAQ,QAA0B;AAChC,UAAM,IAAI,MAAM,gCAAgC;AAAA,EAClD;AAAA,EAEA,OAAO,WAAW;AAChB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,cAAiC;AACnC,UAAM,IAAI,MAAM,2CAA2C;AAAA,EAC7D;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAgB,eAAW;AAAA,IACzB,MAAM,iBAAiB,mBAAmB;AAAA,MAC/B;AAAA;AAAA;AAAA;AAAA,MAKT,YAAY,cAAiC,0BAAa;AACxD,cAAM;AACN,aAAK,eAAe,OAAO,OAAO,CAAC,GAAG,WAAW,CAAC;AAAA,MACpD;AAAA,MAEA,QAAQ,OAAyB;AAC/B,eAAO,iBAAiB,gBAAY,eAAAC,SAAQ,KAAK,cAAc,MAAM,YAAY;AAAA,MACnF;AAAA,MAEA,IAAI,cAAiC;AACnC,eAAO,KAAK;AAAA,MACd;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAgB,gBAAY;AAAA,IAC1B,MAAM,kBAAkB,mBAAmB;AAAA,MAChC;AAAA;AAAA;AAAA;AAAA,MAKT,YAAY,cAAiC,0BAAa;AACxD,cAAM;AACN,aAAK,eAAe,OAAO,OAAO,CAAC,GAAG,WAAW,CAAC;AAAA,MACpD;AAAA,MAEA,QAAQ,OAAyB;AAC/B,eAAO,iBAAiB,iBAAa,eAAAA,SAAQ,KAAK,cAAc,MAAM,YAAY;AAAA,MACpF;AAAA,MAEA,IAAI,cAAiC;AACnC,eAAO,KAAK;AAAA,MACd;AAAA,IACF;AAAA,EACF;AACF;",
  "names": ["Deferrable", "isEqual"]
}
