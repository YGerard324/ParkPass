{
  "version": 3,
  "sources": ["../src/model-repository.types.ts"],
  "sourcesContent": ["import type { StrictRequiredBy } from '@sequelize/utils';\nimport type { QiBulkDeleteOptions } from './abstract-dialect/query-interface.types.js';\nimport type { NewHookable } from './hooks.js';\nimport type { Attributes, Model } from './model.js';\n\nexport enum ManualOnDelete {\n  /**\n   * Only replicates the behavior of ON DELETE in JS for soft deletions,\n   * otherwise is equivalent to \"none\".\n   */\n  paranoid = 'paranoid',\n\n  /**\n   * Lets the database delete the cascading instances, does nothing in JS.\n   * Most efficient, but not compatible with soft deletions.\n   */\n  none = 'none',\n\n  /**\n   * Pre-deletes every cascading model in JS before deleting the current instance.\n   * Useful if you need to trigger the JS hooks for cascading deletes,\n   * or if foreign key constraints are disabled in the database.\n   *\n   * This is the least efficient option.\n   */\n  all = 'all',\n}\n\nexport interface CommonDestroyOptions {\n  /**\n   * If set to true, paranoid models will actually be deleted instead of soft deleted.\n   */\n  hardDelete?: boolean | undefined;\n\n  /**\n   * Manually handles the behavior of ON DELETE in JavaScript, instead of using the native database ON DELETE behavior.\n   * This option is useful when:\n   * - The deletion is a soft deletion.\n   * - You wish to run JS delete hooks for the cascading models.\n   *\n   * @default 'paranoid'\n   */\n  manualOnDelete?: ManualOnDelete | undefined;\n}\n\n/**\n * Used by {@link ModelRepository#_UNSTABLE_destroy}\n */\nexport interface DestroyManyOptions\n  extends NewHookable<'beforeDestroyMany' | 'afterDestroyMany'>,\n    Omit<QiBulkDeleteOptions, 'where' | 'limit'>,\n    CommonDestroyOptions {}\n\n/**\n * Used by {@link ModelRepository#_UNSTABLE_bulkDestroy}\n */\nexport interface BulkDestroyOptions<TModel extends Model>\n  extends NewHookable<'_UNSTABLE_beforeBulkDestroy' | '_UNSTABLE_afterBulkDestroy'>,\n    StrictRequiredBy<QiBulkDeleteOptions<Attributes<TModel>>, 'where'>,\n    CommonDestroyOptions {}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAKO,IAAK,iBAAL,kBAAKA,oBAAL;AAKL,EAAAA,gBAAA,cAAW;AAMX,EAAAA,gBAAA,UAAO;AASP,EAAAA,gBAAA,SAAM;AApBI,SAAAA;AAAA,GAAA;",
  "names": ["ManualOnDelete"]
}
