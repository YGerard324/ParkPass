{
  "version": 3,
  "sources": ["../src/transaction.ts"],
  "sourcesContent": ["import type { StrictRequiredBy } from '@sequelize/utils';\nimport { EMPTY_OBJECT } from '@sequelize/utils';\nimport assert from 'node:assert';\nimport type { Class } from 'type-fest';\nimport type { AbstractConnection, ConstraintChecking, Logging, Sequelize } from './index.js';\n\ntype TransactionCallback = (transaction: Transaction) => void | Promise<void>;\n\n/**\n * This an option for {@link QueryRawOptions} which indicates if the query completes the transaction\n *\n * @private do not expose outside sequelize\n */\nexport const COMPLETES_TRANSACTION = Symbol('completesTransaction');\n\n/**\n * The transaction object is used to identify a running transaction.\n * It is created by calling `Sequelize.transaction()`.\n * To run a query under a transaction, you should pass the transaction in the options object.\n *\n * @class Transaction\n * @see {Sequelize.transaction}\n */\nexport class Transaction {\n  sequelize: Sequelize;\n\n  readonly #afterCommitHooks = new Set<TransactionCallback>();\n  readonly #afterRollbackHooks = new Set<TransactionCallback>();\n  readonly #afterHooks = new Set<TransactionCallback>();\n\n  readonly #name: string;\n  readonly #savepoints = new Map<string, Transaction>();\n  readonly options: Readonly<NormalizedTransactionOptions>;\n  readonly parent: Transaction | null;\n  readonly id: string;\n  #finished: 'commit' | 'rollback' | undefined;\n  #connection: AbstractConnection | undefined;\n\n  /**\n   * Creates a new transaction instance\n   *\n   * @param sequelize A configured sequelize Instance\n   * @param options The transaction options.\n   */\n  constructor(sequelize: Sequelize, options: TransactionOptions) {\n    this.sequelize = sequelize;\n\n    // get dialect specific transaction options\n    const generateTransactionId = this.sequelize.dialect.queryGenerator.generateTransactionId;\n\n    const normalizedOptions = normalizeTransactionOptions(this.sequelize, options);\n    this.parent = normalizedOptions.transaction ?? null;\n    delete normalizedOptions.transaction;\n\n    this.options = Object.freeze(normalizedOptions);\n\n    if (this.parent) {\n      this.id = this.parent.id;\n      this.#name = `${this.id}-sp-${this.parent.#savepoints.size}`;\n      this.parent.#savepoints.set(this.#name, this);\n    } else {\n      const id = generateTransactionId();\n      this.id = id;\n      this.#name = id;\n    }\n  }\n\n  get finished(): 'commit' | 'rollback' | undefined {\n    return this.#finished;\n  }\n\n  getConnection(): AbstractConnection {\n    if (!this.#connection) {\n      throw new Error('This transaction is not bound to a connection.');\n    }\n\n    return this.#connection;\n  }\n\n  getConnectionIfExists(): AbstractConnection | undefined {\n    return this.#connection;\n  }\n\n  /**\n   * Commit the transaction.\n   */\n  async commit(): Promise<void> {\n    if (this.#finished) {\n      throw new Error(\n        `Transaction cannot be committed because it has been finished with state: ${this.#finished}`,\n      );\n    }\n\n    this.#finished = 'commit';\n    if (this.parent) {\n      // Savepoints cannot be committed\n      return;\n    }\n\n    try {\n      await this.sequelize.queryInterface._commitTransaction(this, this.options);\n\n      await this.#dispatchHooks(this.#afterCommitHooks);\n      await this.#dispatchHooks(this.#afterHooks);\n\n      this.#cleanup();\n    } catch (error) {\n      console.warn(\n        `Committing transaction ${this.id} failed with error ${error instanceof Error ? JSON.stringify(error.message) : String(error)}. We are killing its connection as it is now in an undetermined state.`,\n      );\n      await this.#forceCleanup();\n\n      throw error;\n    } finally {\n      this.#finished = 'commit';\n    }\n  }\n\n  /**\n   * Rollback (abort) the transaction\n   */\n  async rollback(): Promise<void> {\n    if (this.#finished) {\n      throw new Error(\n        `Transaction cannot be rolled back because it has been finished with state: ${this.finished}`,\n      );\n    }\n\n    if (!this.#connection) {\n      throw new Error('Transaction cannot be rolled back because it never started');\n    }\n\n    this.#finished = 'rollback';\n    try {\n      if (this.parent) {\n        await this.sequelize.queryInterface._rollbackSavepoint(this.parent, {\n          ...this.options,\n          savepointName: this.#name,\n        });\n      } else {\n        await this.sequelize.queryInterface._rollbackTransaction(this, this.options);\n      }\n\n      await this.#dispatchHooks(this.#afterRollbackHooks);\n      await this.#dispatchHooks(this.#afterHooks);\n\n      this.#cleanup();\n    } catch (error) {\n      console.warn(\n        `Rolling back transaction ${this.id} failed with error ${error instanceof Error ? JSON.stringify(error.message) : String(error)}. We are killing its connection as it is now in an undetermined state.`,\n      );\n      await this.#forceCleanup();\n\n      throw error;\n    }\n  }\n\n  async #dispatchHooks(hooks: Set<TransactionCallback>): Promise<void> {\n    for (const hook of hooks) {\n      // eslint-disable-next-line no-await-in-loop -- sequentially call hooks\n      await Reflect.apply(hook, this, [this]);\n    }\n  }\n\n  /**\n   * Called to acquire a connection to use and set the correct options on the connection.\n   * We should ensure all the environment that's set up is cleaned up in `cleanup()` below.\n   */\n  async prepareEnvironment(): Promise<void> {\n    let connection;\n    if (this.parent) {\n      connection = this.parent.#connection;\n    } else {\n      connection = await this.sequelize.pool.acquire({\n        type: this.options.readOnly ? 'read' : 'write',\n      });\n    }\n\n    assert(connection != null, 'Transaction failed to acquire Connection.');\n\n    connection.uuid = this.id;\n\n    this.#connection = connection;\n\n    try {\n      await this.#begin();\n      await this.#setDeferrable();\n    } catch (error) {\n      try {\n        await this.rollback();\n      } finally {\n        throw error; // eslint-disable-line no-unsafe-finally -- while this will mask the error thrown by `rollback`, the previous error is more important.\n      }\n    }\n  }\n\n  async #setDeferrable(): Promise<void> {\n    if (this.options.constraintChecking) {\n      await this.sequelize.queryInterface.deferConstraints(this.options.constraintChecking, {\n        transaction: this,\n      });\n    }\n  }\n\n  /**\n   * Changes the isolation level of the transaction.\n   *\n   * @param isolationLevel\n   */\n  async setIsolationLevel(isolationLevel: IsolationLevel): Promise<void> {\n    await this.sequelize.queryInterface._setIsolationLevel(this, {\n      ...this.options,\n      isolationLevel,\n    });\n  }\n\n  /**\n   * Begins a transaction\n   */\n  async #begin(): Promise<void> {\n    const queryInterface = this.sequelize.queryInterface;\n\n    if (this.parent) {\n      return queryInterface._createSavepoint(this.parent, {\n        ...this.options,\n        savepointName: this.#name,\n      });\n    }\n\n    await queryInterface._startTransaction(this, {\n      ...this.options,\n      readOnly: this.sequelize.dialect.supports.startTransaction.readOnly\n        ? this.options.readOnly\n        : false,\n      transactionName: this.#name,\n    });\n  }\n\n  #cleanup(): void {\n    // Don't release the connection if there's a parent transaction or\n    // if we've already cleaned up\n    if (this.parent || this.#connection?.uuid === undefined) {\n      return;\n    }\n\n    this.sequelize.pool.release(this.#connection);\n    this.#connection.uuid = undefined;\n    this.#connection = undefined;\n  }\n\n  /**\n   * Kills the connection this transaction uses.\n   * Used as a last resort, for instance because COMMIT or ROLLBACK resulted in an error\n   * and the transaction is left in a broken state,\n   * and releasing the connection to the pool would be dangerous.\n   */\n  async #forceCleanup(): Promise<void> {\n    // Don't release the connection if there's a parent transaction or\n    // if we've already cleaned up\n    if (this.parent || this.#connection?.uuid === undefined) {\n      return;\n    }\n\n    this.#connection.uuid = undefined;\n\n    const connection = this.#connection;\n    this.#connection = undefined;\n\n    await this.sequelize.pool.destroy(connection);\n  }\n\n  /**\n   * Adds a hook that is run after a transaction is committed.\n   *\n   * @param callback A callback function that is called with the transaction\n   */\n  afterCommit(callback: TransactionCallback): this {\n    if (typeof callback !== 'function') {\n      throw new TypeError('\"callback\" must be a function');\n    }\n\n    this.#afterCommitHooks.add(callback);\n\n    return this;\n  }\n\n  /**\n   * Adds a hook that is run after a transaction is rolled back.\n   *\n   * @param callback A callback function that is called with the transaction\n   */\n  afterRollback(callback: TransactionCallback): this {\n    if (typeof callback !== 'function') {\n      throw new TypeError('\"callback\" must be a function');\n    }\n\n    this.#afterRollbackHooks.add(callback);\n\n    return this;\n  }\n\n  /**\n   * Adds a hook that is run after a transaction completes, no matter if it was committed or rolled back.\n   *\n   * @param callback A callback function that is called with the transaction\n   */\n  afterTransaction(callback: TransactionCallback): this {\n    if (typeof callback !== 'function') {\n      throw new TypeError('\"callback\" must be a function');\n    }\n\n    this.#afterHooks.add(callback);\n\n    return this;\n  }\n\n  /**\n   * Types can be set per-transaction by passing `options.type` to `sequelize.transaction`.\n   * Default to `DEFERRED` but you can override the default type by passing `options.transactionType` in `new Sequelize`.\n   * Sqlite only.\n   *\n   * Pass in the desired level as the first argument:\n   *\n   * @example\n   * try {\n   *   await sequelize.transaction({ type: Sequelize.Transaction.TYPES.EXCLUSIVE }, transaction => {\n   *      // your transactions\n   *   });\n   *   // transaction has been committed. Do something after the commit if required.\n   * } catch(err) {\n   *   // do something with the err.\n   * }\n   *\n   * @property DEFERRED\n   * @property IMMEDIATE\n   * @property EXCLUSIVE\n   *\n   * @deprecated use the {@link TransactionType} export\n   */\n  static get TYPES() {\n    return TransactionType;\n  }\n\n  /**\n   * Isolation levels can be set per-transaction by passing `options.isolationLevel` to `sequelize.transaction`.\n   * Sequelize uses the default isolation level of the database, you can override this by passing `options.isolationLevel` in Sequelize constructor options.\n   *\n   * Pass in the desired level as the first argument:\n   *\n   * @example\n   * try {\n   *   const result = await sequelize.transaction({isolationLevel: Sequelize.Transaction.ISOLATION_LEVELS.SERIALIZABLE}, transaction => {\n   *     // your transactions\n   *   });\n   *   // transaction has been committed. Do something after the commit if required.\n   * } catch(err) {\n   *   // do something with the err.\n   * }\n   *\n   * @property READ_UNCOMMITTED\n   * @property READ_COMMITTED\n   * @property REPEATABLE_READ\n   * @property SERIALIZABLE\n   *\n   * @deprecated use the {@link IsolationLevel} export\n   */\n  static get ISOLATION_LEVELS() {\n    return IsolationLevel;\n  }\n\n  /**\n   * Possible options for row locking. Used in conjunction with `find` calls:\n   *\n   * @example\n   * // t1 is a transaction\n   * Model.findAll({\n   *   where: ...,\n   *   transaction: t1,\n   *   lock: t1.LOCK...\n   * });\n   *\n   * @example Postgres also supports specific locks while eager loading by using OF:\n   * ```ts\n   * UserModel.findAll({\n   *   where: ...,\n   *   include: [TaskModel, ...],\n   *   transaction: t1,\n   *   lock: {\n   *     level: t1.LOCK...,\n   *     of: UserModel\n   *   }\n   * });\n   * ```\n   *\n   * UserModel will be locked but TaskModel won't!\n   *\n   * @example You can also skip locked rows:\n   * ```ts\n   * // t1 is a transaction\n   * Model.findAll({\n   *   where: ...,\n   *   transaction: t1,\n   *   lock: true,\n   *   skipLocked: true\n   * });\n   * ```\n   *\n   * The query will now return any rows that aren't locked by another transaction\n   *\n   * @returns possible options for row locking\n   * @property UPDATE\n   * @property SHARE\n   * @property KEY_SHARE Postgres 9.3+ only\n   * @property NO_KEY_UPDATE Postgres 9.3+ only\n   *\n   * @deprecated use the {@link Lock} export\n   */\n  static get LOCK() {\n    return Lock;\n  }\n\n  /**\n   * Same as {@link Transaction.LOCK}, but can also be called on instances of\n   * transactions to get possible options for row locking directly from the\n   * instance.\n   *\n   * @deprecated use the {@link Lock} export\n   */\n  get LOCK() {\n    return Lock;\n  }\n\n  /**\n   * Get the root transaction if nested, or self if this is a root transaction\n   */\n  get rootTransaction(): Transaction {\n    if (this.parent !== null) {\n      return this.parent.rootTransaction;\n    }\n\n    return this;\n  }\n}\n\n/**\n * Isolations levels can be set per-transaction by passing `options.isolationLevel` to `sequelize.transaction`.\n * Default to `REPEATABLE_READ` but you can override the default isolation level by passing `options.isolationLevel` in `new Sequelize`.\n *\n * The possible isolations levels to use when starting a transaction:\n *\n * ```js\n * {\n *   READ_UNCOMMITTED: \"READ UNCOMMITTED\",\n *   READ_COMMITTED: \"READ COMMITTED\",\n *   REPEATABLE_READ: \"REPEATABLE READ\",\n *   SERIALIZABLE: \"SERIALIZABLE\"\n * }\n * ```\n *\n * Pass in the desired level as the first argument:\n *\n * ```js\n * try {\n *   await sequelize.transaction({isolationLevel: Sequelize.Transaction.SERIALIZABLE}, transaction => {\n *      // your transactions\n *   });\n *   // transaction has been committed. Do something after the commit if required.\n * } catch(err) {\n *   // do something with the err.\n * }\n * ```\n */\nexport enum IsolationLevel {\n  READ_UNCOMMITTED = 'READ UNCOMMITTED',\n  READ_COMMITTED = 'READ COMMITTED',\n  REPEATABLE_READ = 'REPEATABLE READ',\n  SERIALIZABLE = 'SERIALIZABLE',\n}\n\nexport enum TransactionType {\n  DEFERRED = 'DEFERRED',\n  IMMEDIATE = 'IMMEDIATE',\n  EXCLUSIVE = 'EXCLUSIVE',\n}\n\n/**\n * Possible options for row locking. Used in conjunction with `find` calls:\n *\n * Usage:\n * ```js\n * import { LOCK } from '@sequelize/core';\n *\n * Model.findAll({\n *   transaction,\n *   lock: LOCK.UPDATE,\n * });\n * ```\n *\n * Postgres also supports specific locks while eager loading by using OF:\n * ```js\n * import { LOCK } from '@sequelize/core';\n *\n * UserModel.findAll({\n *   transaction,\n *   lock: {\n *     level: LOCK.KEY_SHARE,\n *     of: UserModel,\n *   },\n * });\n * ```\n * UserModel will be locked but other models won't be!\n *\n * [Read more on transaction locks here](https://sequelize.org/docs/v7/other-topics/transactions/#locks)\n */\nexport enum Lock {\n  UPDATE = 'UPDATE',\n  SHARE = 'SHARE',\n  /**\n   * Postgres 9.3+ only\n   */\n  KEY_SHARE = 'KEY SHARE',\n  /**\n   * Postgres 9.3+ only\n   */\n  NO_KEY_UPDATE = 'NO KEY UPDATE',\n}\n\nexport enum TransactionNestMode {\n  /**\n   * In this mode, nesting a transaction block in another will reuse the parent transaction\n   * if its options are compatible (or throw an error otherwise).\n   *\n   * This is the default mode.\n   */\n  reuse = 'reuse',\n\n  /**\n   * In this mode, nesting a transaction block will cause the creation of a SAVEPOINT\n   * on the current transaction if the options provided to the nested transaction block are compatible with the parent one.\n   */\n  savepoint = 'savepoint',\n\n  /**\n   * In this mode, nesting a transaction block will always create a new transaction, in a separate connection.\n   * This mode is equivalent to setting the \"transaction\" option to \"null\" in the nested transaction block.\n   *\n   * Be very careful when using this mode, as it can easily lead to transaction deadlocks if used improperly.\n   */\n  separate = 'separate',\n}\n\n/**\n * Options provided when the transaction is created\n */\nexport interface TransactionOptions extends Logging {\n  /**\n   * Whether this transaction will only be used to read data.\n   * Used to determine whether sequelize is allowed to use a read replication server.\n   */\n  readOnly?: boolean | undefined;\n\n  /**\n   * Sets the isolation level of the transaction.\n   */\n  isolationLevel?: IsolationLevel | null | undefined;\n\n  /**\n   * Sets the type of the transaction. Sqlite only\n   */\n  type?: TransactionType | undefined;\n\n  /**\n   * Sets the constraints to be deferred or immediately checked. PostgreSQL only\n   */\n  constraintChecking?: ConstraintChecking | Class<ConstraintChecking> | undefined;\n\n  /**\n   * Parent transaction.\n   * Will be retrieved from CLS automatically if not provided or if null.\n   */\n  transaction?: Transaction | null | undefined;\n}\n\nexport type NormalizedTransactionOptions = StrictRequiredBy<\n  Omit<TransactionOptions, 'constraintChecking' | 'type'>,\n  'isolationLevel' | 'readOnly'\n> & {\n  constraintChecking?: ConstraintChecking | undefined;\n  transactionType?: TransactionType | undefined;\n};\n\n/**\n * Options accepted by {@link Sequelize#transaction}.\n */\nexport interface ManagedTransactionOptions extends TransactionOptions {\n  /**\n   * How the transaction block should behave if a parent transaction block exists.\n   */\n  nestMode?: TransactionNestMode;\n}\n\nexport function normalizeTransactionOptions(\n  sequelize: Sequelize,\n  options: TransactionOptions = EMPTY_OBJECT,\n): NormalizedTransactionOptions {\n  assertSupportedTransactionOptions(sequelize, options);\n\n  return {\n    ...options,\n    transactionType:\n      options.type ??\n      (sequelize.dialect.supports.startTransaction.transactionType\n        ? sequelize.options.transactionType\n        : undefined),\n    isolationLevel:\n      options.isolationLevel === undefined\n        ? sequelize.options.isolationLevel ?? null\n        : options.isolationLevel,\n    readOnly: options.readOnly ?? false,\n    constraintChecking:\n      typeof options.constraintChecking === 'function'\n        ? new options.constraintChecking()\n        : options.constraintChecking,\n  };\n}\n\nexport function assertTransactionIsCompatibleWithOptions(\n  transaction: Transaction,\n  options: NormalizedTransactionOptions,\n) {\n  if (options.isolationLevel !== transaction.options.isolationLevel) {\n    throw new Error(\n      `Requested isolation level (${options.isolationLevel ?? 'unspecified'}) is not compatible with the one of the existing transaction (${transaction.options.isolationLevel ?? 'unspecified'})`,\n    );\n  }\n\n  if (options.readOnly !== transaction.options.readOnly) {\n    throw new Error(\n      `Requested a transaction in ${options.readOnly ? 'read-only' : 'read/write'} mode, which is not compatible with the existing ${transaction.options.readOnly ? 'read-only' : 'read/write'} transaction`,\n    );\n  }\n\n  if (options.transactionType !== transaction.options.transactionType) {\n    throw new Error(\n      `Requested transaction type (${options.transactionType}) is not compatible with the one of the existing transaction (${transaction.options.transactionType})`,\n    );\n  }\n\n  if (\n    options.constraintChecking !== transaction.options.constraintChecking &&\n    !options.constraintChecking?.isEqual(transaction.options.constraintChecking)\n  ) {\n    throw new Error(\n      `Requested transaction constraintChecking (${options.constraintChecking ?? 'none'}) is not compatible with the one of the existing transaction (${transaction.options.constraintChecking ?? 'none'})`,\n    );\n  }\n}\n\nfunction assertSupportedTransactionOptions(\n  sequelize: Sequelize,\n  options: TransactionOptions | NormalizedTransactionOptions,\n) {\n  if (\n    (('type' in options && options.type) ||\n      ('transactionType' in options && options.transactionType)) &&\n    !sequelize.dialect.supports.startTransaction.transactionType\n  ) {\n    throw new Error(`The ${sequelize.dialect.name} dialect does not support transaction types.`);\n  }\n}\n"],
  "mappings": "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",
  "names": ["assert", "IsolationLevel", "TransactionType", "Lock", "TransactionNestMode"]
}
