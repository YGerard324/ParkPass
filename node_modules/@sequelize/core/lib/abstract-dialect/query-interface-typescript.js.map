{
  "version": 3,
  "sources": ["../../src/abstract-dialect/query-interface-typescript.ts"],
  "sourcesContent": ["import { isNotNullish } from '@sequelize/utils';\nimport isEmpty from 'lodash/isEmpty';\nimport assert from 'node:assert';\nimport type { ConstraintChecking } from '../deferrable';\nimport { Deferrable } from '../deferrable';\nimport { BaseError } from '../errors';\nimport { setTransactionFromCls } from '../model-internals.js';\nimport { QueryTypes } from '../query-types';\nimport type { QueryRawOptions, QueryRawOptionsWithType, Sequelize } from '../sequelize';\nimport { COMPLETES_TRANSACTION, Transaction } from '../transaction';\nimport { isErrorWithStringCode } from '../utils/check.js';\nimport {\n  noSchemaDelimiterParameter,\n  noSchemaParameter,\n  showAllToListSchemas,\n  showAllToListTables,\n} from '../utils/deprecations';\nimport type { AbstractConnection } from './connection-manager.js';\nimport type { AbstractDialect } from './dialect.js';\nimport type { TableOrModel } from './query-generator.types.js';\nimport { AbstractQueryInterfaceInternal } from './query-interface-internal.js';\nimport type { TableNameWithSchema } from './query-interface.js';\nimport type {\n  AddConstraintOptions,\n  ColumnsDescription,\n  CommitTransactionOptions,\n  ConstraintDescription,\n  CreateDatabaseOptions,\n  CreateSavepointOptions,\n  CreateSchemaOptions,\n  DatabaseDescription,\n  DeferConstraintsOptions,\n  DescribeTableOptions,\n  DropSchemaOptions,\n  FetchDatabaseVersionOptions,\n  ListDatabasesOptions,\n  QiBulkDeleteOptions,\n  QiDropAllSchemasOptions,\n  QiDropAllTablesOptions,\n  QiDropTableOptions,\n  QiListSchemasOptions,\n  QiListTablesOptions,\n  QiTruncateTableOptions,\n  RemoveColumnOptions,\n  RemoveConstraintOptions,\n  RenameTableOptions,\n  RollbackSavepointOptions,\n  RollbackTransactionOptions,\n  SetIsolationLevelOptions,\n  ShowConstraintsOptions,\n  StartTransactionOptions,\n} from './query-interface.types';\n\nexport type WithoutForeignKeyChecksCallback<T> = (connection: AbstractConnection) => Promise<T>;\n\n// DO NOT MAKE THIS CLASS PUBLIC!\n/**\n * This is a temporary class used to progressively migrate the AbstractQueryInterface class to TypeScript by slowly moving its functions here.\n * Always use {@link AbstractQueryInterface} instead.\n */\nexport class AbstractQueryInterfaceTypeScript<Dialect extends AbstractDialect = AbstractDialect> {\n  readonly dialect: Dialect;\n  readonly #internalQueryInterface: AbstractQueryInterfaceInternal;\n\n  /**\n   * @param dialect The dialect instance.\n   * @param internalQueryInterface The internal query interface to use.\n   *                               Defaults to a new instance of {@link AbstractQueryInterfaceInternal}.\n   *                               Your dialect may replace this with a custom implementation.\n   */\n  constructor(dialect: Dialect, internalQueryInterface?: AbstractQueryInterfaceInternal) {\n    this.dialect = dialect;\n    this.#internalQueryInterface =\n      internalQueryInterface ?? new AbstractQueryInterfaceInternal(dialect);\n  }\n\n  get sequelize(): Sequelize {\n    return this.dialect.sequelize;\n  }\n\n  get queryGenerator(): Dialect['queryGenerator'] {\n    return this.dialect.queryGenerator;\n  }\n\n  /**\n   * Create a database\n   *\n   * @param database\n   * @param options\n   */\n  async createDatabase(database: string, options?: CreateDatabaseOptions): Promise<void> {\n    const sql = this.queryGenerator.createDatabaseQuery(database, options);\n\n    await this.sequelize.queryRaw(sql, options);\n  }\n\n  /**\n   * Drop a database\n   *\n   * @param database\n   * @param options\n   */\n  async dropDatabase(database: string, options?: QueryRawOptions): Promise<void> {\n    const sql = this.queryGenerator.dropDatabaseQuery(database);\n\n    await this.sequelize.queryRaw(sql, options);\n  }\n\n  /**\n   * Lists all available databases\n   *\n   * @param options\n   */\n  async listDatabases(options?: ListDatabasesOptions): Promise<DatabaseDescription[]> {\n    const sql = this.queryGenerator.listDatabasesQuery(options);\n\n    return this.sequelize.queryRaw<DatabaseDescription>(sql, {\n      ...options,\n      type: QueryTypes.SELECT,\n    });\n  }\n\n  /**\n   * Returns the database version.\n   *\n   * @param options Query Options\n   */\n  async fetchDatabaseVersion(options?: FetchDatabaseVersionOptions): Promise<string> {\n    const payload = await this.#internalQueryInterface.fetchDatabaseVersionRaw<{ version: string }>(\n      options,\n    );\n\n    assert(\n      payload.version != null,\n      'Expected the version query to produce an object that includes a `version` property.',\n    );\n\n    return payload.version;\n  }\n\n  /**\n   * Create a new database schema.\n   *\n   * **Note:** We define schemas as a namespace that can contain tables.\n   * In mysql and mariadb, this command will create what they call a database.\n   *\n   * @param schema Name of the schema\n   * @param options\n   */\n  async createSchema(schema: string, options?: CreateSchemaOptions): Promise<void> {\n    const sql = this.queryGenerator.createSchemaQuery(schema, options);\n    await this.sequelize.queryRaw(sql, options);\n  }\n\n  /**\n   * Drop a single schema\n   *\n   * **Note:** We define schemas as a namespace that can contain tables.\n   * In mysql and mariadb, this command will create what they call a database.\n   *\n   * @param schema Name of the schema\n   * @param options\n   */\n  async dropSchema(schema: string, options?: DropSchemaOptions): Promise<void> {\n    const sql = this.queryGenerator.dropSchemaQuery(schema, options);\n    await this.sequelize.queryRaw(sql, options);\n  }\n\n  /**\n   * Drops all schemas\n   *\n   * @param options\n   */\n  async dropAllSchemas(options?: QiDropAllSchemasOptions): Promise<void> {\n    const skip = options?.skip || [];\n    const allSchemas = await this.listSchemas(options);\n    const schemaNames = allSchemas.filter(schemaName => !skip.includes(schemaName));\n\n    const dropOptions = { ...options };\n    // enable \"cascade\" by default for dialects that support it\n    if (dropOptions.cascade === undefined) {\n      if (this.sequelize.dialect.supports.dropSchema.cascade) {\n        dropOptions.cascade = true;\n      } else {\n        // if the dialect does not support \"cascade\", then drop all tables first in a loop to avoid deadlocks and timeouts\n        for (const schema of schemaNames) {\n          // eslint-disable-next-line no-await-in-loop\n          await this.dropAllTables({ ...dropOptions, schema });\n        }\n      }\n    }\n\n    // Drop all the schemas in a loop to avoid deadlocks and timeouts\n    for (const schema of schemaNames) {\n      // eslint-disable-next-line no-await-in-loop\n      await this.dropSchema(schema, dropOptions);\n    }\n  }\n\n  /**\n   * List defined schemas\n   *\n   * **Note:** this is a schema in the [postgres sense of the word](http://www.postgresql.org/docs/9.1/static/ddl-schemas.html),\n   * not a database table. In mysql and mariadb, this will show all databases.\n   *\n   * @param options\n   *\n   * @returns list of schemas\n   */\n  async listSchemas(options?: QiListSchemasOptions): Promise<string[]> {\n    const showSchemasSql = this.queryGenerator.listSchemasQuery(options);\n    const schemaNames = await this.sequelize.queryRaw<{ schema: string }>(showSchemasSql, {\n      ...options,\n      raw: true,\n      type: QueryTypes.SELECT,\n    });\n\n    return schemaNames.map(schemaName => schemaName.schema);\n  }\n\n  /**\n   * Show all defined schemas\n   *\n   * @deprecated Use {@link listSchemas} instead.\n   * @param options\n   */\n  async showAllSchemas(options?: QiListSchemasOptions): Promise<string[]> {\n    showAllToListSchemas();\n\n    return this.listSchemas(options);\n  }\n\n  /**\n   * Drop a table from database\n   *\n   * @param tableName Table name to drop\n   * @param options   Query options\n   */\n  async dropTable(tableName: TableOrModel, options?: QiDropTableOptions): Promise<void> {\n    const sql = this.queryGenerator.dropTableQuery(tableName, options);\n\n    await this.sequelize.queryRaw(sql, options);\n  }\n\n  /**\n   * Drop all tables\n   *\n   * @param options\n   */\n  async dropAllTables(options?: QiDropAllTablesOptions): Promise<void> {\n    const skip = options?.skip || [];\n    const allTables = await this.listTables(options);\n    const tableNames = allTables.filter(tableName => !skip.includes(tableName.tableName));\n\n    const dropOptions = { ...options };\n    // enable \"cascade\" by default if supported by this dialect\n    if (this.sequelize.dialect.supports.dropTable.cascade && dropOptions.cascade === undefined) {\n      dropOptions.cascade = true;\n    }\n\n    // Remove all the foreign keys first in a loop to avoid deadlocks and timeouts\n    for (const tableName of tableNames) {\n      // eslint-disable-next-line no-await-in-loop\n      const foreignKeys = await this.showConstraints(tableName, {\n        ...options,\n        constraintType: 'FOREIGN KEY',\n      });\n      // eslint-disable-next-line no-await-in-loop\n      await Promise.all(\n        foreignKeys.map(async fk => this.removeConstraint(tableName, fk.constraintName, options)),\n      );\n    }\n\n    // Drop all the tables loop to avoid deadlocks and timeouts\n    for (const tableName of tableNames) {\n      // eslint-disable-next-line no-await-in-loop\n      await this.dropTable(tableName, dropOptions);\n    }\n  }\n\n  /**\n   * List tables\n   *\n   * @param options\n   */\n  async listTables(options?: QiListTablesOptions): Promise<TableNameWithSchema[]> {\n    const sql = this.queryGenerator.listTablesQuery(options);\n\n    return this.sequelize.queryRaw<TableNameWithSchema>(sql, {\n      ...options,\n      raw: true,\n      type: QueryTypes.SELECT,\n    });\n  }\n\n  /**\n   * Show all tables\n   *\n   * @deprecated Use {@link listTables} instead.\n   * @param options\n   */\n  async showAllTables(options?: QiListTablesOptions): Promise<TableNameWithSchema[]> {\n    showAllToListTables();\n\n    return this.listTables(options);\n  }\n\n  /**\n   * Rename a table\n   *\n   * @param beforeTableName\n   * @param afterTableName\n   * @param options\n   */\n  async renameTable(\n    beforeTableName: TableOrModel,\n    afterTableName: TableOrModel,\n    options?: RenameTableOptions,\n  ): Promise<void> {\n    const sql = this.queryGenerator.renameTableQuery(beforeTableName, afterTableName, options);\n\n    await this.sequelize.queryRaw(sql, options);\n  }\n\n  /**\n   * Returns a promise that will resolve to true if the table or model exists in the database, false otherwise.\n   *\n   * @param tableName - The name of the table or model\n   * @param options - Query options\n   */\n  async tableExists(tableName: TableOrModel, options?: QueryRawOptions): Promise<boolean> {\n    const sql = this.queryGenerator.tableExistsQuery(tableName);\n    const out = await this.sequelize.query(sql, { ...options, type: QueryTypes.SELECT });\n\n    return out.length === 1;\n  }\n\n  /**\n   * Describe a table structure\n   *\n   * This method returns an array of hashes containing information about all attributes in the table.\n   *\n   * ```js\n   * {\n   *    name: {\n   *      type:         'VARCHAR(255)', // this will be 'CHARACTER VARYING' for pg!\n   *      allowNull:    true,\n   *      defaultValue: null\n   *    },\n   *    isBetaMember: {\n   *      type:         'TINYINT(1)', // this will be 'BOOLEAN' for pg!\n   *      allowNull:    false,\n   *      defaultValue: false\n   *    }\n   * }\n   * ```\n   *\n   * @param tableName\n   * @param options Query options\n   */\n  async describeTable(\n    tableName: TableOrModel,\n    options?: DescribeTableOptions,\n  ): Promise<ColumnsDescription> {\n    const table = this.queryGenerator.extractTableDetails(tableName);\n\n    if (typeof options === 'string') {\n      noSchemaParameter();\n      table.schema = options;\n    }\n\n    if (typeof options === 'object' && options !== null) {\n      if (options.schema) {\n        noSchemaParameter();\n        table.schema = options.schema;\n      }\n\n      if (options.schemaDelimiter) {\n        noSchemaDelimiterParameter();\n        table.delimiter = options.schemaDelimiter;\n      }\n    }\n\n    const sql = this.queryGenerator.describeTableQuery(table);\n    const queryOptions: QueryRawOptionsWithType<QueryTypes.DESCRIBE> = {\n      ...options,\n      type: QueryTypes.DESCRIBE,\n    };\n\n    try {\n      const data = await this.sequelize.queryRaw(sql, queryOptions);\n      /*\n       * If no data is returned from the query, then the table name may be wrong.\n       * Query generators that use information_schema for retrieving table info will just return an empty result set,\n       * it will not throw an error like built-ins do (e.g. DESCRIBE on MySql).\n       */\n      if (isEmpty(data)) {\n        throw new Error(\n          `No description found for table ${table.tableName}${table.schema ? ` in schema ${table.schema}` : ''}. Check the table name and schema; remember, they _are_ case sensitive.`,\n        );\n      }\n\n      return data;\n    } catch (error: unknown) {\n      if (\n        error instanceof BaseError &&\n        isErrorWithStringCode(error.cause) &&\n        error.cause.code === 'ER_NO_SUCH_TABLE'\n      ) {\n        throw new Error(\n          `No description found for table ${table.tableName}${table.schema ? ` in schema ${table.schema}` : ''}. Check the table name and schema; remember, they _are_ case sensitive.`,\n        );\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Truncates a table\n   *\n   * @param tableName\n   * @param options\n   */\n  async truncate(tableName: TableOrModel, options?: QiTruncateTableOptions): Promise<void> {\n    const sql = this.queryGenerator.truncateTableQuery(tableName, options);\n    const queryOptions = { ...options, raw: true, type: QueryTypes.RAW };\n    if (Array.isArray(sql)) {\n      await this.#internalQueryInterface.executeQueriesSequentially(sql, queryOptions);\n    } else {\n      await this.sequelize.queryRaw(sql, queryOptions);\n    }\n  }\n\n  /**\n   * Removes a column from a table\n   *\n   * @param tableName\n   * @param columnName\n   * @param options\n   */\n  async removeColumn(\n    tableName: TableOrModel,\n    columnName: string,\n    options?: RemoveColumnOptions,\n  ): Promise<void> {\n    const queryOptions = { ...options, raw: true };\n    const sql = this.queryGenerator.removeColumnQuery(tableName, columnName, queryOptions);\n\n    await this.sequelize.queryRaw(sql, queryOptions);\n  }\n\n  /**\n   * Add a constraint to a table\n   *\n   * Available constraints:\n   * - UNIQUE\n   * - DEFAULT (MSSQL only)\n   * - CHECK (Not supported by MySQL)\n   * - FOREIGN KEY\n   * - PRIMARY KEY\n   *\n   * @example UNIQUE\n   * ```ts\n   * queryInterface.addConstraint('Users', {\n   *   fields: ['email'],\n   *   type: 'UNIQUE',\n   *   name: 'custom_unique_constraint_name'\n   * });\n   * ```\n   *\n   * @example CHECK\n   * ```ts\n   * queryInterface.addConstraint('Users', {\n   *   fields: ['roles'],\n   *   type: 'CHECK',\n   *   where: {\n   *      roles: ['user', 'admin', 'moderator', 'guest']\n   *   }\n   * });\n   * ```\n   *\n   * @example Default - MSSQL only\n   * ```ts\n   * queryInterface.addConstraint('Users', {\n   *    fields: ['roles'],\n   *    type: 'DEFAULT',\n   *    defaultValue: 'guest'\n   * });\n   * ```\n   *\n   * @example Primary Key\n   * ```ts\n   * queryInterface.addConstraint('Users', {\n   *    fields: ['username'],\n   *    type: 'PRIMARY KEY',\n   *    name: 'custom_primary_constraint_name'\n   * });\n   * ```\n   *\n   * @example Composite Primary Key\n   * ```ts\n   * queryInterface.addConstraint('Users', {\n   *    fields: ['first_name', 'last_name'],\n   *    type: 'PRIMARY KEY',\n   *    name: 'custom_primary_constraint_name'\n   * });\n   * ```\n   *\n   * @example Foreign Key\n   * ```ts\n   * queryInterface.addConstraint('Posts', {\n   *   fields: ['username'],\n   *   type: 'FOREIGN KEY',\n   *   name: 'custom_fkey_constraint_name',\n   *   references: { //Required field\n   *     table: 'target_table_name',\n   *     field: 'target_column_name'\n   *   },\n   *   onDelete: 'cascade',\n   *   onUpdate: 'cascade'\n   * });\n   * ```\n   *\n   * @example Composite Foreign Key\n   * ```ts\n   * queryInterface.addConstraint('TableName', {\n   *   fields: ['source_column_name', 'other_source_column_name'],\n   *   type: 'FOREIGN KEY',\n   *   name: 'custom_fkey_constraint_name',\n   *   references: { //Required field\n   *     table: 'target_table_name',\n   *     fields: ['target_column_name', 'other_target_column_name']\n   *   },\n   *   onDelete: 'cascade',\n   *   onUpdate: 'cascade'\n   * });\n   * ```\n   *\n   * @param tableName - Table name where you want to add a constraint\n   * @param options - An object to define the constraint name, type etc\n   */\n  async addConstraint(tableName: TableOrModel, options: AddConstraintOptions): Promise<void> {\n    if (!options.fields) {\n      throw new Error('Fields must be specified through options.fields');\n    }\n\n    if (!options.type) {\n      throw new Error('Constraint type must be specified through options.type');\n    }\n\n    const sql = this.queryGenerator.addConstraintQuery(tableName, options);\n\n    await this.sequelize.queryRaw(sql, { ...options, raw: true, type: QueryTypes.RAW });\n  }\n\n  async deferConstraints(\n    constraintChecking: ConstraintChecking,\n    options?: DeferConstraintsOptions,\n  ): Promise<void> {\n    setTransactionFromCls(options ?? {}, this.sequelize);\n    if (!options?.transaction) {\n      throw new Error('Missing transaction in deferConstraints option.');\n    }\n\n    const sql = this.queryGenerator.setConstraintCheckingQuery(constraintChecking);\n\n    await this.sequelize.queryRaw(sql, { ...options, raw: true, type: QueryTypes.RAW });\n  }\n\n  /**\n   * Remove a constraint from a table\n   *\n   * @param tableName -Table name to drop constraint from\n   * @param constraintName -Constraint name\n   * @param options -Query options\n   */\n  async removeConstraint(\n    tableName: TableOrModel,\n    constraintName: string,\n    options?: RemoveConstraintOptions,\n  ): Promise<void> {\n    const sql = this.queryGenerator.removeConstraintQuery(tableName, constraintName, options);\n\n    await this.sequelize.queryRaw(sql, { ...options, raw: true, type: QueryTypes.RAW });\n  }\n\n  async showConstraints(\n    tableName: TableOrModel,\n    options?: ShowConstraintsOptions,\n  ): Promise<ConstraintDescription[]> {\n    const sql = this.queryGenerator.showConstraintsQuery(tableName, options);\n    const rawConstraints = await this.sequelize.queryRaw(sql, {\n      ...options,\n      raw: true,\n      type: QueryTypes.SHOWCONSTRAINTS,\n    });\n    const constraintMap = new Map<string, ConstraintDescription>();\n    for (const {\n      columnNames,\n      definition,\n      deleteAction,\n      initiallyDeferred,\n      isDeferrable,\n      referencedColumnNames,\n      referencedTableName,\n      referencedTableSchema,\n      updateAction,\n      ...rawConstraint\n    } of rawConstraints) {\n      const constraint = constraintMap.get(rawConstraint.constraintName)!;\n      if (constraint) {\n        if (columnNames) {\n          constraint.columnNames = constraint.columnNames\n            ? [...new Set([...constraint.columnNames, columnNames])]\n            : [columnNames];\n        }\n\n        if (referencedColumnNames) {\n          constraint.referencedColumnNames = constraint.referencedColumnNames\n            ? [...new Set([...constraint.referencedColumnNames, referencedColumnNames])]\n            : [referencedColumnNames];\n        }\n      } else {\n        const constraintData: ConstraintDescription = { ...rawConstraint };\n        if (columnNames) {\n          constraintData.columnNames = [columnNames];\n        }\n\n        if (referencedTableSchema) {\n          constraintData.referencedTableSchema = referencedTableSchema;\n        }\n\n        if (referencedTableName) {\n          constraintData.referencedTableName = referencedTableName;\n        }\n\n        if (referencedColumnNames) {\n          constraintData.referencedColumnNames = [referencedColumnNames];\n        }\n\n        if (deleteAction) {\n          constraintData.deleteAction = deleteAction.replaceAll('_', ' ');\n        }\n\n        if (updateAction) {\n          constraintData.updateAction = updateAction.replaceAll('_', ' ');\n        }\n\n        if (definition) {\n          constraintData.definition = definition;\n        }\n\n        if (this.sequelize.dialect.supports.constraints.deferrable) {\n          constraintData.deferrable = isDeferrable\n            ? initiallyDeferred === 'YES'\n              ? Deferrable.INITIALLY_DEFERRED\n              : Deferrable.INITIALLY_IMMEDIATE\n            : Deferrable.NOT;\n        }\n\n        constraintMap.set(rawConstraint.constraintName, constraintData);\n      }\n    }\n\n    return [...constraintMap.values()];\n  }\n\n  /**\n   * Returns all foreign key constraints of requested tables\n   *\n   * @deprecated Use {@link showConstraints} instead.\n   * @param _tableNames\n   * @param _options\n   */\n  getForeignKeysForTables(_tableNames: TableOrModel[], _options?: QueryRawOptions): Error {\n    throw new Error(`getForeignKeysForTables has been deprecated. Use showConstraints instead.`);\n  }\n\n  /**\n   * Get foreign key references details for the table\n   *\n   * @deprecated Use {@link showConstraints} instead.\n   * @param _tableName\n   * @param _options\n   */\n  getForeignKeyReferencesForTable(_tableName: TableOrModel, _options?: QueryRawOptions): Error {\n    throw new Error(\n      `getForeignKeyReferencesForTable has been deprecated. Use showConstraints instead.`,\n    );\n  }\n\n  /**\n   * Disables foreign key checks for the duration of the callback.\n   * The foreign key checks are only disabled for the current connection.\n   * To specify the connection, you can either use the \"connection\" or the \"transaction\" option.\n   * If you do not specify a connection, this method will reserve a connection for the duration of the callback,\n   * and release it afterwards. You will receive the connection or transaction as the first argument of the callback.\n   * You must use this connection to execute queries\n   *\n   * @example\n   * ```ts\n   * await this.queryInterface.withoutForeignKeyChecks(options, async connection => {\n   *   const truncateOptions = { ...options, connection };\n   *\n   *   for (const model of models) {\n   *     await model.truncate(truncateOptions);\n   *   }\n   * });\n   * ```\n   *\n   * @param cb\n   */\n  async withoutForeignKeyChecks<T>(cb: WithoutForeignKeyChecksCallback<T>): Promise<T>;\n  async withoutForeignKeyChecks<T>(\n    options: QueryRawOptions,\n    cb: WithoutForeignKeyChecksCallback<T>,\n  ): Promise<T>;\n  async withoutForeignKeyChecks<T>(\n    optionsOrCallback: QueryRawOptions | WithoutForeignKeyChecksCallback<T>,\n    maybeCallback?: WithoutForeignKeyChecksCallback<T>,\n  ): Promise<T> {\n    let options: QueryRawOptions;\n    let callback: WithoutForeignKeyChecksCallback<T>;\n\n    if (typeof optionsOrCallback === 'function') {\n      options = {};\n      callback = optionsOrCallback;\n    } else {\n      options = { ...optionsOrCallback };\n      callback = maybeCallback!;\n    }\n\n    setTransactionFromCls(options, this.sequelize);\n\n    if (options.connection) {\n      return this.#withoutForeignKeyChecks(options, callback);\n    }\n\n    return this.sequelize.withConnection(async connection => {\n      return this.#withoutForeignKeyChecks({ ...options, connection }, callback);\n    });\n  }\n\n  async #withoutForeignKeyChecks<T>(\n    options: QueryRawOptions,\n    cb: WithoutForeignKeyChecksCallback<T>,\n  ): Promise<T> {\n    try {\n      await this.unsafeToggleForeignKeyChecks(false, options);\n\n      isNotNullish.assert(options.connection, 'options.connection must be provided');\n\n      return await cb(options.connection);\n    } finally {\n      await this.unsafeToggleForeignKeyChecks(true, options);\n    }\n  }\n\n  /**\n   * Toggles foreign key checks.\n   * Don't forget to turn them back on, use {@link withoutForeignKeyChecks} to do this automatically.\n   *\n   * @param enable\n   * @param options\n   */\n  async unsafeToggleForeignKeyChecks(enable: boolean, options?: QueryRawOptions): Promise<void> {\n    await this.sequelize.queryRaw(\n      this.queryGenerator.getToggleForeignKeyChecksQuery(enable),\n      options,\n    );\n  }\n\n  /**\n   * Commit an already started transaction.\n   *\n   * This is an internal method used by `sequelize.transaction()` use at your own risk.\n   *\n   * @param transaction\n   * @param options\n   */\n  async _commitTransaction(\n    transaction: Transaction,\n    options: CommitTransactionOptions,\n  ): Promise<void> {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to commit a transaction without the transaction object.');\n    }\n\n    const sql = this.queryGenerator.commitTransactionQuery();\n    await this.sequelize.queryRaw(sql, {\n      ...options,\n      transaction,\n      supportsSearchPath: false,\n      [COMPLETES_TRANSACTION]: true,\n    });\n  }\n\n  /**\n   * Create a new savepoint.\n   *\n   * This is an internal method used by `sequelize.transaction()` use at your own risk.\n   *\n   * @param transaction\n   * @param options\n   */\n  async _createSavepoint(transaction: Transaction, options: CreateSavepointOptions): Promise<void> {\n    if (!this.queryGenerator.dialect.supports.savepoints) {\n      throw new Error(`Savepoints are not supported by ${this.sequelize.dialect.name}.`);\n    }\n\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to create a savepoint without the transaction object.');\n    }\n\n    const sql = this.queryGenerator.createSavepointQuery(options.savepointName);\n    await this.sequelize.queryRaw(sql, { ...options, transaction, supportsSearchPath: false });\n  }\n\n  /**\n   * Rollback to a savepoint.\n   *\n   * This is an internal method used by `sequelize.transaction()` use at your own risk.\n   *\n   * @param transaction\n   * @param options\n   */\n  async _rollbackSavepoint(\n    transaction: Transaction,\n    options: RollbackSavepointOptions,\n  ): Promise<void> {\n    if (!this.queryGenerator.dialect.supports.savepoints) {\n      throw new Error(`Savepoints are not supported by ${this.sequelize.dialect.name}.`);\n    }\n\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to rollback a savepoint without the transaction object.');\n    }\n\n    const sql = this.queryGenerator.rollbackSavepointQuery(options.savepointName);\n    await this.sequelize.queryRaw(sql, {\n      ...options,\n      transaction,\n      supportsSearchPath: false,\n      [COMPLETES_TRANSACTION]: true,\n    });\n  }\n\n  /**\n   * Rollback (revert) a transaction that hasn't been committed.\n   *\n   * This is an internal method used by `sequelize.transaction()` use at your own risk.\n   *\n   * @param transaction\n   * @param options\n   */\n  async _rollbackTransaction(\n    transaction: Transaction,\n    options: RollbackTransactionOptions,\n  ): Promise<void> {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to rollback a transaction without the transaction object.');\n    }\n\n    const sql = this.queryGenerator.rollbackTransactionQuery();\n    await this.sequelize.queryRaw(sql, {\n      ...options,\n      transaction,\n      supportsSearchPath: false,\n      [COMPLETES_TRANSACTION]: true,\n    });\n  }\n\n  /**\n   * Set the isolation level of a transaction.\n   *\n   * This is an internal method used by `sequelize.transaction()` use at your own risk.\n   *\n   * @param transaction\n   * @param options\n   */\n  async _setIsolationLevel(\n    transaction: Transaction,\n    options: SetIsolationLevelOptions,\n  ): Promise<void> {\n    if (!this.queryGenerator.dialect.supports.settingIsolationLevelDuringTransaction) {\n      throw new Error(\n        `Changing the isolation level during the transaction is not supported by ${this.sequelize.dialect.name}.`,\n      );\n    }\n\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error(\n        'Unable to set the isolation level for a transaction without the transaction object.',\n      );\n    }\n\n    const sql = this.queryGenerator.setIsolationLevelQuery(options.isolationLevel);\n    await this.sequelize.queryRaw(sql, { ...options, transaction, supportsSearchPath: false });\n  }\n\n  /**\n   * Begin a new transaction.\n   *\n   * This is an internal method used by `sequelize.transaction()` use at your own risk.\n   *\n   * @param transaction\n   * @param options\n   */\n  async _startTransaction(\n    transaction: Transaction,\n    options: StartTransactionOptions,\n  ): Promise<void> {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to start a transaction without the transaction object.');\n    }\n\n    const queryOptions = { ...options, transaction, supportsSearchPath: false };\n    if (\n      queryOptions.isolationLevel &&\n      !this.queryGenerator.dialect.supports.settingIsolationLevelDuringTransaction\n    ) {\n      const sql = this.queryGenerator.setIsolationLevelQuery(queryOptions.isolationLevel);\n      await this.sequelize.queryRaw(sql, queryOptions);\n    }\n\n    const sql = this.queryGenerator.startTransactionQuery(options);\n    await this.sequelize.queryRaw(sql, queryOptions);\n    if (\n      queryOptions.isolationLevel &&\n      this.sequelize.dialect.supports.settingIsolationLevelDuringTransaction\n    ) {\n      await transaction.setIsolationLevel(queryOptions.isolationLevel);\n    }\n  }\n\n  /**\n   * Deletes records from a table\n   *\n   * @param tableOrModel\n   * @param options\n   */\n  async bulkDelete(tableOrModel: TableOrModel, options?: QiBulkDeleteOptions): Promise<number> {\n    const bulkDeleteOptions = { ...options };\n    const sql = this.queryGenerator.bulkDeleteQuery(tableOrModel, bulkDeleteOptions);\n    // unlike bind, replacements are handled by QueryGenerator, not QueryRaw\n    delete bulkDeleteOptions.replacements;\n\n    return this.sequelize.queryRaw(sql, {\n      ...bulkDeleteOptions,\n      raw: true,\n      type: QueryTypes.DELETE,\n    });\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAA6B;AAC7B,qBAAoB;AACpB,yBAAmB;AAEnB,wBAA2B;AAC3B,oBAA0B;AAC1B,6BAAsC;AACtC,yBAA2B;AAE3B,yBAAmD;AACnD,mBAAsC;AACtC,0BAKO;AAIP,sCAA+C;AAwCxC,MAAM,iCAAoF;AAAA,EACtF;AAAA,EACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQT,YAAY,SAAkB,wBAAyD;AACrF,SAAK,UAAU;AACf,SAAK,0BACH,0BAA0B,IAAI,+DAA+B,OAAO;AAAA,EACxE;AAAA,EAEA,IAAI,YAAuB;AACzB,WAAO,KAAK,QAAQ;AAAA,EACtB;AAAA,EAEA,IAAI,iBAA4C;AAC9C,WAAO,KAAK,QAAQ;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,eAAe,UAAkB,SAAgD;AACrF,UAAM,MAAM,KAAK,eAAe,oBAAoB,UAAU,OAAO;AAErE,UAAM,KAAK,UAAU,SAAS,KAAK,OAAO;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,aAAa,UAAkB,SAA0C;AAC7E,UAAM,MAAM,KAAK,eAAe,kBAAkB,QAAQ;AAE1D,UAAM,KAAK,UAAU,SAAS,KAAK,OAAO;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,cAAc,SAAgE;AAClF,UAAM,MAAM,KAAK,eAAe,mBAAmB,OAAO;AAE1D,WAAO,KAAK,UAAU,SAA8B,KAAK;AAAA,MACvD,GAAG;AAAA,MACH,MAAM,8BAAW;AAAA,IACnB,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,qBAAqB,SAAwD;AACjF,UAAM,UAAU,MAAM,KAAK,wBAAwB;AAAA,MACjD;AAAA,IACF;AAEA,2BAAAA;AAAA,MACE,QAAQ,WAAW;AAAA,MACnB;AAAA,IACF;AAEA,WAAO,QAAQ;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,MAAM,aAAa,QAAgB,SAA8C;AAC/E,UAAM,MAAM,KAAK,eAAe,kBAAkB,QAAQ,OAAO;AACjE,UAAM,KAAK,UAAU,SAAS,KAAK,OAAO;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,MAAM,WAAW,QAAgB,SAA4C;AAC3E,UAAM,MAAM,KAAK,eAAe,gBAAgB,QAAQ,OAAO;AAC/D,UAAM,KAAK,UAAU,SAAS,KAAK,OAAO;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,eAAe,SAAkD;AACrE,UAAM,OAAO,SAAS,QAAQ,CAAC;AAC/B,UAAM,aAAa,MAAM,KAAK,YAAY,OAAO;AACjD,UAAM,cAAc,WAAW,OAAO,gBAAc,CAAC,KAAK,SAAS,UAAU,CAAC;AAE9E,UAAM,cAAc,EAAE,GAAG,QAAQ;AAEjC,QAAI,YAAY,YAAY,QAAW;AACrC,UAAI,KAAK,UAAU,QAAQ,SAAS,WAAW,SAAS;AACtD,oBAAY,UAAU;AAAA,MACxB,OAAO;AAEL,mBAAW,UAAU,aAAa;AAEhC,gBAAM,KAAK,cAAc,EAAE,GAAG,aAAa,OAAO,CAAC;AAAA,QACrD;AAAA,MACF;AAAA,IACF;AAGA,eAAW,UAAU,aAAa;AAEhC,YAAM,KAAK,WAAW,QAAQ,WAAW;AAAA,IAC3C;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,MAAM,YAAY,SAAmD;AACnE,UAAM,iBAAiB,KAAK,eAAe,iBAAiB,OAAO;AACnE,UAAM,cAAc,MAAM,KAAK,UAAU,SAA6B,gBAAgB;AAAA,MACpF,GAAG;AAAA,MACH,KAAK;AAAA,MACL,MAAM,8BAAW;AAAA,IACnB,CAAC;AAED,WAAO,YAAY,IAAI,gBAAc,WAAW,MAAM;AAAA,EACxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,eAAe,SAAmD;AACtE,kDAAqB;AAErB,WAAO,KAAK,YAAY,OAAO;AAAA,EACjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,UAAU,WAAyB,SAA6C;AACpF,UAAM,MAAM,KAAK,eAAe,eAAe,WAAW,OAAO;AAEjE,UAAM,KAAK,UAAU,SAAS,KAAK,OAAO;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,cAAc,SAAiD;AACnE,UAAM,OAAO,SAAS,QAAQ,CAAC;AAC/B,UAAM,YAAY,MAAM,KAAK,WAAW,OAAO;AAC/C,UAAM,aAAa,UAAU,OAAO,eAAa,CAAC,KAAK,SAAS,UAAU,SAAS,CAAC;AAEpF,UAAM,cAAc,EAAE,GAAG,QAAQ;AAEjC,QAAI,KAAK,UAAU,QAAQ,SAAS,UAAU,WAAW,YAAY,YAAY,QAAW;AAC1F,kBAAY,UAAU;AAAA,IACxB;AAGA,eAAW,aAAa,YAAY;AAElC,YAAM,cAAc,MAAM,KAAK,gBAAgB,WAAW;AAAA,QACxD,GAAG;AAAA,QACH,gBAAgB;AAAA,MAClB,CAAC;AAED,YAAM,QAAQ;AAAA,QACZ,YAAY,IAAI,OAAM,OAAM,KAAK,iBAAiB,WAAW,GAAG,gBAAgB,OAAO,CAAC;AAAA,MAC1F;AAAA,IACF;AAGA,eAAW,aAAa,YAAY;AAElC,YAAM,KAAK,UAAU,WAAW,WAAW;AAAA,IAC7C;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,WAAW,SAA+D;AAC9E,UAAM,MAAM,KAAK,eAAe,gBAAgB,OAAO;AAEvD,WAAO,KAAK,UAAU,SAA8B,KAAK;AAAA,MACvD,GAAG;AAAA,MACH,KAAK;AAAA,MACL,MAAM,8BAAW;AAAA,IACnB,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,cAAc,SAA+D;AACjF,iDAAoB;AAEpB,WAAO,KAAK,WAAW,OAAO;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,YACJ,iBACA,gBACA,SACe;AACf,UAAM,MAAM,KAAK,eAAe,iBAAiB,iBAAiB,gBAAgB,OAAO;AAEzF,UAAM,KAAK,UAAU,SAAS,KAAK,OAAO;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,YAAY,WAAyB,SAA6C;AACtF,UAAM,MAAM,KAAK,eAAe,iBAAiB,SAAS;AAC1D,UAAM,MAAM,MAAM,KAAK,UAAU,MAAM,KAAK,EAAE,GAAG,SAAS,MAAM,8BAAW,OAAO,CAAC;AAEnF,WAAO,IAAI,WAAW;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAyBA,MAAM,cACJ,WACA,SAC6B;AAC7B,UAAM,QAAQ,KAAK,eAAe,oBAAoB,SAAS;AAE/D,QAAI,OAAO,YAAY,UAAU;AAC/B,iDAAkB;AAClB,YAAM,SAAS;AAAA,IACjB;AAEA,QAAI,OAAO,YAAY,YAAY,YAAY,MAAM;AACnD,UAAI,QAAQ,QAAQ;AAClB,mDAAkB;AAClB,cAAM,SAAS,QAAQ;AAAA,MACzB;AAEA,UAAI,QAAQ,iBAAiB;AAC3B,4DAA2B;AAC3B,cAAM,YAAY,QAAQ;AAAA,MAC5B;AAAA,IACF;AAEA,UAAM,MAAM,KAAK,eAAe,mBAAmB,KAAK;AACxD,UAAM,eAA6D;AAAA,MACjE,GAAG;AAAA,MACH,MAAM,8BAAW;AAAA,IACnB;AAEA,QAAI;AACF,YAAM,OAAO,MAAM,KAAK,UAAU,SAAS,KAAK,YAAY;AAM5D,cAAI,eAAAC,SAAQ,IAAI,GAAG;AACjB,cAAM,IAAI;AAAA,UACR,kCAAkC,MAAM,YAAY,MAAM,SAAS,cAAc,MAAM,WAAW;AAAA,QACpG;AAAA,MACF;AAEA,aAAO;AAAA,IACT,SAAS,OAAP;AACA,UACE,iBAAiB,+BACjB,oCAAsB,MAAM,KAAK,KACjC,MAAM,MAAM,SAAS,oBACrB;AACA,cAAM,IAAI;AAAA,UACR,kCAAkC,MAAM,YAAY,MAAM,SAAS,cAAc,MAAM,WAAW;AAAA,QACpG;AAAA,MACF;AAEA,YAAM;AAAA,IACR;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,SAAS,WAAyB,SAAiD;AACvF,UAAM,MAAM,KAAK,eAAe,mBAAmB,WAAW,OAAO;AACrE,UAAM,eAAe,EAAE,GAAG,SAAS,KAAK,MAAM,MAAM,8BAAW,IAAI;AACnE,QAAI,MAAM,QAAQ,GAAG,GAAG;AACtB,YAAM,KAAK,wBAAwB,2BAA2B,KAAK,YAAY;AAAA,IACjF,OAAO;AACL,YAAM,KAAK,UAAU,SAAS,KAAK,YAAY;AAAA,IACjD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,aACJ,WACA,YACA,SACe;AACf,UAAM,eAAe,EAAE,GAAG,SAAS,KAAK,KAAK;AAC7C,UAAM,MAAM,KAAK,eAAe,kBAAkB,WAAW,YAAY,YAAY;AAErF,UAAM,KAAK,UAAU,SAAS,KAAK,YAAY;AAAA,EACjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA4FA,MAAM,cAAc,WAAyB,SAA8C;AACzF,QAAI,CAAC,QAAQ,QAAQ;AACnB,YAAM,IAAI,MAAM,iDAAiD;AAAA,IACnE;AAEA,QAAI,CAAC,QAAQ,MAAM;AACjB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,UAAM,MAAM,KAAK,eAAe,mBAAmB,WAAW,OAAO;AAErE,UAAM,KAAK,UAAU,SAAS,KAAK,EAAE,GAAG,SAAS,KAAK,MAAM,MAAM,8BAAW,IAAI,CAAC;AAAA,EACpF;AAAA,EAEA,MAAM,iBACJ,oBACA,SACe;AACf,sDAAsB,WAAW,CAAC,GAAG,KAAK,SAAS;AACnD,QAAI,CAAC,SAAS,aAAa;AACzB,YAAM,IAAI,MAAM,iDAAiD;AAAA,IACnE;AAEA,UAAM,MAAM,KAAK,eAAe,2BAA2B,kBAAkB;AAE7E,UAAM,KAAK,UAAU,SAAS,KAAK,EAAE,GAAG,SAAS,KAAK,MAAM,MAAM,8BAAW,IAAI,CAAC;AAAA,EACpF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,iBACJ,WACA,gBACA,SACe;AACf,UAAM,MAAM,KAAK,eAAe,sBAAsB,WAAW,gBAAgB,OAAO;AAExF,UAAM,KAAK,UAAU,SAAS,KAAK,EAAE,GAAG,SAAS,KAAK,MAAM,MAAM,8BAAW,IAAI,CAAC;AAAA,EACpF;AAAA,EAEA,MAAM,gBACJ,WACA,SACkC;AAClC,UAAM,MAAM,KAAK,eAAe,qBAAqB,WAAW,OAAO;AACvE,UAAM,iBAAiB,MAAM,KAAK,UAAU,SAAS,KAAK;AAAA,MACxD,GAAG;AAAA,MACH,KAAK;AAAA,MACL,MAAM,8BAAW;AAAA,IACnB,CAAC;AACD,UAAM,gBAAgB,oBAAI,IAAmC;AAC7D,eAAW;AAAA,MACT;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,GAAG;AAAA,IACL,KAAK,gBAAgB;AACnB,YAAM,aAAa,cAAc,IAAI,cAAc,cAAc;AACjE,UAAI,YAAY;AACd,YAAI,aAAa;AACf,qBAAW,cAAc,WAAW,cAChC,CAAC,GAAG,oBAAI,IAAI,CAAC,GAAG,WAAW,aAAa,WAAW,CAAC,CAAC,IACrD,CAAC,WAAW;AAAA,QAClB;AAEA,YAAI,uBAAuB;AACzB,qBAAW,wBAAwB,WAAW,wBAC1C,CAAC,GAAG,oBAAI,IAAI,CAAC,GAAG,WAAW,uBAAuB,qBAAqB,CAAC,CAAC,IACzE,CAAC,qBAAqB;AAAA,QAC5B;AAAA,MACF,OAAO;AACL,cAAM,iBAAwC,EAAE,GAAG,cAAc;AACjE,YAAI,aAAa;AACf,yBAAe,cAAc,CAAC,WAAW;AAAA,QAC3C;AAEA,YAAI,uBAAuB;AACzB,yBAAe,wBAAwB;AAAA,QACzC;AAEA,YAAI,qBAAqB;AACvB,yBAAe,sBAAsB;AAAA,QACvC;AAEA,YAAI,uBAAuB;AACzB,yBAAe,wBAAwB,CAAC,qBAAqB;AAAA,QAC/D;AAEA,YAAI,cAAc;AAChB,yBAAe,eAAe,aAAa,WAAW,KAAK,GAAG;AAAA,QAChE;AAEA,YAAI,cAAc;AAChB,yBAAe,eAAe,aAAa,WAAW,KAAK,GAAG;AAAA,QAChE;AAEA,YAAI,YAAY;AACd,yBAAe,aAAa;AAAA,QAC9B;AAEA,YAAI,KAAK,UAAU,QAAQ,SAAS,YAAY,YAAY;AAC1D,yBAAe,aAAa,eACxB,sBAAsB,QACpB,6BAAW,qBACX,6BAAW,sBACb,6BAAW;AAAA,QACjB;AAEA,sBAAc,IAAI,cAAc,gBAAgB,cAAc;AAAA,MAChE;AAAA,IACF;AAEA,WAAO,CAAC,GAAG,cAAc,OAAO,CAAC;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,wBAAwB,aAA6B,UAAmC;AACtF,UAAM,IAAI,MAAM,2EAA2E;AAAA,EAC7F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,gCAAgC,YAA0B,UAAmC;AAC3F,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EACF;AAAA,EA4BA,MAAM,wBACJ,mBACA,eACY;AACZ,QAAI;AACJ,QAAI;AAEJ,QAAI,OAAO,sBAAsB,YAAY;AAC3C,gBAAU,CAAC;AACX,iBAAW;AAAA,IACb,OAAO;AACL,gBAAU,EAAE,GAAG,kBAAkB;AACjC,iBAAW;AAAA,IACb;AAEA,sDAAsB,SAAS,KAAK,SAAS;AAE7C,QAAI,QAAQ,YAAY;AACtB,aAAO,KAAK,yBAAyB,SAAS,QAAQ;AAAA,IACxD;AAEA,WAAO,KAAK,UAAU,eAAe,OAAM,eAAc;AACvD,aAAO,KAAK,yBAAyB,EAAE,GAAG,SAAS,WAAW,GAAG,QAAQ;AAAA,IAC3E,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,yBACJ,SACA,IACY;AACZ,QAAI;AACF,YAAM,KAAK,6BAA6B,OAAO,OAAO;AAEtD,gCAAa,OAAO,QAAQ,YAAY,qCAAqC;AAE7E,aAAO,MAAM,GAAG,QAAQ,UAAU;AAAA,IACpC,UAAE;AACA,YAAM,KAAK,6BAA6B,MAAM,OAAO;AAAA,IACvD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,6BAA6B,QAAiB,SAA0C;AAC5F,UAAM,KAAK,UAAU;AAAA,MACnB,KAAK,eAAe,+BAA+B,MAAM;AAAA,MACzD;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAM,mBACJ,aACA,SACe;AACf,QAAI,CAAC,eAAe,EAAE,uBAAuB,iCAAc;AACzD,YAAM,IAAI,MAAM,gEAAgE;AAAA,IAClF;AAEA,UAAM,MAAM,KAAK,eAAe,uBAAuB;AACvD,UAAM,KAAK,UAAU,SAAS,KAAK;AAAA,MACjC,GAAG;AAAA,MACH;AAAA,MACA,oBAAoB;AAAA,MACpB,CAAC,wCAAqB,GAAG;AAAA,IAC3B,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAM,iBAAiB,aAA0B,SAAgD;AAC/F,QAAI,CAAC,KAAK,eAAe,QAAQ,SAAS,YAAY;AACpD,YAAM,IAAI,MAAM,mCAAmC,KAAK,UAAU,QAAQ,OAAO;AAAA,IACnF;AAEA,QAAI,CAAC,eAAe,EAAE,uBAAuB,iCAAc;AACzD,YAAM,IAAI,MAAM,8DAA8D;AAAA,IAChF;AAEA,UAAM,MAAM,KAAK,eAAe,qBAAqB,QAAQ,aAAa;AAC1E,UAAM,KAAK,UAAU,SAAS,KAAK,EAAE,GAAG,SAAS,aAAa,oBAAoB,MAAM,CAAC;AAAA,EAC3F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAM,mBACJ,aACA,SACe;AACf,QAAI,CAAC,KAAK,eAAe,QAAQ,SAAS,YAAY;AACpD,YAAM,IAAI,MAAM,mCAAmC,KAAK,UAAU,QAAQ,OAAO;AAAA,IACnF;AAEA,QAAI,CAAC,eAAe,EAAE,uBAAuB,iCAAc;AACzD,YAAM,IAAI,MAAM,gEAAgE;AAAA,IAClF;AAEA,UAAM,MAAM,KAAK,eAAe,uBAAuB,QAAQ,aAAa;AAC5E,UAAM,KAAK,UAAU,SAAS,KAAK;AAAA,MACjC,GAAG;AAAA,MACH;AAAA,MACA,oBAAoB;AAAA,MACpB,CAAC,wCAAqB,GAAG;AAAA,IAC3B,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAM,qBACJ,aACA,SACe;AACf,QAAI,CAAC,eAAe,EAAE,uBAAuB,iCAAc;AACzD,YAAM,IAAI,MAAM,kEAAkE;AAAA,IACpF;AAEA,UAAM,MAAM,KAAK,eAAe,yBAAyB;AACzD,UAAM,KAAK,UAAU,SAAS,KAAK;AAAA,MACjC,GAAG;AAAA,MACH;AAAA,MACA,oBAAoB;AAAA,MACpB,CAAC,wCAAqB,GAAG;AAAA,IAC3B,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAM,mBACJ,aACA,SACe;AACf,QAAI,CAAC,KAAK,eAAe,QAAQ,SAAS,wCAAwC;AAChF,YAAM,IAAI;AAAA,QACR,2EAA2E,KAAK,UAAU,QAAQ;AAAA,MACpG;AAAA,IACF;AAEA,QAAI,CAAC,eAAe,EAAE,uBAAuB,iCAAc;AACzD,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,UAAM,MAAM,KAAK,eAAe,uBAAuB,QAAQ,cAAc;AAC7E,UAAM,KAAK,UAAU,SAAS,KAAK,EAAE,GAAG,SAAS,aAAa,oBAAoB,MAAM,CAAC;AAAA,EAC3F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAM,kBACJ,aACA,SACe;AACf,QAAI,CAAC,eAAe,EAAE,uBAAuB,iCAAc;AACzD,YAAM,IAAI,MAAM,+DAA+D;AAAA,IACjF;AAEA,UAAM,eAAe,EAAE,GAAG,SAAS,aAAa,oBAAoB,MAAM;AAC1E,QACE,aAAa,kBACb,CAAC,KAAK,eAAe,QAAQ,SAAS,wCACtC;AACA,YAAMC,OAAM,KAAK,eAAe,uBAAuB,aAAa,cAAc;AAClF,YAAM,KAAK,UAAU,SAASA,MAAK,YAAY;AAAA,IACjD;AAEA,UAAM,MAAM,KAAK,eAAe,sBAAsB,OAAO;AAC7D,UAAM,KAAK,UAAU,SAAS,KAAK,YAAY;AAC/C,QACE,aAAa,kBACb,KAAK,UAAU,QAAQ,SAAS,wCAChC;AACA,YAAM,YAAY,kBAAkB,aAAa,cAAc;AAAA,IACjE;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,WAAW,cAA4B,SAAgD;AAC3F,UAAM,oBAAoB,EAAE,GAAG,QAAQ;AACvC,UAAM,MAAM,KAAK,eAAe,gBAAgB,cAAc,iBAAiB;AAE/E,WAAO,kBAAkB;AAEzB,WAAO,KAAK,UAAU,SAAS,KAAK;AAAA,MAClC,GAAG;AAAA,MACH,KAAK;AAAA,MACL,MAAM,8BAAW;AAAA,IACnB,CAAC;AAAA,EACH;AACF;",
  "names": ["assert", "isEmpty", "sql"]
}
