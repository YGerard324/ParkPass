{
  "version": 3,
  "sources": ["../../src/abstract-dialect/query.js"],
  "sourcesContent": ["'use strict';\n\nimport NodeUtil from 'node:util';\nimport { AbstractDataType } from './data-types';\n\nimport chain from 'lodash/chain';\nimport findKey from 'lodash/findKey';\nimport isEmpty from 'lodash/isEmpty';\nimport reduce from 'lodash/reduce';\n\nconst { QueryTypes } = require('../query-types');\nconst Dot = require('dottie');\nconst deprecations = require('../utils/deprecations');\nconst crypto = require('node:crypto');\n\nexport class AbstractQuery {\n  constructor(connection, sequelize, options) {\n    this.uuid = crypto.randomUUID();\n    this.connection = connection;\n    this.instance = options.instance;\n    this.model = options.model;\n    this.sequelize = sequelize;\n    this.options = {\n      plain: false,\n      raw: false,\n      logging: console.debug,\n      ...options,\n    };\n    this.checkLoggingOption();\n\n    if (options.rawErrors) {\n      // The default implementation in AbstractQuery just returns the same\n      // error object. By overidding this.formatError, this saves every dialect\n      // having to check for options.rawErrors in their own formatError\n      // implementations.\n      this.formatError = AbstractQuery.prototype.formatError;\n    }\n  }\n\n  async logWarnings(results) {\n    const warningResults = await this.run('SHOW WARNINGS');\n    const warningMessage = `${this.sequelize.dialect.name} warnings (${this.connection.uuid || 'default'}): `;\n    const messages = [];\n    for (const _warningRow of warningResults) {\n      if (_warningRow === undefined || typeof _warningRow[Symbol.iterator] !== 'function') {\n        continue;\n      }\n\n      for (const _warningResult of _warningRow) {\n        if (Object.hasOwn(_warningResult, 'Message')) {\n          messages.push(_warningResult.Message);\n        } else {\n          for (const _objectKey of _warningResult.keys()) {\n            messages.push([_objectKey, _warningResult[_objectKey]].join(': '));\n          }\n        }\n      }\n    }\n\n    this.sequelize.log(warningMessage + messages.join('; '), this.options);\n\n    return results;\n  }\n\n  /**\n   * Formats a raw database error from the database library into a common Sequelize exception.\n   *\n   * @param {Error} error The exception object.\n   * @param {object} errStack The stack trace that started the database query.\n   * @returns {BaseError} the new formatted error object.\n   */\n  formatError(error, errStack) {\n    // Default implementation, no formatting.\n    // Each dialect overrides this method to parse errors from their respective the database engines.\n    error.stack = errStack;\n\n    return error;\n  }\n\n  /**\n   * Execute the passed sql query.\n   *\n   * Examples:\n   *\n   *     query.run('SELECT 1')\n   *\n   * @private\n   */\n  run() {\n    throw new Error(\"The run method wasn't overwritten!\");\n  }\n\n  /**\n   * Check the logging option of the instance and print deprecation warnings.\n   *\n   * @private\n   */\n  checkLoggingOption() {\n    if (this.options.logging === true) {\n      deprecations.noTrueLogging();\n      this.options.logging = console.debug;\n    }\n  }\n\n  /**\n   * Get the attributes of an insert query, which contains the just inserted id.\n   *\n   * @returns {string} The field name.\n   * @private\n   */\n  getInsertIdField() {\n    return 'insertId';\n  }\n\n  getUniqueConstraintErrorMessage(field) {\n    if (!field) {\n      return 'Must be unique';\n    }\n\n    const message = `${field} must be unique`;\n\n    if (!this.model) {\n      return message;\n    }\n\n    for (const index of this.model.getIndexes()) {\n      if (!index.unique) {\n        continue;\n      }\n\n      if (index.fields.includes(field.replaceAll('\"', '')) && index.msg) {\n        return index.msg;\n      }\n    }\n\n    return message;\n  }\n\n  isRawQuery() {\n    return this.options.type === QueryTypes.RAW;\n  }\n\n  isUpsertQuery() {\n    return this.options.type === QueryTypes.UPSERT;\n  }\n\n  isInsertQuery(results, metaData) {\n    let result = true;\n\n    if (this.options.type === QueryTypes.INSERT) {\n      return true;\n    }\n\n    // is insert query if sql contains insert into\n    result &&= this.sql.toLowerCase().startsWith('insert into');\n\n    // is insert query if no results are passed or if the result has the inserted id\n    result &&= !results || Object.hasOwn(results, this.getInsertIdField());\n\n    // is insert query if no metadata are passed or if the metadata has the inserted id\n    result &&= !metaData || Object.hasOwn(metaData, this.getInsertIdField());\n\n    return result;\n  }\n\n  handleInsertQuery(results, metaData) {\n    if (!this.instance) {\n      return;\n    }\n\n    const autoIncrementAttribute = this.model.modelDefinition.autoIncrementAttributeName;\n    const id = results?.[this.getInsertIdField()] ?? metaData?.[this.getInsertIdField()] ?? null;\n\n    this.instance[autoIncrementAttribute] = id;\n  }\n\n  isShowIndexesQuery() {\n    return this.options.type === QueryTypes.SHOWINDEXES;\n  }\n\n  isShowConstraintsQuery() {\n    return this.options.type === QueryTypes.SHOWCONSTRAINTS;\n  }\n\n  isDescribeQuery() {\n    return this.options.type === QueryTypes.DESCRIBE;\n  }\n\n  isSelectQuery() {\n    return this.options.type === QueryTypes.SELECT;\n  }\n\n  isBulkUpdateQuery() {\n    return this.options.type === QueryTypes.BULKUPDATE;\n  }\n\n  isDeleteQuery() {\n    return this.options.type === QueryTypes.DELETE;\n  }\n\n  isUpdateQuery() {\n    return this.options.type === QueryTypes.UPDATE;\n  }\n\n  handleSelectQuery(results) {\n    let result = null;\n\n    // Map raw fields to names if a mapping is provided\n    if (this.options.fieldMap) {\n      const fieldMap = this.options.fieldMap;\n      results = results.map(result =>\n        reduce(\n          fieldMap,\n          (result, name, field) => {\n            if (result[field] !== undefined && name !== field) {\n              result[name] = result[field];\n              delete result[field];\n            }\n\n            return result;\n          },\n          result,\n        ),\n      );\n    }\n\n    // Raw queries\n    if (this.options.raw) {\n      result = results.map(result => {\n        let o = {};\n\n        for (const key in result) {\n          if (Object.hasOwn(result, key)) {\n            o[key] = result[key];\n          }\n        }\n\n        if (this.options.nest) {\n          o = Dot.transform(o);\n        }\n\n        return o;\n      });\n      // Queries with include\n    } else if (this.options.hasJoin === true) {\n      results = AbstractQuery._groupJoinData(\n        results,\n        {\n          model: this.model,\n          includeMap: this.options.includeMap,\n          includeNames: this.options.includeNames,\n        },\n        {\n          checkExisting: this.options.hasMultiAssociation,\n        },\n      );\n\n      result = this.model.bulkBuild(\n        this._parseDataArrayByType(results, this.model, this.options.includeMap),\n        {\n          isNewRecord: false,\n          include: this.options.include,\n          includeNames: this.options.includeNames,\n          includeMap: this.options.includeMap,\n          includeValidated: true,\n          attributes: this.options.originalAttributes || this.options.attributes,\n          raw: true,\n          comesFromDatabase: true,\n        },\n      );\n      // Regular queries\n    } else {\n      result = this.model.bulkBuild(\n        this._parseDataArrayByType(results, this.model, this.options.includeMap),\n        {\n          isNewRecord: false,\n          raw: true,\n          comesFromDatabase: true,\n          attributes: this.options.originalAttributes || this.options.attributes,\n        },\n      );\n    }\n\n    // return the first real model instance if options.plain is set (e.g. Model.find)\n    if (this.options.plain) {\n      result = result.length === 0 ? null : result[0];\n    }\n\n    return result;\n  }\n\n  /**\n   * Calls {@link DataTypes.ABSTRACT#parseDatabaseValue} on all attributes returned by the database, if a model is specified.\n   *\n   * This method mutates valueArrays.\n   *\n   * @param {Array} valueArrays The values to parse\n   * @param {Model} model The model these values belong to\n   * @param {object} includeMap The list of included associations\n   */\n  _parseDataArrayByType(valueArrays, model, includeMap) {\n    for (const values of valueArrays) {\n      this._parseDataByType(values, model, includeMap);\n    }\n\n    return valueArrays;\n  }\n\n  _parseDataByType(values, model, includeMap) {\n    for (const key of Object.keys(values)) {\n      // parse association values\n      // hasOwnProperty is very important here. An include could be called \"toString\"\n      if (includeMap && Object.hasOwn(includeMap, key)) {\n        if (Array.isArray(values[key])) {\n          values[key] = this._parseDataArrayByType(\n            values[key],\n            includeMap[key].model,\n            includeMap[key].includeMap,\n          );\n        } else {\n          values[key] = this._parseDataByType(\n            values[key],\n            includeMap[key].model,\n            includeMap[key].includeMap,\n          );\n        }\n\n        continue;\n      }\n\n      const attribute = model?.modelDefinition.attributes.get(key);\n      values[key] = this._parseDatabaseValue(values[key], attribute?.type);\n    }\n\n    return values;\n  }\n\n  _parseDatabaseValue(value, attributeType) {\n    if (value == null) {\n      return value;\n    }\n\n    if (!attributeType || !(attributeType instanceof AbstractDataType)) {\n      return value;\n    }\n\n    return attributeType.parseDatabaseValue(value);\n  }\n\n  isShowOrDescribeQuery() {\n    let result = false;\n\n    result ||= this.sql.toLowerCase().startsWith('show');\n    result ||= this.sql.toLowerCase().startsWith('describe');\n\n    return result;\n  }\n\n  isCallQuery() {\n    return this.sql.toLowerCase().startsWith('call');\n  }\n\n  /**\n   * @param {string} sql\n   * @param {Function} debugContext\n   * @param {Array|object} parameters\n   * @protected\n   * @returns {Function} A function to call after the query was completed.\n   */\n  _logQuery(sql, debugContext, parameters) {\n    const { connection, options } = this;\n    const benchmark = this.sequelize.options.benchmark || options.benchmark;\n    const logQueryParameters =\n      this.sequelize.options.logQueryParameters || options.logQueryParameters;\n    const startTime = Date.now();\n    let logParameter = '';\n\n    if (logQueryParameters && parameters) {\n      const delimiter = sql.endsWith(';') ? '' : ';';\n\n      logParameter = `${delimiter} with parameters ${NodeUtil.inspect(parameters)}`;\n    }\n\n    const fmt = `(${connection.uuid || 'default'}): ${sql}${logParameter}`;\n    const queryLabel = options.queryLabel ? `${options.queryLabel}\\n` : '';\n    const msg = `${queryLabel}Executing ${fmt}`;\n    debugContext(msg);\n    if (!benchmark) {\n      this.sequelize.log(`${queryLabel}Executing ${fmt}`, options);\n    }\n\n    return () => {\n      const afterMsg = `${queryLabel}Executed ${fmt}`;\n      debugContext(afterMsg);\n      if (benchmark) {\n        this.sequelize.log(afterMsg, Date.now() - startTime, options);\n      }\n    };\n  }\n\n  /**\n   * The function takes the result of the query execution and groups\n   * the associated data by the callee.\n   *\n   * Example:\n   *   groupJoinData([\n   *     {\n   *       some: 'data',\n   *       id: 1,\n   *       association: { foo: 'bar', id: 1 }\n   *     }, {\n   *       some: 'data',\n   *       id: 1,\n   *       association: { foo: 'bar', id: 2 }\n   *     }, {\n   *       some: 'data',\n   *       id: 1,\n   *       association: { foo: 'bar', id: 3 }\n   *     }\n   *   ])\n   *\n   * Result:\n   *   Something like this:\n   *\n   *   [\n   *     {\n   *       some: 'data',\n   *       id: 1,\n   *       association: [\n   *         { foo: 'bar', id: 1 },\n   *         { foo: 'bar', id: 2 },\n   *         { foo: 'bar', id: 3 }\n   *       ]\n   *     }\n   *   ]\n   *\n   * @param {Array} rows\n   * @param {object} includeOptions\n   * @param {object} options\n   * @private\n   */\n  static _groupJoinData(rows, includeOptions, options) {\n    /*\n     * Assumptions\n     * ID is not necessarily the first field\n     * All fields for a level is grouped in the same set (i.e. Panel.id, Task.id, Panel.title is not possible)\n     * Parent keys will be seen before any include/child keys\n     * Previous set won't necessarily be parent set (one parent could have two children, one child would then be previous set for the other)\n     */\n\n    /*\n     * Author (MH) comment: This code is an unreadable mess, but it's performant.\n     * groupJoinData is a performance critical function so we prioritize perf over readability.\n     */\n    if (rows.length === 0) {\n      return [];\n    }\n\n    // Generic looping\n    let i;\n    let length;\n    let $i;\n    let $length;\n    // Row specific looping\n    let rowsI;\n    let row;\n    const rowsLength = rows.length;\n    // Key specific looping\n    let keys;\n    let key;\n    let keyI;\n    let keyLength;\n    let prevKey;\n    let values;\n    let topValues;\n    let topExists;\n    const checkExisting = options.checkExisting;\n    // If we don't have to deduplicate we can pre-allocate the resulting array\n    let itemHash;\n    let parentHash;\n    let topHash;\n    const results = checkExisting ? [] : Array.from({ length: rowsLength });\n    const resultMap = {};\n    const includeMap = {};\n    // Result variables for the respective functions\n    let $keyPrefix;\n    let $prevKeyPrefix;\n    let $lastKeyPrefix;\n    let $current;\n    let $parent;\n    // Map each key to an include option\n    let previousPiece;\n    const buildIncludeMap = piece => {\n      if (Object.hasOwn($current.includeMap, piece)) {\n        includeMap[key] = $current = $current.includeMap[piece];\n        if (previousPiece) {\n          previousPiece = `${previousPiece}.${piece}`;\n        } else {\n          previousPiece = piece;\n        }\n\n        includeMap[previousPiece] = $current;\n      }\n    };\n\n    // Calculate the string prefix of a key ('User.Results' for 'User.Results.id')\n    const keyPrefixStringMemo = {};\n    const keyPrefixString = (key, memo) => {\n      if (!Object.hasOwn(memo, key)) {\n        memo[key] = key.slice(0, Math.max(0, key.lastIndexOf('.')));\n      }\n\n      return memo[key];\n    };\n\n    // Removes the prefix from a key ('id' for 'User.Results.id')\n    const removeKeyPrefixMemo = {};\n    const removeKeyPrefix = key => {\n      if (!Object.hasOwn(removeKeyPrefixMemo, key)) {\n        const index = key.lastIndexOf('.');\n        removeKeyPrefixMemo[key] = key.slice(index === -1 ? 0 : index + 1);\n      }\n\n      return removeKeyPrefixMemo[key];\n    };\n\n    // Calculates the array prefix of a key (['User', 'Results'] for 'User.Results.id')\n    const keyPrefixMemo = {};\n    const keyPrefix = key => {\n      // We use a double memo and keyPrefixString so that different keys with the same prefix will receive the same array instead of differnet arrays with equal values\n      if (!Object.hasOwn(keyPrefixMemo, key)) {\n        const prefixString = keyPrefixString(key, keyPrefixStringMemo);\n        if (!Object.hasOwn(keyPrefixMemo, prefixString)) {\n          keyPrefixMemo[prefixString] = prefixString ? prefixString.split('.') : [];\n        }\n\n        keyPrefixMemo[key] = keyPrefixMemo[prefixString];\n      }\n\n      return keyPrefixMemo[key];\n    };\n\n    // Calcuate the last item in the array prefix ('Results' for 'User.Results.id')\n    const lastKeyPrefixMemo = {};\n    const lastKeyPrefix = key => {\n      if (!Object.hasOwn(lastKeyPrefixMemo, key)) {\n        const prefix = keyPrefix(key);\n        const length = prefix.length;\n\n        lastKeyPrefixMemo[key] = !length ? '' : prefix[length - 1];\n      }\n\n      return lastKeyPrefixMemo[key];\n    };\n\n    // sort the array by the level of their depth calculated by dot.\n    const sortByDepth = keys => keys.sort((a, b) => a.split('.').length - b.split('.').length);\n\n    const getUniqueKeyAttributes = model => {\n      let uniqueKeyAttributes = chain(model.uniqueKeys);\n      uniqueKeyAttributes = uniqueKeyAttributes\n        .result(`${uniqueKeyAttributes.findKey()}.fields`)\n        .map(field => findKey(model.attributes, chr => chr.field === field))\n        .value();\n\n      return uniqueKeyAttributes;\n    };\n\n    const stringify = obj => (obj instanceof Buffer ? obj.toString('hex') : obj);\n    let primaryKeyAttributes;\n    let uniqueKeyAttributes;\n    let prefix;\n\n    for (rowsI = 0; rowsI < rowsLength; rowsI++) {\n      row = rows[rowsI];\n\n      // Keys are the same for all rows, so only need to compute them on the first row\n      if (rowsI === 0) {\n        keys = sortByDepth(Object.keys(row));\n        keyLength = keys.length;\n      }\n\n      if (checkExisting) {\n        topExists = false;\n\n        // Compute top level hash key (this is usually just the primary key values)\n        $length = includeOptions.model.primaryKeyAttributes.length;\n        topHash = '';\n        if ($length === 1) {\n          topHash = stringify(row[includeOptions.model.primaryKeyAttributes[0]]);\n        } else if ($length > 1) {\n          for ($i = 0; $i < $length; $i++) {\n            topHash += stringify(row[includeOptions.model.primaryKeyAttributes[$i]]);\n          }\n        } else if (!isEmpty(includeOptions.model.uniqueKeys)) {\n          uniqueKeyAttributes = getUniqueKeyAttributes(includeOptions.model);\n          for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n            topHash += row[uniqueKeyAttributes[$i]];\n          }\n        }\n      }\n\n      topValues = values = {};\n      $prevKeyPrefix = undefined;\n      for (keyI = 0; keyI < keyLength; keyI++) {\n        key = keys[keyI];\n\n        // The string prefix isn't actualy needed\n        // We use it so keyPrefix for different keys will resolve to the same array if they have the same prefix\n        // TODO: Find a better way?\n        $keyPrefix = keyPrefix(key);\n\n        // On the first row we compute the includeMap\n        if (rowsI === 0 && !Object.hasOwn(includeMap, key)) {\n          if ($keyPrefix.length === 0) {\n            includeMap[key] = includeMap[''] = includeOptions;\n          } else {\n            $current = includeOptions;\n            previousPiece = undefined;\n            $keyPrefix.forEach(buildIncludeMap);\n          }\n        }\n\n        // End of key set\n        if ($prevKeyPrefix !== undefined && $prevKeyPrefix !== $keyPrefix) {\n          if (checkExisting) {\n            // Compute hash key for this set instance\n            // TODO: Optimize\n            length = $prevKeyPrefix.length;\n            $parent = null;\n            parentHash = null;\n\n            if (length) {\n              for (i = 0; i < length; i++) {\n                prefix = $parent ? `${$parent}.${$prevKeyPrefix[i]}` : $prevKeyPrefix[i];\n                primaryKeyAttributes = includeMap[prefix].model.primaryKeyAttributes;\n                $length = primaryKeyAttributes.length;\n                itemHash = prefix;\n                if ($length === 1) {\n                  itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[0]}`]);\n                } else if ($length > 1) {\n                  for ($i = 0; $i < $length; $i++) {\n                    itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[$i]}`]);\n                  }\n                } else if (!isEmpty(includeMap[prefix].model.uniqueKeys)) {\n                  uniqueKeyAttributes = getUniqueKeyAttributes(includeMap[prefix].model);\n                  for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n                    itemHash += row[`${prefix}.${uniqueKeyAttributes[$i]}`];\n                  }\n                }\n\n                if (!parentHash) {\n                  parentHash = topHash;\n                }\n\n                itemHash = parentHash + itemHash;\n                $parent = prefix;\n                if (i < length - 1) {\n                  parentHash = itemHash;\n                }\n              }\n            } else {\n              itemHash = topHash;\n            }\n\n            if (itemHash === topHash) {\n              if (!resultMap[itemHash]) {\n                resultMap[itemHash] = values;\n              } else {\n                topExists = true;\n              }\n            } else if (!resultMap[itemHash]) {\n              $parent = resultMap[parentHash];\n              $lastKeyPrefix = lastKeyPrefix(prevKey);\n\n              if (includeMap[prevKey].association.isSingleAssociation) {\n                if ($parent) {\n                  $parent[$lastKeyPrefix] = resultMap[itemHash] = values;\n                }\n              } else {\n                if (!$parent[$lastKeyPrefix]) {\n                  $parent[$lastKeyPrefix] = [];\n                }\n\n                $parent[$lastKeyPrefix].push((resultMap[itemHash] = values));\n              }\n            }\n\n            // Reset values\n            values = {};\n          } else {\n            // If checkExisting is false it's because there's only 1:1 associations in this query\n            // However we still need to map onto the appropriate parent\n            // For 1:1 we map forward, initializing the value object on the parent to be filled in the next iterations of the loop\n            $current = topValues;\n            length = $keyPrefix.length;\n            if (length) {\n              for (i = 0; i < length; i++) {\n                if (i === length - 1) {\n                  values = $current[$keyPrefix[i]] = {};\n                }\n\n                $current = $current[$keyPrefix[i]] || {};\n              }\n            }\n          }\n        }\n\n        // End of iteration, set value and set prev values (for next iteration)\n        values[removeKeyPrefix(key)] = row[key];\n        prevKey = key;\n        $prevKeyPrefix = $keyPrefix;\n      }\n\n      if (checkExisting) {\n        length = $prevKeyPrefix.length;\n        $parent = null;\n        parentHash = null;\n\n        if (length) {\n          for (i = 0; i < length; i++) {\n            prefix = $parent ? `${$parent}.${$prevKeyPrefix[i]}` : $prevKeyPrefix[i];\n            primaryKeyAttributes = includeMap[prefix].model.primaryKeyAttributes;\n            $length = primaryKeyAttributes.length;\n            itemHash = prefix;\n            if ($length === 1) {\n              itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[0]}`]);\n            } else if ($length > 0) {\n              for ($i = 0; $i < $length; $i++) {\n                itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[$i]}`]);\n              }\n            } else if (!isEmpty(includeMap[prefix].model.uniqueKeys)) {\n              uniqueKeyAttributes = getUniqueKeyAttributes(includeMap[prefix].model);\n              for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n                itemHash += row[`${prefix}.${uniqueKeyAttributes[$i]}`];\n              }\n            }\n\n            if (!parentHash) {\n              parentHash = topHash;\n            }\n\n            itemHash = parentHash + itemHash;\n            $parent = prefix;\n            if (i < length - 1) {\n              parentHash = itemHash;\n            }\n          }\n        } else {\n          itemHash = topHash;\n        }\n\n        if (itemHash === topHash) {\n          if (!resultMap[itemHash]) {\n            resultMap[itemHash] = values;\n          } else {\n            topExists = true;\n          }\n        } else if (!resultMap[itemHash]) {\n          $parent = resultMap[parentHash];\n          $lastKeyPrefix = lastKeyPrefix(prevKey);\n\n          if (includeMap[prevKey].association.isSingleAssociation) {\n            if ($parent) {\n              $parent[$lastKeyPrefix] = resultMap[itemHash] = values;\n            }\n          } else {\n            if (!$parent[$lastKeyPrefix]) {\n              $parent[$lastKeyPrefix] = [];\n            }\n\n            $parent[$lastKeyPrefix].push((resultMap[itemHash] = values));\n          }\n        }\n\n        if (!topExists) {\n          results.push(topValues);\n        }\n      } else {\n        results[rowsI] = topValues;\n      }\n    }\n\n    return results;\n  }\n}\n"],
  "mappings": "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",
  "names": ["result", "reduce", "NodeUtil", "key", "prefix", "length", "keys", "uniqueKeyAttributes", "chain", "findKey", "isEmpty"]
}
