{
  "version": 3,
  "sources": ["../../src/abstract-dialect/connection-manager.ts"],
  "sourcesContent": ["import type { AbstractDialect, ConnectionOptions } from './dialect.js';\n\nexport interface GetConnectionOptions {\n  /**\n   * Set which replica to use. Available options are `read` and `write`\n   */\n  type: 'read' | 'write';\n\n  /**\n   * Force master or write replica to get connection from\n   */\n  useMaster?: boolean;\n}\n\nexport interface AbstractConnection {\n  /** The UUID of the transaction that is using this connection */\n  // TODO: replace with the transaction object itself.\n  uuid?: string | undefined;\n}\n\ndeclare const ConnectionType: unique symbol;\nexport type Connection<\n  DialectOrConnectionManager extends AbstractDialect | AbstractConnectionManager,\n> = DialectOrConnectionManager extends AbstractDialect\n  ? Connection<DialectOrConnectionManager['connectionManager']>\n  : DialectOrConnectionManager extends AbstractConnectionManager\n    ? DialectOrConnectionManager[typeof ConnectionType]\n    : never;\n\n/**\n * Abstract Connection Manager\n *\n * Connection manager which handles pooling & replication.\n * Uses sequelize-pool for pooling\n *\n * @param connection\n */\nexport class AbstractConnectionManager<\n  Dialect extends AbstractDialect = AbstractDialect,\n  TConnection extends AbstractConnection = AbstractConnection,\n> {\n  declare [ConnectionType]: TConnection;\n\n  protected readonly dialect: Dialect;\n\n  constructor(dialect: Dialect) {\n    this.dialect = dialect;\n  }\n\n  protected get sequelize() {\n    return this.dialect.sequelize;\n  }\n\n  get pool(): never {\n    throw new Error('The \"pool\" property has been moved to the Sequelize instance.');\n  }\n\n  /**\n   * Determine if a connection is still valid or not\n   *\n   * @param _connection\n   */\n  validate(_connection: TConnection): boolean {\n    throw new Error(`validate not implemented in ${this.constructor.name}`);\n  }\n\n  async connect(_config: ConnectionOptions<Dialect>): Promise<TConnection> {\n    throw new Error(`connect not implemented in ${this.constructor.name}`);\n  }\n\n  async disconnect(_connection: TConnection): Promise<void> {\n    throw new Error(`disconnect not implemented in ${this.constructor.name}`);\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAqCO,MAAM,0BAGX;AAAA,EAGmB;AAAA,EAEnB,YAAY,SAAkB;AAC5B,SAAK,UAAU;AAAA,EACjB;AAAA,EAEA,IAAc,YAAY;AACxB,WAAO,KAAK,QAAQ;AAAA,EACtB;AAAA,EAEA,IAAI,OAAc;AAChB,UAAM,IAAI,MAAM,+DAA+D;AAAA,EACjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,SAAS,aAAmC;AAC1C,UAAM,IAAI,MAAM,+BAA+B,KAAK,YAAY,MAAM;AAAA,EACxE;AAAA,EAEA,MAAM,QAAQ,SAA2D;AACvE,UAAM,IAAI,MAAM,8BAA8B,KAAK,YAAY,MAAM;AAAA,EACvE;AAAA,EAEA,MAAM,WAAW,aAAyC;AACxD,UAAM,IAAI,MAAM,iCAAiC,KAAK,YAAY,MAAM;AAAA,EAC1E;AACF;",
  "names": []
}
