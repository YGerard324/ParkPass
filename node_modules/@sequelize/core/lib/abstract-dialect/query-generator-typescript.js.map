{
  "version": 3,
  "sources": ["../../src/abstract-dialect/query-generator-typescript.ts"],
  "sourcesContent": ["import type { RequiredBy } from '@sequelize/utils';\nimport { EMPTY_OBJECT, isPlainObject, join, map } from '@sequelize/utils';\nimport isObject from 'lodash/isObject';\nimport { randomUUID } from 'node:crypto';\nimport NodeUtil from 'node:util';\nimport type { Class } from 'type-fest';\nimport { ConstraintChecking } from '../deferrable.js';\nimport { AssociationPath } from '../expression-builders/association-path.js';\nimport { Attribute } from '../expression-builders/attribute.js';\nimport { BaseSqlExpression } from '../expression-builders/base-sql-expression.js';\nimport { Cast } from '../expression-builders/cast.js';\nimport { Col } from '../expression-builders/col.js';\nimport { DialectAwareFn } from '../expression-builders/dialect-aware-fn.js';\nimport { Fn } from '../expression-builders/fn.js';\nimport { Identifier } from '../expression-builders/identifier.js';\nimport { JsonPath } from '../expression-builders/json-path.js';\nimport { List } from '../expression-builders/list.js';\nimport { Literal } from '../expression-builders/literal.js';\nimport { Value } from '../expression-builders/value.js';\nimport { Where } from '../expression-builders/where.js';\nimport { IndexHints } from '../index-hints.js';\nimport type { ModelDefinition } from '../model-definition.js';\nimport type { Attributes, Model, ModelStatic } from '../model.js';\nimport { Op } from '../operators.js';\nimport type { BindOrReplacements, Expression } from '../sequelize.js';\nimport { bestGuessDataTypeOfVal } from '../sql-string.js';\nimport { TableHints } from '../table-hints.js';\nimport type { IsolationLevel } from '../transaction.js';\nimport { rejectInvalidOptions } from '../utils/check.js';\nimport { noOpCol } from '../utils/deprecations.js';\nimport { quoteIdentifier } from '../utils/dialect.js';\nimport { joinSQLFragments } from '../utils/join-sql-fragments.js';\nimport {\n  extractModelDefinition,\n  extractTableIdentifier,\n  isModelStatic,\n} from '../utils/model-utils.js';\nimport type { BindParamOptions, DataType } from './data-types.js';\nimport { AbstractDataType } from './data-types.js';\nimport type { AbstractDialect } from './dialect.js';\nimport { AbstractQueryGeneratorInternal } from './query-generator-internal.js';\nimport type {\n  AddConstraintQueryOptions,\n  BulkDeleteQueryOptions,\n  CreateDatabaseQueryOptions,\n  CreateSchemaQueryOptions,\n  DropSchemaQueryOptions,\n  DropTableQueryOptions,\n  ListDatabasesQueryOptions,\n  ListSchemasQueryOptions,\n  ListTablesQueryOptions,\n  QuoteTableOptions,\n  RemoveColumnQueryOptions,\n  RemoveConstraintQueryOptions,\n  RemoveIndexQueryOptions,\n  RenameTableQueryOptions,\n  ShowConstraintsQueryOptions,\n  StartTransactionQueryOptions,\n  TableOrModel,\n  TruncateTableQueryOptions,\n} from './query-generator.types.js';\nimport type { TableNameWithSchema } from './query-interface.js';\nimport type { WhereOptions } from './where-sql-builder-types.js';\nimport type { WhereSqlBuilder } from './where-sql-builder.js';\nimport { PojoWhere } from './where-sql-builder.js';\n\nexport const CREATE_DATABASE_QUERY_SUPPORTABLE_OPTIONS = new Set<keyof CreateDatabaseQueryOptions>([\n  'charset',\n  'collate',\n  'ctype',\n  'encoding',\n  'template',\n]);\nexport const CREATE_SCHEMA_QUERY_SUPPORTABLE_OPTIONS = new Set<keyof CreateSchemaQueryOptions>([\n  'authorization',\n  'charset',\n  'collate',\n  'comment',\n  'ifNotExists',\n  'replace',\n]);\nexport const DROP_SCHEMA_QUERY_SUPPORTABLE_OPTIONS = new Set<keyof DropSchemaQueryOptions>([\n  'cascade',\n  'ifExists',\n]);\nexport const DROP_TABLE_QUERY_SUPPORTABLE_OPTIONS = new Set<keyof DropTableQueryOptions>([\n  'cascade',\n]);\nexport const LIST_DATABASES_QUERY_SUPPORTABLE_OPTIONS = new Set<keyof ListDatabasesQueryOptions>([\n  'skip',\n]);\nexport const LIST_TABLES_QUERY_SUPPORTABLE_OPTIONS = new Set<keyof ListTablesQueryOptions>([\n  'schema',\n]);\nexport const QUOTE_TABLE_SUPPORTABLE_OPTIONS = new Set<keyof QuoteTableOptions>([\n  'indexHints',\n  'tableHints',\n]);\nexport const REMOVE_COLUMN_QUERY_SUPPORTABLE_OPTIONS = new Set<keyof RemoveColumnQueryOptions>([\n  'ifExists',\n  'cascade',\n]);\nexport const REMOVE_CONSTRAINT_QUERY_SUPPORTABLE_OPTIONS = new Set<\n  keyof RemoveConstraintQueryOptions\n>(['ifExists', 'cascade']);\nexport const REMOVE_INDEX_QUERY_SUPPORTABLE_OPTIONS = new Set<keyof RemoveIndexQueryOptions>([\n  'concurrently',\n  'ifExists',\n  'cascade',\n]);\nexport const RENAME_TABLE_QUERY_SUPPORTABLE_OPTIONS = new Set<keyof RenameTableQueryOptions>([\n  'changeSchema',\n]);\nexport const SHOW_CONSTRAINTS_QUERY_SUPPORTABLE_OPTIONS = new Set<\n  keyof ShowConstraintsQueryOptions\n>(['columnName', 'constraintName', 'constraintType']);\nexport const START_TRANSACTION_QUERY_SUPPORTABLE_OPTIONS = new Set<\n  keyof StartTransactionQueryOptions\n>(['readOnly', 'transactionType']);\nexport const TRUNCATE_TABLE_QUERY_SUPPORTABLE_OPTIONS = new Set<keyof TruncateTableQueryOptions>([\n  'cascade',\n  'restartIdentity',\n]);\n\n/**\n * Options accepted by {@link AbstractQueryGeneratorTypeScript#escape}\n */\nexport interface EscapeOptions extends FormatWhereOptions {\n  readonly type?: DataType | undefined;\n}\n\nexport interface FormatWhereOptions extends Bindable {\n  /**\n   * These are used to inline replacements into the query, when one is found inside of a {@link Literal}.\n   */\n  readonly replacements?: BindOrReplacements | undefined;\n\n  /**\n   * The model of the main alias. Used to determine the type & column name of attributes referenced in the where clause.\n   */\n  readonly model?: ModelStatic | ModelDefinition | null | undefined;\n\n  /**\n   * The alias of the main table corresponding to {@link FormatWhereOptions.model}.\n   * Used as the prefix for attributes that do not reference an association, e.g.\n   *\n   * ```ts\n   * const where = { name: 'foo' };\n   * ```\n   *\n   * will produce\n   *\n   * ```sql\n   * WHERE \"<mainAlias>\".\"name\" = 'foo'\n   * ```\n   */\n  readonly mainAlias?: string | undefined;\n}\n\n/**\n * Methods that support this option are functions that add values to the query.\n * If {@link Bindable.bindParam} is specified, the value will be added to the query as a bind parameter.\n * If it is not specified, the value will be added to the query as a literal.\n */\nexport interface Bindable {\n  bindParam?: ((value: unknown) => string) | undefined;\n}\n\n// DO NOT MAKE THIS CLASS PUBLIC!\n/**\n * This is a temporary class used to progressively migrate the AbstractQueryGenerator class to TypeScript by slowly moving its functions here.\n * Always use {@link AbstractQueryGenerator} instead.\n */\nexport class AbstractQueryGeneratorTypeScript {\n  readonly dialect: AbstractDialect;\n  readonly #internals: AbstractQueryGeneratorInternal;\n\n  constructor(\n    dialect: AbstractDialect,\n    internals: AbstractQueryGeneratorInternal = new AbstractQueryGeneratorInternal(dialect),\n  ) {\n    this.dialect = dialect;\n    this.#internals = internals;\n  }\n\n  get #whereGenerator(): WhereSqlBuilder {\n    return this.#internals.whereSqlBuilder;\n  }\n\n  protected get sequelize() {\n    return this.dialect.sequelize;\n  }\n\n  protected get options() {\n    return this.sequelize.options;\n  }\n\n  createDatabaseQuery(_database: string, _options?: CreateDatabaseQueryOptions): string {\n    if (this.dialect.supports.multiDatabases) {\n      throw new Error(\n        `${this.dialect.name} declares supporting databases but createDatabaseQuery is not implemented.`,\n      );\n    }\n\n    throw new Error(`Databases are not supported in ${this.dialect.name}.`);\n  }\n\n  dropDatabaseQuery(database: string): string {\n    if (this.dialect.supports.multiDatabases) {\n      return `DROP DATABASE IF EXISTS ${this.quoteIdentifier(database)}`;\n    }\n\n    throw new Error(`Databases are not supported in ${this.dialect.name}.`);\n  }\n\n  listDatabasesQuery(_options?: ListDatabasesQueryOptions): string {\n    if (this.dialect.supports.multiDatabases) {\n      throw new Error(\n        `${this.dialect.name} declares supporting databases but listDatabasesQuery is not implemented.`,\n      );\n    }\n\n    throw new Error(`Databases are not supported in ${this.dialect.name}.`);\n  }\n\n  createSchemaQuery(schemaName: string, options?: CreateSchemaQueryOptions): string {\n    if (!this.dialect.supports.schemas) {\n      throw new Error(`Schemas are not supported in ${this.dialect.name}.`);\n    }\n\n    if (options) {\n      rejectInvalidOptions(\n        'createSchemaQuery',\n        this.dialect,\n        CREATE_SCHEMA_QUERY_SUPPORTABLE_OPTIONS,\n        this.dialect.supports.createSchema,\n        options,\n      );\n    }\n\n    return joinSQLFragments([\n      'CREATE',\n      options?.replace ? 'OR REPLACE' : '',\n      'SCHEMA',\n      options?.ifNotExists ? 'IF NOT EXISTS' : '',\n      this.quoteIdentifier(schemaName),\n      options?.authorization\n        ? `AUTHORIZATION ${options.authorization instanceof Literal ? this.#internals.formatLiteral(options.authorization) : this.quoteIdentifier(options.authorization)}`\n        : '',\n      options?.charset ? `DEFAULT CHARACTER SET ${this.escape(options.charset)}` : '',\n      options?.collate ? `DEFAULT COLLATE ${this.escape(options.collate)}` : '',\n      options?.comment ? `COMMENT ${this.escape(options.comment)}` : '',\n    ]);\n  }\n\n  dropSchemaQuery(schemaName: string, options?: DropSchemaQueryOptions): string {\n    if (!this.dialect.supports.schemas) {\n      throw new Error(`Schemas are not supported in ${this.dialect.name}.`);\n    }\n\n    if (options) {\n      rejectInvalidOptions(\n        'dropSchemaQuery',\n        this.dialect,\n        DROP_SCHEMA_QUERY_SUPPORTABLE_OPTIONS,\n        this.dialect.supports.dropSchema,\n        options,\n      );\n    }\n\n    return joinSQLFragments([\n      'DROP SCHEMA',\n      options?.ifExists ? 'IF EXISTS' : '',\n      this.quoteIdentifier(schemaName),\n      options?.cascade ? 'CASCADE' : '',\n    ]);\n  }\n\n  listSchemasQuery(_options?: ListSchemasQueryOptions): string {\n    if (this.dialect.supports.schemas) {\n      throw new Error(\n        `${this.dialect.name} declares supporting schema but listSchemasQuery is not implemented.`,\n      );\n    }\n\n    throw new Error(`Schemas are not supported in ${this.dialect.name}.`);\n  }\n\n  describeTableQuery(tableName: TableOrModel) {\n    return `DESCRIBE ${this.quoteTable(tableName)};`;\n  }\n\n  dropTableQuery(tableName: TableOrModel, options?: DropTableQueryOptions): string {\n    if (options) {\n      rejectInvalidOptions(\n        'dropTableQuery',\n        this.dialect,\n        DROP_TABLE_QUERY_SUPPORTABLE_OPTIONS,\n        this.dialect.supports.dropTable,\n        options,\n      );\n    }\n\n    return joinSQLFragments([\n      'DROP TABLE IF EXISTS',\n      this.quoteTable(tableName),\n      options?.cascade ? 'CASCADE' : '',\n    ]);\n  }\n\n  listTablesQuery(_options?: ListTablesQueryOptions): string {\n    throw new Error(`listTablesQuery has not been implemented in ${this.dialect.name}.`);\n  }\n\n  renameTableQuery(\n    beforeTableName: TableOrModel,\n    afterTableName: TableOrModel,\n    options?: RenameTableQueryOptions,\n  ): string {\n    const beforeTable = this.extractTableDetails(beforeTableName);\n    const afterTable = this.extractTableDetails(afterTableName);\n\n    if (beforeTable.schema !== afterTable.schema && !options?.changeSchema) {\n      throw new Error(\n        'To move a table between schemas, you must set `options.changeSchema` to true.',\n      );\n    }\n\n    return `ALTER TABLE ${this.quoteTable(beforeTableName)} RENAME TO ${this.quoteTable(afterTableName)}`;\n  }\n\n  truncateTableQuery(\n    _tableName: TableOrModel,\n    _options?: TruncateTableQueryOptions,\n  ): string | string[] {\n    throw new Error(`truncateTableQuery has not been implemented in ${this.dialect.name}.`);\n  }\n\n  removeColumnQuery(\n    tableName: TableOrModel,\n    columnName: string,\n    options?: RemoveColumnQueryOptions,\n  ): string {\n    if (options) {\n      rejectInvalidOptions(\n        'removeColumnQuery',\n        this.dialect,\n        REMOVE_COLUMN_QUERY_SUPPORTABLE_OPTIONS,\n        this.dialect.supports.removeColumn,\n        options,\n      );\n    }\n\n    return joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      'DROP COLUMN',\n      options?.ifExists ? 'IF EXISTS' : '',\n      this.quoteIdentifier(columnName),\n      options?.cascade ? 'CASCADE' : '',\n    ]);\n  }\n\n  addConstraintQuery(tableName: TableOrModel, options: AddConstraintQueryOptions): string {\n    if (!this.dialect.supports.constraints.add) {\n      throw new Error(`Add constraint queries are not supported by ${this.dialect.name} dialect`);\n    }\n\n    return joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      'ADD',\n      this.#internals.getConstraintSnippet(tableName, options),\n    ]);\n  }\n\n  removeConstraintQuery(\n    tableName: TableOrModel,\n    constraintName: string,\n    options?: RemoveConstraintQueryOptions,\n  ) {\n    if (!this.dialect.supports.constraints.remove) {\n      throw new Error(\n        `Remove constraint queries are not supported by ${this.dialect.name} dialect`,\n      );\n    }\n\n    if (options) {\n      rejectInvalidOptions(\n        'removeConstraintQuery',\n        this.dialect,\n        REMOVE_CONSTRAINT_QUERY_SUPPORTABLE_OPTIONS,\n        this.dialect.supports.constraints.removeOptions,\n        options,\n      );\n    }\n\n    return joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      'DROP CONSTRAINT',\n      options?.ifExists ? 'IF EXISTS' : '',\n      this.quoteIdentifier(constraintName),\n      options?.cascade ? 'CASCADE' : '',\n    ]);\n  }\n\n  setConstraintCheckingQuery(type: ConstraintChecking): string;\n  setConstraintCheckingQuery(\n    type: Class<ConstraintChecking>,\n    constraints?: readonly string[],\n  ): string;\n  setConstraintCheckingQuery(\n    type: ConstraintChecking | Class<ConstraintChecking>,\n    constraints?: readonly string[],\n  ) {\n    if (!this.dialect.supports.constraints.deferrable) {\n      throw new Error(`Deferrable constraints are not supported by ${this.dialect.name} dialect`);\n    }\n\n    let constraintFragment = 'ALL';\n    if (type instanceof ConstraintChecking) {\n      if (type.constraints?.length) {\n        constraintFragment = type.constraints\n          .map(constraint => this.quoteIdentifier(constraint))\n          .join(', ');\n      }\n\n      return `SET CONSTRAINTS ${constraintFragment} ${type.toString()}`;\n    }\n\n    if (constraints?.length) {\n      constraintFragment = constraints\n        .map(constraint => this.quoteIdentifier(constraint))\n        .join(', ');\n    }\n\n    return `SET CONSTRAINTS ${constraintFragment} ${type.toString()}`;\n  }\n\n  showConstraintsQuery(_tableName: TableOrModel, _options?: ShowConstraintsQueryOptions): string {\n    throw new Error(`showConstraintsQuery has not been implemented in ${this.dialect.name}.`);\n  }\n\n  showIndexesQuery(_tableName: TableOrModel): string {\n    throw new Error(`showIndexesQuery has not been implemented in ${this.dialect.name}.`);\n  }\n\n  removeIndexQuery(\n    _tableName: TableOrModel,\n    _indexNameOrAttributes: string | string[],\n    _options?: RemoveIndexQueryOptions,\n  ): string {\n    throw new Error(`removeIndexQuery has not been implemented in ${this.dialect.name}.`);\n  }\n\n  /**\n   * Generates an SQL query that returns all foreign keys of a table or the foreign key constraint of a given column.\n   *\n   * @deprecated Use {@link showConstraintsQuery} instead.\n   * @param _tableName The table or associated model.\n   * @param _columnName The name of the column. Not supported by SQLite.\n   * @returns The generated SQL query.\n   */\n  getForeignKeyQuery(_tableName: TableOrModel, _columnName?: string): Error {\n    throw new Error(`getForeignKeyQuery has been deprecated. Use showConstraintsQuery instead.`);\n  }\n\n  /**\n   * Generates an SQL query that drops a foreign key constraint.\n   *\n   * @deprecated Use {@link removeConstraintQuery} instead.\n   * @param _tableName The table or associated model.\n   * @param _foreignKey The name of the foreign key constraint.\n   */\n  dropForeignKeyQuery(_tableName: TableOrModel, _foreignKey: string): Error {\n    throw new Error(`dropForeignKeyQuery has been deprecated. Use removeConstraintQuery instead.`);\n  }\n\n  /**\n   * Returns a query that commits a transaction.\n   */\n  commitTransactionQuery(): string {\n    if (this.dialect.supports.connectionTransactionMethods) {\n      throw new Error(\n        `commitTransactionQuery is not supported by the ${this.dialect.name} dialect.`,\n      );\n    }\n\n    return 'COMMIT';\n  }\n\n  /**\n   * Returns a query that creates a savepoint.\n   *\n   * @param savepointName\n   */\n  createSavepointQuery(savepointName: string): string {\n    if (!this.dialect.supports.savepoints) {\n      throw new Error(`Savepoints are not supported by ${this.dialect.name}.`);\n    }\n\n    return `SAVEPOINT ${this.quoteIdentifier(savepointName)}`;\n  }\n\n  /**\n   * Returns a query that rollbacks a savepoint.\n   *\n   * @param savepointName\n   */\n  rollbackSavepointQuery(savepointName: string): string {\n    if (!this.dialect.supports.savepoints) {\n      throw new Error(`Savepoints are not supported by ${this.dialect.name}.`);\n    }\n\n    return `ROLLBACK TO SAVEPOINT ${this.quoteIdentifier(savepointName)}`;\n  }\n\n  /**\n   * Returns a query that rollbacks a transaction.\n   */\n  rollbackTransactionQuery(): string {\n    if (this.dialect.supports.connectionTransactionMethods) {\n      throw new Error(\n        `rollbackTransactionQuery is not supported by the ${this.dialect.name} dialect.`,\n      );\n    }\n\n    return 'ROLLBACK';\n  }\n\n  /**\n   * Returns a query that sets the transaction isolation level.\n   *\n   * @param isolationLevel\n   */\n  setIsolationLevelQuery(isolationLevel: IsolationLevel): string {\n    if (!this.dialect.supports.isolationLevels) {\n      throw new Error(`Isolation levels are not supported by ${this.dialect.name}.`);\n    }\n\n    if (!this.dialect.supports.connectionTransactionMethods) {\n      return `SET TRANSACTION ISOLATION LEVEL ${isolationLevel}`;\n    }\n\n    throw new Error(`setIsolationLevelQuery is not supported by the ${this.dialect.name} dialect.`);\n  }\n\n  /**\n   * Returns a query that starts a transaction.\n   *\n   * @param options\n   */\n  startTransactionQuery(options?: StartTransactionQueryOptions): string {\n    if (this.dialect.supports.connectionTransactionMethods) {\n      throw new Error(\n        `startTransactionQuery is not supported by the ${this.dialect.name} dialect.`,\n      );\n    }\n\n    if (options) {\n      rejectInvalidOptions(\n        'startTransactionQuery',\n        this.dialect,\n        START_TRANSACTION_QUERY_SUPPORTABLE_OPTIONS,\n        this.dialect.supports.startTransaction,\n        options,\n      );\n    }\n\n    return joinSQLFragments([\n      this.dialect.supports.startTransaction.useBegin ? 'BEGIN' : 'START',\n      'TRANSACTION',\n      options?.readOnly ? 'READ ONLY' : '',\n    ]);\n  }\n\n  /**\n   * Generates a unique identifier for the current transaction.\n   */\n  generateTransactionId(): string {\n    return randomUUID();\n  }\n\n  // TODO: rename to \"normalizeTable\" & move to sequelize class\n  extractTableDetails(\n    tableOrModel: TableOrModel,\n    options?: { schema?: string; delimiter?: string },\n  ): RequiredBy<TableNameWithSchema, 'schema'> {\n    const tableIdentifier = extractTableIdentifier(tableOrModel);\n\n    if (!isPlainObject(tableIdentifier)) {\n      throw new Error(\n        `Invalid input received, got ${NodeUtil.inspect(tableOrModel)}, expected a Model Class, a TableNameWithSchema object, or a table name string`,\n      );\n    }\n\n    return {\n      ...tableIdentifier,\n      schema:\n        options?.schema ||\n        tableIdentifier.schema ||\n        this.options.schema ||\n        this.dialect.getDefaultSchema(),\n      delimiter: options?.delimiter || tableIdentifier.delimiter || '.',\n    };\n  }\n\n  /**\n   * Quote table name with optional alias and schema attribution\n   *\n   * @param param table string or object\n   * @param options options\n   */\n  quoteTable(param: TableOrModel, options?: QuoteTableOptions): string {\n    if (options) {\n      rejectInvalidOptions(\n        'quoteTable',\n        this.dialect,\n        QUOTE_TABLE_SUPPORTABLE_OPTIONS,\n        {\n          indexHints: this.dialect.supports.indexHints,\n          tableHints: this.dialect.supports.tableHints,\n        },\n        options,\n      );\n    }\n\n    if (isModelStatic(param)) {\n      param = param.table;\n    }\n\n    const tableName = this.extractTableDetails(param);\n\n    if (isObject(param) && ('as' in param || 'name' in param)) {\n      throw new Error(\n        'parameters \"as\" and \"name\" are not allowed in the first parameter of quoteTable, pass them as the second parameter.',\n      );\n    }\n\n    let sql = '';\n\n    if (this.dialect.supports.schemas) {\n      // Some users sync the same set of tables in different schemas for various reasons\n      // They then set `searchPath` when running a query to use different schemas.\n      // See https://github.com/sequelize/sequelize/pull/15274#discussion_r1020770364\n      // For this reason, we treat the default schema as equivalent to \"no schema specified\"\n      if (tableName.schema && tableName.schema !== this.dialect.getDefaultSchema()) {\n        sql += `${this.quoteIdentifier(tableName.schema)}.`;\n      }\n\n      sql += this.quoteIdentifier(tableName.tableName);\n    } else {\n      const fakeSchemaPrefix =\n        tableName.schema && tableName.schema !== this.dialect.getDefaultSchema()\n          ? tableName.schema + (tableName.delimiter || '.')\n          : '';\n\n      sql += this.quoteIdentifier(fakeSchemaPrefix + tableName.tableName);\n    }\n\n    if (options?.alias) {\n      sql += ` AS ${this.quoteIdentifier(options.alias === true ? tableName.tableName : options.alias)}`;\n    }\n\n    if (options?.indexHints) {\n      for (const hint of options.indexHints) {\n        if (IndexHints[hint.type]) {\n          sql += ` ${IndexHints[hint.type]} INDEX (${hint.values.map(indexName => this.quoteIdentifier(indexName)).join(',')})`;\n        } else {\n          throw new Error(\n            `The index hint type \"${hint.type}\" is invalid or not supported by dialect \"${this.dialect.name}\".`,\n          );\n        }\n      }\n    }\n\n    if (options?.tableHints) {\n      const hints: TableHints[] = [];\n      for (const hint of options.tableHints) {\n        if (TableHints[hint]) {\n          hints.push(TableHints[hint]);\n        } else {\n          throw new Error(\n            `The table hint \"${hint}\" is invalid or not supported by dialect \"${this.dialect.name}\".`,\n          );\n        }\n      }\n\n      if (hints.length) {\n        sql += ` WITH (${hints.join(', ')})`;\n      }\n    }\n\n    return sql;\n  }\n\n  /**\n   * Adds quotes to identifier\n   *\n   * @param identifier\n   * @param _force\n   */\n  // TODO: memoize last result\n  quoteIdentifier(identifier: string, _force?: boolean) {\n    return quoteIdentifier(identifier, this.dialect.TICK_CHAR_LEFT, this.dialect.TICK_CHAR_RIGHT);\n  }\n\n  isSameTable(tableA: TableOrModel, tableB: TableOrModel) {\n    if (tableA === tableB) {\n      return true;\n    }\n\n    tableA = this.extractTableDetails(tableA);\n    tableB = this.extractTableDetails(tableB);\n\n    return tableA.tableName === tableB.tableName && tableA.schema === tableB.schema;\n  }\n\n  whereQuery<M extends Model>(where: WhereOptions<Attributes<M>>, options?: FormatWhereOptions) {\n    const query = this.whereItemsQuery(where, options);\n    if (query && query.length > 0) {\n      return `WHERE ${query}`;\n    }\n\n    return '';\n  }\n\n  whereItemsQuery<M extends Model>(\n    where: WhereOptions<Attributes<M>> | undefined,\n    options?: FormatWhereOptions,\n  ) {\n    return this.#whereGenerator.formatWhereOptions(where, options);\n  }\n\n  formatSqlExpression(piece: BaseSqlExpression, options?: EscapeOptions): string {\n    if (piece instanceof Literal) {\n      return this.#internals.formatLiteral(piece, options);\n    }\n\n    if (piece instanceof Fn) {\n      return this.#internals.formatFn(piece, options);\n    }\n\n    if (piece instanceof List) {\n      return this.escapeList(piece.values, options);\n    }\n\n    if (piece instanceof Value) {\n      return this.escape(piece.value, options);\n    }\n\n    if (piece instanceof Identifier) {\n      return this.quoteIdentifier(piece.value);\n    }\n\n    if (piece instanceof Cast) {\n      return this.#internals.formatCast(piece, options);\n    }\n\n    if (piece instanceof Col) {\n      return this.#internals.formatCol(piece, options);\n    }\n\n    if (piece instanceof Attribute) {\n      return this.#internals.formatAttribute(piece, options);\n    }\n\n    if (piece instanceof Where) {\n      if (piece.where instanceof PojoWhere) {\n        return this.#whereGenerator.formatPojoWhere(piece.where, options);\n      }\n\n      return this.#whereGenerator.formatWhereOptions(piece.where, options);\n    }\n\n    if (piece instanceof JsonPath) {\n      return this.#internals.formatJsonPath(piece, options);\n    }\n\n    if (piece instanceof AssociationPath) {\n      return this.#internals.formatAssociationPath(piece);\n    }\n\n    if (piece instanceof DialectAwareFn) {\n      return this.#internals.formatDialectAwareFn(piece, options);\n    }\n\n    throw new Error(`Unknown sequelize method ${piece.constructor.name}`);\n  }\n\n  /**\n   * The goal of this method is to execute the equivalent of json_unquote for the current dialect.\n   *\n   * @param _arg\n   * @param _options\n   */\n  formatUnquoteJson(_arg: Expression, _options: EscapeOptions | undefined): string {\n    if (!this.dialect.supports.jsonOperations) {\n      throw new Error(`Unquoting JSON is not supported by ${this.dialect.name} dialect.`);\n    }\n\n    throw new Error(`formatUnquoteJson has not been implemented in ${this.dialect.name}.`);\n  }\n\n  /**\n   * @param _sqlExpression \u26A0\uFE0F This is not an identifier, it's a raw SQL expression. It will be inlined in the query.\n   * @param _path The JSON path, where each item is one level of the path\n   * @param _unquote Whether the result should be unquoted (depending on dialect: ->> and #>> operators, json_unquote function). Defaults to `false`.\n   */\n  jsonPathExtractionQuery(\n    _sqlExpression: string,\n    _path: ReadonlyArray<number | string>,\n    _unquote: boolean,\n  ): string {\n    if (!this.dialect.supports.jsonOperations) {\n      throw new Error(`JSON Paths are not supported in ${this.dialect.name}.`);\n    }\n\n    throw new Error(`jsonPathExtractionQuery has not been implemented in ${this.dialect.name}.`);\n  }\n\n  /**\n   * Escapes a value (e.g. a string, number or date) as an SQL value (as opposed to an identifier).\n   *\n   * @param value The value to escape\n   * @param options The options to use when escaping the value\n   */\n  escape(value: unknown, options: EscapeOptions = EMPTY_OBJECT): string {\n    if (isPlainObject(value) && Op.col in value) {\n      noOpCol();\n      value = new Col(value[Op.col] as string);\n    }\n\n    if (value instanceof BaseSqlExpression) {\n      return this.formatSqlExpression(value, options);\n    }\n\n    if (value === undefined) {\n      throw new TypeError('\"undefined\" cannot be escaped');\n    }\n\n    let { type } = options;\n    if (type != null) {\n      type = this.sequelize.normalizeDataType(type);\n    }\n\n    if (\n      value === null &&\n      // we handle null values ourselves by default, unless the data type explicitly accepts null\n      (!(type instanceof AbstractDataType) || !type.acceptsNull())\n    ) {\n      if (options.bindParam) {\n        return options.bindParam(null);\n      }\n\n      return 'NULL';\n    }\n\n    if (type == null || typeof type === 'string') {\n      type = bestGuessDataTypeOfVal(value, this.dialect);\n    } else {\n      type = this.sequelize.normalizeDataType(type);\n    }\n\n    this.sequelize.validateValue(value, type);\n\n    if (options.bindParam) {\n      return type.getBindParamSql(value, options as BindParamOptions);\n    }\n\n    return type.escape(value);\n  }\n\n  /**\n   * Escapes an array of values (e.g. strings, numbers or dates) as an SQL List of values.\n   *\n   * @param values The list of values to escape\n   * @param options\n   *\n   * @example\n   * ```ts\n   * const values = [1, 2, 3];\n   * queryGenerator.escapeList([1, 2, 3]); // '(1, 2, 3)'\n   */\n  escapeList(values: unknown[], options?: EscapeOptions): string {\n    return `(${values.map(value => this.escape(value, options)).join(', ')})`;\n  }\n\n  getUuidV1FunctionCall(): string {\n    if (!this.dialect.supports.uuidV1Generation) {\n      throw new Error(`UUID V1 generation is not supported by ${this.dialect.name} dialect.`);\n    }\n\n    throw new Error(`getUuidV1FunctionCall has not been implemented in ${this.dialect.name}.`);\n  }\n\n  getUuidV4FunctionCall(): string {\n    if (!this.dialect.supports.uuidV4Generation) {\n      throw new Error(`UUID V4 generation is not supported by ${this.dialect.name} dialect.`);\n    }\n\n    throw new Error(`getUuidV4FunctionCall has not been implemented in ${this.dialect.name}.`);\n  }\n\n  getToggleForeignKeyChecksQuery(_enable: boolean): string {\n    throw new Error(`${this.dialect.name} does not support toggling foreign key checks`);\n  }\n\n  versionQuery(): string {\n    throw new Error(`${this.dialect.name} did not implement versionQuery`);\n  }\n\n  tableExistsQuery(tableName: TableOrModel): string {\n    const table = this.extractTableDetails(tableName);\n\n    return `SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = ${this.escape(table.tableName)} AND TABLE_SCHEMA = ${this.escape(table.schema)}`;\n  }\n\n  bulkDeleteQuery(tableOrModel: TableOrModel, options: BulkDeleteQueryOptions): string {\n    const table = this.quoteTable(tableOrModel);\n    const modelDefinition = extractModelDefinition(tableOrModel);\n    const whereOptions = { ...options, model: modelDefinition };\n    const whereFragment = whereOptions.where\n      ? this.whereQuery(whereOptions.where, whereOptions)\n      : '';\n\n    if (whereOptions.limit && !this.dialect.supports.delete.limit) {\n      if (!modelDefinition) {\n        throw new Error(\n          'Using LIMIT in bulkDeleteQuery requires specifying a model or model definition.',\n        );\n      }\n\n      const pks = join(\n        map(modelDefinition.primaryKeysAttributeNames.values(), attrName =>\n          this.quoteIdentifier(modelDefinition.getColumnName(attrName)),\n        ),\n        ', ',\n      );\n\n      const primaryKeys = modelDefinition.primaryKeysAttributeNames.size > 1 ? `(${pks})` : pks;\n\n      return joinSQLFragments([\n        `DELETE FROM ${table} WHERE ${primaryKeys} IN (`,\n        `SELECT ${pks} FROM ${table}`,\n        whereFragment,\n        `ORDER BY ${pks}`,\n        this.#internals.addLimitAndOffset(whereOptions),\n        ')',\n      ]);\n    }\n\n    return joinSQLFragments([\n      `DELETE FROM ${this.quoteTable(tableOrModel)}`,\n      whereFragment,\n      this.#internals.addLimitAndOffset(whereOptions),\n    ]);\n  }\n\n  __TEST__getInternals() {\n    if (process.env.npm_lifecycle_event !== 'mocha') {\n      throw new Error('You can only access the internals of the query generator in test mode.');\n    }\n\n    return this.#internals;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,mBAAuD;AACvD,sBAAqB;AACrB,yBAA2B;AAC3B,uBAAqB;AAErB,wBAAmC;AACnC,8BAAgC;AAChC,uBAA0B;AAC1B,iCAAkC;AAClC,kBAAqB;AACrB,iBAAoB;AACpB,8BAA+B;AAC/B,gBAAmB;AACnB,wBAA2B;AAC3B,uBAAyB;AACzB,kBAAqB;AACrB,qBAAwB;AACxB,mBAAsB;AACtB,mBAAsB;AACtB,yBAA2B;AAG3B,uBAAmB;AAEnB,wBAAuC;AACvC,yBAA2B;AAE3B,mBAAqC;AACrC,0BAAwB;AACxB,qBAAgC;AAChC,gCAAiC;AACjC,yBAIO;AAEP,wBAAiC;AAEjC,sCAA+C;AAwB/C,+BAA0B;AAEnB,MAAM,4CAA4C,oBAAI,IAAsC;AAAA,EACjG;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,CAAC;AACM,MAAM,0CAA0C,oBAAI,IAAoC;AAAA,EAC7F;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,CAAC;AACM,MAAM,wCAAwC,oBAAI,IAAkC;AAAA,EACzF;AAAA,EACA;AACF,CAAC;AACM,MAAM,uCAAuC,oBAAI,IAAiC;AAAA,EACvF;AACF,CAAC;AACM,MAAM,2CAA2C,oBAAI,IAAqC;AAAA,EAC/F;AACF,CAAC;AACM,MAAM,wCAAwC,oBAAI,IAAkC;AAAA,EACzF;AACF,CAAC;AACM,MAAM,kCAAkC,oBAAI,IAA6B;AAAA,EAC9E;AAAA,EACA;AACF,CAAC;AACM,MAAM,0CAA0C,oBAAI,IAAoC;AAAA,EAC7F;AAAA,EACA;AACF,CAAC;AACM,MAAM,8CAA8C,oBAAI,IAE7D,CAAC,YAAY,SAAS,CAAC;AAClB,MAAM,yCAAyC,oBAAI,IAAmC;AAAA,EAC3F;AAAA,EACA;AAAA,EACA;AACF,CAAC;AACM,MAAM,yCAAyC,oBAAI,IAAmC;AAAA,EAC3F;AACF,CAAC;AACM,MAAM,6CAA6C,oBAAI,IAE5D,CAAC,cAAc,kBAAkB,gBAAgB,CAAC;AAC7C,MAAM,8CAA8C,oBAAI,IAE7D,CAAC,YAAY,iBAAiB,CAAC;AAC1B,MAAM,2CAA2C,oBAAI,IAAqC;AAAA,EAC/F;AAAA,EACA;AACF,CAAC;AAmDM,MAAM,iCAAiC;AAAA,EACnC;AAAA,EACA;AAAA,EAET,YACE,SACA,YAA4C,IAAI,+DAA+B,OAAO,GACtF;AACA,SAAK,UAAU;AACf,SAAK,aAAa;AAAA,EACpB;AAAA,EAEA,IAAI,kBAAmC;AACrC,WAAO,KAAK,WAAW;AAAA,EACzB;AAAA,EAEA,IAAc,YAAY;AACxB,WAAO,KAAK,QAAQ;AAAA,EACtB;AAAA,EAEA,IAAc,UAAU;AACtB,WAAO,KAAK,UAAU;AAAA,EACxB;AAAA,EAEA,oBAAoB,WAAmB,UAA+C;AACpF,QAAI,KAAK,QAAQ,SAAS,gBAAgB;AACxC,YAAM,IAAI;AAAA,QACR,GAAG,KAAK,QAAQ;AAAA,MAClB;AAAA,IACF;AAEA,UAAM,IAAI,MAAM,kCAAkC,KAAK,QAAQ,OAAO;AAAA,EACxE;AAAA,EAEA,kBAAkB,UAA0B;AAC1C,QAAI,KAAK,QAAQ,SAAS,gBAAgB;AACxC,aAAO,2BAA2B,KAAK,gBAAgB,QAAQ;AAAA,IACjE;AAEA,UAAM,IAAI,MAAM,kCAAkC,KAAK,QAAQ,OAAO;AAAA,EACxE;AAAA,EAEA,mBAAmB,UAA8C;AAC/D,QAAI,KAAK,QAAQ,SAAS,gBAAgB;AACxC,YAAM,IAAI;AAAA,QACR,GAAG,KAAK,QAAQ;AAAA,MAClB;AAAA,IACF;AAEA,UAAM,IAAI,MAAM,kCAAkC,KAAK,QAAQ,OAAO;AAAA,EACxE;AAAA,EAEA,kBAAkB,YAAoB,SAA4C;AAChF,QAAI,CAAC,KAAK,QAAQ,SAAS,SAAS;AAClC,YAAM,IAAI,MAAM,gCAAgC,KAAK,QAAQ,OAAO;AAAA,IACtE;AAEA,QAAI,SAAS;AACX;AAAA,QACE;AAAA,QACA,KAAK;AAAA,QACL;AAAA,QACA,KAAK,QAAQ,SAAS;AAAA,QACtB;AAAA,MACF;AAAA,IACF;AAEA,eAAO,4CAAiB;AAAA,MACtB;AAAA,MACA,SAAS,UAAU,eAAe;AAAA,MAClC;AAAA,MACA,SAAS,cAAc,kBAAkB;AAAA,MACzC,KAAK,gBAAgB,UAAU;AAAA,MAC/B,SAAS,gBACL,iBAAiB,QAAQ,yBAAyB,yBAAU,KAAK,WAAW,cAAc,QAAQ,aAAa,IAAI,KAAK,gBAAgB,QAAQ,aAAa,MAC7J;AAAA,MACJ,SAAS,UAAU,yBAAyB,KAAK,OAAO,QAAQ,OAAO,MAAM;AAAA,MAC7E,SAAS,UAAU,mBAAmB,KAAK,OAAO,QAAQ,OAAO,MAAM;AAAA,MACvE,SAAS,UAAU,WAAW,KAAK,OAAO,QAAQ,OAAO,MAAM;AAAA,IACjE,CAAC;AAAA,EACH;AAAA,EAEA,gBAAgB,YAAoB,SAA0C;AAC5E,QAAI,CAAC,KAAK,QAAQ,SAAS,SAAS;AAClC,YAAM,IAAI,MAAM,gCAAgC,KAAK,QAAQ,OAAO;AAAA,IACtE;AAEA,QAAI,SAAS;AACX;AAAA,QACE;AAAA,QACA,KAAK;AAAA,QACL;AAAA,QACA,KAAK,QAAQ,SAAS;AAAA,QACtB;AAAA,MACF;AAAA,IACF;AAEA,eAAO,4CAAiB;AAAA,MACtB;AAAA,MACA,SAAS,WAAW,cAAc;AAAA,MAClC,KAAK,gBAAgB,UAAU;AAAA,MAC/B,SAAS,UAAU,YAAY;AAAA,IACjC,CAAC;AAAA,EACH;AAAA,EAEA,iBAAiB,UAA4C;AAC3D,QAAI,KAAK,QAAQ,SAAS,SAAS;AACjC,YAAM,IAAI;AAAA,QACR,GAAG,KAAK,QAAQ;AAAA,MAClB;AAAA,IACF;AAEA,UAAM,IAAI,MAAM,gCAAgC,KAAK,QAAQ,OAAO;AAAA,EACtE;AAAA,EAEA,mBAAmB,WAAyB;AAC1C,WAAO,YAAY,KAAK,WAAW,SAAS;AAAA,EAC9C;AAAA,EAEA,eAAe,WAAyB,SAAyC;AAC/E,QAAI,SAAS;AACX;AAAA,QACE;AAAA,QACA,KAAK;AAAA,QACL;AAAA,QACA,KAAK,QAAQ,SAAS;AAAA,QACtB;AAAA,MACF;AAAA,IACF;AAEA,eAAO,4CAAiB;AAAA,MACtB;AAAA,MACA,KAAK,WAAW,SAAS;AAAA,MACzB,SAAS,UAAU,YAAY;AAAA,IACjC,CAAC;AAAA,EACH;AAAA,EAEA,gBAAgB,UAA2C;AACzD,UAAM,IAAI,MAAM,+CAA+C,KAAK,QAAQ,OAAO;AAAA,EACrF;AAAA,EAEA,iBACE,iBACA,gBACA,SACQ;AACR,UAAM,cAAc,KAAK,oBAAoB,eAAe;AAC5D,UAAM,aAAa,KAAK,oBAAoB,cAAc;AAE1D,QAAI,YAAY,WAAW,WAAW,UAAU,CAAC,SAAS,cAAc;AACtE,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,WAAO,eAAe,KAAK,WAAW,eAAe,eAAe,KAAK,WAAW,cAAc;AAAA,EACpG;AAAA,EAEA,mBACE,YACA,UACmB;AACnB,UAAM,IAAI,MAAM,kDAAkD,KAAK,QAAQ,OAAO;AAAA,EACxF;AAAA,EAEA,kBACE,WACA,YACA,SACQ;AACR,QAAI,SAAS;AACX;AAAA,QACE;AAAA,QACA,KAAK;AAAA,QACL;AAAA,QACA,KAAK,QAAQ,SAAS;AAAA,QACtB;AAAA,MACF;AAAA,IACF;AAEA,eAAO,4CAAiB;AAAA,MACtB;AAAA,MACA,KAAK,WAAW,SAAS;AAAA,MACzB;AAAA,MACA,SAAS,WAAW,cAAc;AAAA,MAClC,KAAK,gBAAgB,UAAU;AAAA,MAC/B,SAAS,UAAU,YAAY;AAAA,IACjC,CAAC;AAAA,EACH;AAAA,EAEA,mBAAmB,WAAyB,SAA4C;AACtF,QAAI,CAAC,KAAK,QAAQ,SAAS,YAAY,KAAK;AAC1C,YAAM,IAAI,MAAM,+CAA+C,KAAK,QAAQ,cAAc;AAAA,IAC5F;AAEA,eAAO,4CAAiB;AAAA,MACtB;AAAA,MACA,KAAK,WAAW,SAAS;AAAA,MACzB;AAAA,MACA,KAAK,WAAW,qBAAqB,WAAW,OAAO;AAAA,IACzD,CAAC;AAAA,EACH;AAAA,EAEA,sBACE,WACA,gBACA,SACA;AACA,QAAI,CAAC,KAAK,QAAQ,SAAS,YAAY,QAAQ;AAC7C,YAAM,IAAI;AAAA,QACR,kDAAkD,KAAK,QAAQ;AAAA,MACjE;AAAA,IACF;AAEA,QAAI,SAAS;AACX;AAAA,QACE;AAAA,QACA,KAAK;AAAA,QACL;AAAA,QACA,KAAK,QAAQ,SAAS,YAAY;AAAA,QAClC;AAAA,MACF;AAAA,IACF;AAEA,eAAO,4CAAiB;AAAA,MACtB;AAAA,MACA,KAAK,WAAW,SAAS;AAAA,MACzB;AAAA,MACA,SAAS,WAAW,cAAc;AAAA,MAClC,KAAK,gBAAgB,cAAc;AAAA,MACnC,SAAS,UAAU,YAAY;AAAA,IACjC,CAAC;AAAA,EACH;AAAA,EAOA,2BACE,MACA,aACA;AACA,QAAI,CAAC,KAAK,QAAQ,SAAS,YAAY,YAAY;AACjD,YAAM,IAAI,MAAM,+CAA+C,KAAK,QAAQ,cAAc;AAAA,IAC5F;AAEA,QAAI,qBAAqB;AACzB,QAAI,gBAAgB,sCAAoB;AACtC,UAAI,KAAK,aAAa,QAAQ;AAC5B,6BAAqB,KAAK,YACvB,IAAI,gBAAc,KAAK,gBAAgB,UAAU,CAAC,EAClD,KAAK,IAAI;AAAA,MACd;AAEA,aAAO,mBAAmB,sBAAsB,KAAK,SAAS;AAAA,IAChE;AAEA,QAAI,aAAa,QAAQ;AACvB,2BAAqB,YAClB,IAAI,gBAAc,KAAK,gBAAgB,UAAU,CAAC,EAClD,KAAK,IAAI;AAAA,IACd;AAEA,WAAO,mBAAmB,sBAAsB,KAAK,SAAS;AAAA,EAChE;AAAA,EAEA,qBAAqB,YAA0B,UAAgD;AAC7F,UAAM,IAAI,MAAM,oDAAoD,KAAK,QAAQ,OAAO;AAAA,EAC1F;AAAA,EAEA,iBAAiB,YAAkC;AACjD,UAAM,IAAI,MAAM,gDAAgD,KAAK,QAAQ,OAAO;AAAA,EACtF;AAAA,EAEA,iBACE,YACA,wBACA,UACQ;AACR,UAAM,IAAI,MAAM,gDAAgD,KAAK,QAAQ,OAAO;AAAA,EACtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,mBAAmB,YAA0B,aAA6B;AACxE,UAAM,IAAI,MAAM,2EAA2E;AAAA,EAC7F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,oBAAoB,YAA0B,aAA4B;AACxE,UAAM,IAAI,MAAM,6EAA6E;AAAA,EAC/F;AAAA;AAAA;AAAA;AAAA,EAKA,yBAAiC;AAC/B,QAAI,KAAK,QAAQ,SAAS,8BAA8B;AACtD,YAAM,IAAI;AAAA,QACR,kDAAkD,KAAK,QAAQ;AAAA,MACjE;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,qBAAqB,eAA+B;AAClD,QAAI,CAAC,KAAK,QAAQ,SAAS,YAAY;AACrC,YAAM,IAAI,MAAM,mCAAmC,KAAK,QAAQ,OAAO;AAAA,IACzE;AAEA,WAAO,aAAa,KAAK,gBAAgB,aAAa;AAAA,EACxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,uBAAuB,eAA+B;AACpD,QAAI,CAAC,KAAK,QAAQ,SAAS,YAAY;AACrC,YAAM,IAAI,MAAM,mCAAmC,KAAK,QAAQ,OAAO;AAAA,IACzE;AAEA,WAAO,yBAAyB,KAAK,gBAAgB,aAAa;AAAA,EACpE;AAAA;AAAA;AAAA;AAAA,EAKA,2BAAmC;AACjC,QAAI,KAAK,QAAQ,SAAS,8BAA8B;AACtD,YAAM,IAAI;AAAA,QACR,oDAAoD,KAAK,QAAQ;AAAA,MACnE;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,uBAAuB,gBAAwC;AAC7D,QAAI,CAAC,KAAK,QAAQ,SAAS,iBAAiB;AAC1C,YAAM,IAAI,MAAM,yCAAyC,KAAK,QAAQ,OAAO;AAAA,IAC/E;AAEA,QAAI,CAAC,KAAK,QAAQ,SAAS,8BAA8B;AACvD,aAAO,mCAAmC;AAAA,IAC5C;AAEA,UAAM,IAAI,MAAM,kDAAkD,KAAK,QAAQ,eAAe;AAAA,EAChG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,sBAAsB,SAAgD;AACpE,QAAI,KAAK,QAAQ,SAAS,8BAA8B;AACtD,YAAM,IAAI;AAAA,QACR,iDAAiD,KAAK,QAAQ;AAAA,MAChE;AAAA,IACF;AAEA,QAAI,SAAS;AACX;AAAA,QACE;AAAA,QACA,KAAK;AAAA,QACL;AAAA,QACA,KAAK,QAAQ,SAAS;AAAA,QACtB;AAAA,MACF;AAAA,IACF;AAEA,eAAO,4CAAiB;AAAA,MACtB,KAAK,QAAQ,SAAS,iBAAiB,WAAW,UAAU;AAAA,MAC5D;AAAA,MACA,SAAS,WAAW,cAAc;AAAA,IACpC,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKA,wBAAgC;AAC9B,eAAO,+BAAW;AAAA,EACpB;AAAA;AAAA,EAGA,oBACE,cACA,SAC2C;AAC3C,UAAM,sBAAkB,2CAAuB,YAAY;AAE3D,QAAI,KAAC,4BAAc,eAAe,GAAG;AACnC,YAAM,IAAI;AAAA,QACR,+BAA+B,iBAAAA,QAAS,QAAQ,YAAY;AAAA,MAC9D;AAAA,IACF;AAEA,WAAO;AAAA,MACL,GAAG;AAAA,MACH,QACE,SAAS,UACT,gBAAgB,UAChB,KAAK,QAAQ,UACb,KAAK,QAAQ,iBAAiB;AAAA,MAChC,WAAW,SAAS,aAAa,gBAAgB,aAAa;AAAA,IAChE;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,WAAW,OAAqB,SAAqC;AACnE,QAAI,SAAS;AACX;AAAA,QACE;AAAA,QACA,KAAK;AAAA,QACL;AAAA,QACA;AAAA,UACE,YAAY,KAAK,QAAQ,SAAS;AAAA,UAClC,YAAY,KAAK,QAAQ,SAAS;AAAA,QACpC;AAAA,QACA;AAAA,MACF;AAAA,IACF;AAEA,YAAI,kCAAc,KAAK,GAAG;AACxB,cAAQ,MAAM;AAAA,IAChB;AAEA,UAAM,YAAY,KAAK,oBAAoB,KAAK;AAEhD,YAAI,gBAAAC,SAAS,KAAK,MAAM,QAAQ,SAAS,UAAU,QAAQ;AACzD,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,MAAM;AAEV,QAAI,KAAK,QAAQ,SAAS,SAAS;AAKjC,UAAI,UAAU,UAAU,UAAU,WAAW,KAAK,QAAQ,iBAAiB,GAAG;AAC5E,eAAO,GAAG,KAAK,gBAAgB,UAAU,MAAM;AAAA,MACjD;AAEA,aAAO,KAAK,gBAAgB,UAAU,SAAS;AAAA,IACjD,OAAO;AACL,YAAM,mBACJ,UAAU,UAAU,UAAU,WAAW,KAAK,QAAQ,iBAAiB,IACnE,UAAU,UAAU,UAAU,aAAa,OAC3C;AAEN,aAAO,KAAK,gBAAgB,mBAAmB,UAAU,SAAS;AAAA,IACpE;AAEA,QAAI,SAAS,OAAO;AAClB,aAAO,OAAO,KAAK,gBAAgB,QAAQ,UAAU,OAAO,UAAU,YAAY,QAAQ,KAAK;AAAA,IACjG;AAEA,QAAI,SAAS,YAAY;AACvB,iBAAW,QAAQ,QAAQ,YAAY;AACrC,YAAI,8BAAW,KAAK,IAAI,GAAG;AACzB,iBAAO,IAAI,8BAAW,KAAK,IAAI,YAAY,KAAK,OAAO,IAAI,eAAa,KAAK,gBAAgB,SAAS,CAAC,EAAE,KAAK,GAAG;AAAA,QACnH,OAAO;AACL,gBAAM,IAAI;AAAA,YACR,wBAAwB,KAAK,iDAAiD,KAAK,QAAQ;AAAA,UAC7F;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAEA,QAAI,SAAS,YAAY;AACvB,YAAM,QAAsB,CAAC;AAC7B,iBAAW,QAAQ,QAAQ,YAAY;AACrC,YAAI,8BAAW,IAAI,GAAG;AACpB,gBAAM,KAAK,8BAAW,IAAI,CAAC;AAAA,QAC7B,OAAO;AACL,gBAAM,IAAI;AAAA,YACR,mBAAmB,iDAAiD,KAAK,QAAQ;AAAA,UACnF;AAAA,QACF;AAAA,MACF;AAEA,UAAI,MAAM,QAAQ;AAChB,eAAO,UAAU,MAAM,KAAK,IAAI;AAAA,MAClC;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,gBAAgB,YAAoB,QAAkB;AACpD,eAAO,gCAAgB,YAAY,KAAK,QAAQ,gBAAgB,KAAK,QAAQ,eAAe;AAAA,EAC9F;AAAA,EAEA,YAAY,QAAsB,QAAsB;AACtD,QAAI,WAAW,QAAQ;AACrB,aAAO;AAAA,IACT;AAEA,aAAS,KAAK,oBAAoB,MAAM;AACxC,aAAS,KAAK,oBAAoB,MAAM;AAExC,WAAO,OAAO,cAAc,OAAO,aAAa,OAAO,WAAW,OAAO;AAAA,EAC3E;AAAA,EAEA,WAA4B,OAAoC,SAA8B;AAC5F,UAAM,QAAQ,KAAK,gBAAgB,OAAO,OAAO;AACjD,QAAI,SAAS,MAAM,SAAS,GAAG;AAC7B,aAAO,SAAS;AAAA,IAClB;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,gBACE,OACA,SACA;AACA,WAAO,KAAK,gBAAgB,mBAAmB,OAAO,OAAO;AAAA,EAC/D;AAAA,EAEA,oBAAoB,OAA0B,SAAiC;AAC7E,QAAI,iBAAiB,wBAAS;AAC5B,aAAO,KAAK,WAAW,cAAc,OAAO,OAAO;AAAA,IACrD;AAEA,QAAI,iBAAiB,cAAI;AACvB,aAAO,KAAK,WAAW,SAAS,OAAO,OAAO;AAAA,IAChD;AAEA,QAAI,iBAAiB,kBAAM;AACzB,aAAO,KAAK,WAAW,MAAM,QAAQ,OAAO;AAAA,IAC9C;AAEA,QAAI,iBAAiB,oBAAO;AAC1B,aAAO,KAAK,OAAO,MAAM,OAAO,OAAO;AAAA,IACzC;AAEA,QAAI,iBAAiB,8BAAY;AAC/B,aAAO,KAAK,gBAAgB,MAAM,KAAK;AAAA,IACzC;AAEA,QAAI,iBAAiB,kBAAM;AACzB,aAAO,KAAK,WAAW,WAAW,OAAO,OAAO;AAAA,IAClD;AAEA,QAAI,iBAAiB,gBAAK;AACxB,aAAO,KAAK,WAAW,UAAU,OAAO,OAAO;AAAA,IACjD;AAEA,QAAI,iBAAiB,4BAAW;AAC9B,aAAO,KAAK,WAAW,gBAAgB,OAAO,OAAO;AAAA,IACvD;AAEA,QAAI,iBAAiB,oBAAO;AAC1B,UAAI,MAAM,iBAAiB,oCAAW;AACpC,eAAO,KAAK,gBAAgB,gBAAgB,MAAM,OAAO,OAAO;AAAA,MAClE;AAEA,aAAO,KAAK,gBAAgB,mBAAmB,MAAM,OAAO,OAAO;AAAA,IACrE;AAEA,QAAI,iBAAiB,2BAAU;AAC7B,aAAO,KAAK,WAAW,eAAe,OAAO,OAAO;AAAA,IACtD;AAEA,QAAI,iBAAiB,yCAAiB;AACpC,aAAO,KAAK,WAAW,sBAAsB,KAAK;AAAA,IACpD;AAEA,QAAI,iBAAiB,wCAAgB;AACnC,aAAO,KAAK,WAAW,qBAAqB,OAAO,OAAO;AAAA,IAC5D;AAEA,UAAM,IAAI,MAAM,4BAA4B,MAAM,YAAY,MAAM;AAAA,EACtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,kBAAkB,MAAkB,UAA6C;AAC/E,QAAI,CAAC,KAAK,QAAQ,SAAS,gBAAgB;AACzC,YAAM,IAAI,MAAM,sCAAsC,KAAK,QAAQ,eAAe;AAAA,IACpF;AAEA,UAAM,IAAI,MAAM,iDAAiD,KAAK,QAAQ,OAAO;AAAA,EACvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,wBACE,gBACA,OACA,UACQ;AACR,QAAI,CAAC,KAAK,QAAQ,SAAS,gBAAgB;AACzC,YAAM,IAAI,MAAM,mCAAmC,KAAK,QAAQ,OAAO;AAAA,IACzE;AAEA,UAAM,IAAI,MAAM,uDAAuD,KAAK,QAAQ,OAAO;AAAA,EAC7F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,OAAgB,UAAyB,2BAAsB;AACpE,YAAI,4BAAc,KAAK,KAAK,oBAAG,OAAO,OAAO;AAC3C,uCAAQ;AACR,cAAQ,IAAI,eAAI,MAAM,oBAAG,GAAG,CAAW;AAAA,IACzC;AAEA,QAAI,iBAAiB,8CAAmB;AACtC,aAAO,KAAK,oBAAoB,OAAO,OAAO;AAAA,IAChD;AAEA,QAAI,UAAU,QAAW;AACvB,YAAM,IAAI,UAAU,+BAA+B;AAAA,IACrD;AAEA,QAAI,EAAE,KAAK,IAAI;AACf,QAAI,QAAQ,MAAM;AAChB,aAAO,KAAK,UAAU,kBAAkB,IAAI;AAAA,IAC9C;AAEA,QACE,UAAU;AAAA,KAET,EAAE,gBAAgB,uCAAqB,CAAC,KAAK,YAAY,IAC1D;AACA,UAAI,QAAQ,WAAW;AACrB,eAAO,QAAQ,UAAU,IAAI;AAAA,MAC/B;AAEA,aAAO;AAAA,IACT;AAEA,QAAI,QAAQ,QAAQ,OAAO,SAAS,UAAU;AAC5C,iBAAO,0CAAuB,OAAO,KAAK,OAAO;AAAA,IACnD,OAAO;AACL,aAAO,KAAK,UAAU,kBAAkB,IAAI;AAAA,IAC9C;AAEA,SAAK,UAAU,cAAc,OAAO,IAAI;AAExC,QAAI,QAAQ,WAAW;AACrB,aAAO,KAAK,gBAAgB,OAAO,OAA2B;AAAA,IAChE;AAEA,WAAO,KAAK,OAAO,KAAK;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,WAAW,QAAmB,SAAiC;AAC7D,WAAO,IAAI,OAAO,IAAI,WAAS,KAAK,OAAO,OAAO,OAAO,CAAC,EAAE,KAAK,IAAI;AAAA,EACvE;AAAA,EAEA,wBAAgC;AAC9B,QAAI,CAAC,KAAK,QAAQ,SAAS,kBAAkB;AAC3C,YAAM,IAAI,MAAM,0CAA0C,KAAK,QAAQ,eAAe;AAAA,IACxF;AAEA,UAAM,IAAI,MAAM,qDAAqD,KAAK,QAAQ,OAAO;AAAA,EAC3F;AAAA,EAEA,wBAAgC;AAC9B,QAAI,CAAC,KAAK,QAAQ,SAAS,kBAAkB;AAC3C,YAAM,IAAI,MAAM,0CAA0C,KAAK,QAAQ,eAAe;AAAA,IACxF;AAEA,UAAM,IAAI,MAAM,qDAAqD,KAAK,QAAQ,OAAO;AAAA,EAC3F;AAAA,EAEA,+BAA+B,SAA0B;AACvD,UAAM,IAAI,MAAM,GAAG,KAAK,QAAQ,mDAAmD;AAAA,EACrF;AAAA,EAEA,eAAuB;AACrB,UAAM,IAAI,MAAM,GAAG,KAAK,QAAQ,qCAAqC;AAAA,EACvE;AAAA,EAEA,iBAAiB,WAAiC;AAChD,UAAM,QAAQ,KAAK,oBAAoB,SAAS;AAEhD,WAAO,qGAAqG,KAAK,OAAO,MAAM,SAAS,wBAAwB,KAAK,OAAO,MAAM,MAAM;AAAA,EACzL;AAAA,EAEA,gBAAgB,cAA4B,SAAyC;AACnF,UAAM,QAAQ,KAAK,WAAW,YAAY;AAC1C,UAAM,sBAAkB,2CAAuB,YAAY;AAC3D,UAAM,eAAe,EAAE,GAAG,SAAS,OAAO,gBAAgB;AAC1D,UAAM,gBAAgB,aAAa,QAC/B,KAAK,WAAW,aAAa,OAAO,YAAY,IAChD;AAEJ,QAAI,aAAa,SAAS,CAAC,KAAK,QAAQ,SAAS,OAAO,OAAO;AAC7D,UAAI,CAAC,iBAAiB;AACpB,cAAM,IAAI;AAAA,UACR;AAAA,QACF;AAAA,MACF;AAEA,YAAM,UAAM;AAAA,YACV;AAAA,UAAI,gBAAgB,0BAA0B,OAAO;AAAA,UAAG,cACtD,KAAK,gBAAgB,gBAAgB,cAAc,QAAQ,CAAC;AAAA,QAC9D;AAAA,QACA;AAAA,MACF;AAEA,YAAM,cAAc,gBAAgB,0BAA0B,OAAO,IAAI,IAAI,SAAS;AAEtF,iBAAO,4CAAiB;AAAA,QACtB,eAAe,eAAe;AAAA,QAC9B,UAAU,YAAY;AAAA,QACtB;AAAA,QACA,YAAY;AAAA,QACZ,KAAK,WAAW,kBAAkB,YAAY;AAAA,QAC9C;AAAA,MACF,CAAC;AAAA,IACH;AAEA,eAAO,4CAAiB;AAAA,MACtB,eAAe,KAAK,WAAW,YAAY;AAAA,MAC3C;AAAA,MACA,KAAK,WAAW,kBAAkB,YAAY;AAAA,IAChD,CAAC;AAAA,EACH;AAAA,EAEA,uBAAuB;AACrB,QAAI,QAAQ,IAAI,wBAAwB,SAAS;AAC/C,YAAM,IAAI,MAAM,wEAAwE;AAAA,IAC1F;AAEA,WAAO,KAAK;AAAA,EACd;AACF;",
  "names": ["NodeUtil", "isObject"]
}
