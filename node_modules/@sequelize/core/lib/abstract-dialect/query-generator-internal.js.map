{
  "version": 3,
  "sources": ["../../src/abstract-dialect/query-generator-internal.ts"],
  "sourcesContent": ["import { EMPTY_ARRAY } from '@sequelize/utils';\nimport { Deferrable } from '../deferrable.js';\nimport type { AssociationPath } from '../expression-builders/association-path.js';\nimport type { Attribute } from '../expression-builders/attribute.js';\nimport { BaseSqlExpression } from '../expression-builders/base-sql-expression.js';\nimport type { Cast } from '../expression-builders/cast.js';\nimport type { Col } from '../expression-builders/col.js';\nimport type { DialectAwareFn } from '../expression-builders/dialect-aware-fn.js';\nimport type { Fn } from '../expression-builders/fn.js';\nimport type { JsonPath } from '../expression-builders/json-path.js';\nimport type { Literal } from '../expression-builders/literal.js';\nimport type { Sequelize } from '../sequelize.js';\nimport { extractModelDefinition } from '../utils/model-utils.js';\nimport { injectReplacements } from '../utils/sql.js';\nimport { attributeTypeToSql } from './data-types-utils.js';\nimport type { AbstractDialect } from './dialect.js';\nimport type { EscapeOptions } from './query-generator-typescript.js';\nimport type { AddLimitOffsetOptions } from './query-generator.internal-types.js';\nimport type { GetConstraintSnippetQueryOptions, TableOrModel } from './query-generator.types.js';\nimport { WhereSqlBuilder, wrapAmbiguousWhere } from './where-sql-builder.js';\n\nexport class AbstractQueryGeneratorInternal<Dialect extends AbstractDialect = AbstractDialect> {\n  readonly dialect: Dialect;\n  readonly whereSqlBuilder: WhereSqlBuilder;\n\n  get sequelize(): Sequelize {\n    return this.dialect.sequelize;\n  }\n\n  get queryGenerator(): Dialect['queryGenerator'] {\n    return this.dialect.queryGenerator;\n  }\n\n  constructor(dialect: Dialect) {\n    this.dialect = dialect;\n\n    this.whereSqlBuilder = new WhereSqlBuilder(dialect);\n  }\n\n  getTechnicalDatabaseNames(): readonly string[] {\n    return EMPTY_ARRAY;\n  }\n\n  getTechnicalSchemaNames(): readonly string[] {\n    return EMPTY_ARRAY;\n  }\n\n  getConstraintSnippet(tableName: TableOrModel, options: GetConstraintSnippetQueryOptions) {\n    const quotedFields = options.fields.map(field => {\n      if (typeof field === 'string') {\n        return this.queryGenerator.quoteIdentifier(field);\n      }\n\n      if (field instanceof BaseSqlExpression) {\n        return this.queryGenerator.formatSqlExpression(field);\n      }\n\n      if (field.attribute) {\n        throw new Error(\n          'The field.attribute property has been removed. Use the field.name property instead',\n        );\n      }\n\n      if (!field.name) {\n        throw new Error(`The following index field has no name: ${field}`);\n      }\n\n      return this.queryGenerator.quoteIdentifier(field.name);\n    });\n\n    const constraintNameParts = options.name\n      ? null\n      : options.fields.map(field => {\n          if (typeof field === 'string') {\n            return field;\n          }\n\n          if (field instanceof BaseSqlExpression) {\n            throw new TypeError(\n              `The constraint name must be provided explicitly if one of Sequelize's method (literal(), col(), etc\u2026) is used in the constraint's fields`,\n            );\n          }\n\n          return field.name;\n        });\n\n    let constraintSnippet;\n    const table = this.queryGenerator.extractTableDetails(tableName);\n    const fieldsSqlQuotedString = quotedFields.join(', ');\n    const fieldsSqlString = constraintNameParts?.join('_');\n\n    switch (options.type.toUpperCase()) {\n      case 'CHECK': {\n        if (!this.dialect.supports.constraints.check) {\n          throw new Error(`Check constraints are not supported by ${this.dialect.name} dialect`);\n        }\n\n        const constraintName = this.queryGenerator.quoteIdentifier(\n          options.name || `${table.tableName}_${fieldsSqlString}_ck`,\n        );\n        constraintSnippet = `CONSTRAINT ${constraintName} CHECK (${this.queryGenerator.whereItemsQuery(options.where)})`;\n        break;\n      }\n\n      case 'UNIQUE': {\n        if (!this.dialect.supports.constraints.unique) {\n          throw new Error(`Unique constraints are not supported by ${this.dialect.name} dialect`);\n        }\n\n        const constraintName = this.queryGenerator.quoteIdentifier(\n          options.name || `${table.tableName}_${fieldsSqlString}_uk`,\n        );\n        constraintSnippet = `CONSTRAINT ${constraintName} UNIQUE (${fieldsSqlQuotedString})`;\n        if (options.deferrable) {\n          constraintSnippet += ` ${this.getDeferrableConstraintSnippet(options.deferrable)}`;\n        }\n\n        break;\n      }\n\n      case 'DEFAULT': {\n        if (!this.dialect.supports.constraints.default) {\n          throw new Error(`Default constraints are not supported by ${this.dialect.name} dialect`);\n        }\n\n        if (options.defaultValue === undefined) {\n          throw new Error('Default value must be specified for DEFAULT CONSTRAINT');\n        }\n\n        const constraintName = this.queryGenerator.quoteIdentifier(\n          options.name || `${table.tableName}_${fieldsSqlString}_df`,\n        );\n        constraintSnippet = `CONSTRAINT ${constraintName} DEFAULT (${this.queryGenerator.escape(options.defaultValue, options)}) FOR ${quotedFields[0]}`;\n        break;\n      }\n\n      case 'PRIMARY KEY': {\n        if (!this.dialect.supports.constraints.primaryKey) {\n          throw new Error(\n            `Primary key constraints are not supported by ${this.dialect.name} dialect`,\n          );\n        }\n\n        const constraintName = this.queryGenerator.quoteIdentifier(\n          options.name || `${table.tableName}_${fieldsSqlString}_pk`,\n        );\n        constraintSnippet = `CONSTRAINT ${constraintName} PRIMARY KEY (${fieldsSqlQuotedString})`;\n        if (options.deferrable) {\n          constraintSnippet += ` ${this.getDeferrableConstraintSnippet(options.deferrable)}`;\n        }\n\n        break;\n      }\n\n      case 'FOREIGN KEY': {\n        if (!this.dialect.supports.constraints.foreignKey) {\n          throw new Error(\n            `Foreign key constraints are not supported by ${this.dialect.name} dialect`,\n          );\n        }\n\n        const references = options.references;\n        if (!references || !references.table || !(references.field || references.fields)) {\n          throw new Error(\n            'Invalid foreign key constraint options. `references` object with `table` and `field` must be specified',\n          );\n        }\n\n        const referencedTable = this.queryGenerator.extractTableDetails(references.table);\n        const constraintName = this.queryGenerator.quoteIdentifier(\n          options.name || `${table.tableName}_${fieldsSqlString}_${referencedTable.tableName}_fk`,\n        );\n        const quotedReferences =\n          references.field !== undefined\n            ? this.queryGenerator.quoteIdentifier(references.field)\n            : references.fields!.map(f => this.queryGenerator.quoteIdentifier(f)).join(', ');\n        const referencesSnippet = `${this.queryGenerator.quoteTable(referencedTable)} (${quotedReferences})`;\n        constraintSnippet = `CONSTRAINT ${constraintName} `;\n        constraintSnippet += `FOREIGN KEY (${fieldsSqlQuotedString}) REFERENCES ${referencesSnippet}`;\n        if (options.onUpdate) {\n          if (!this.dialect.supports.constraints.onUpdate) {\n            throw new Error(\n              `Foreign key constraint with onUpdate is not supported by ${this.dialect.name} dialect`,\n            );\n          }\n\n          constraintSnippet += ` ON UPDATE ${options.onUpdate.toUpperCase()}`;\n        }\n\n        if (options.onDelete) {\n          constraintSnippet += ` ON DELETE ${options.onDelete.toUpperCase()}`;\n        }\n\n        if (options.deferrable) {\n          constraintSnippet += ` ${this.getDeferrableConstraintSnippet(options.deferrable)}`;\n        }\n\n        break;\n      }\n\n      default: {\n        throw new Error(\n          `Constraint type ${options.type} is not supported by ${this.dialect.name} dialect`,\n        );\n      }\n    }\n\n    return constraintSnippet;\n  }\n\n  getDeferrableConstraintSnippet(deferrable: Deferrable) {\n    if (!this.dialect.supports.constraints.deferrable) {\n      throw new Error(`Deferrable constraints are not supported by ${this.dialect.name} dialect`);\n    }\n\n    switch (deferrable) {\n      case Deferrable.INITIALLY_DEFERRED: {\n        return 'DEFERRABLE INITIALLY DEFERRED';\n      }\n\n      case Deferrable.INITIALLY_IMMEDIATE: {\n        return 'DEFERRABLE INITIALLY IMMEDIATE';\n      }\n\n      case Deferrable.NOT: {\n        return 'NOT DEFERRABLE';\n      }\n\n      default: {\n        throw new Error(`Unknown constraint checking behavior ${deferrable}`);\n      }\n    }\n  }\n\n  formatAssociationPath(associationPath: AssociationPath): string {\n    return `${this.queryGenerator.quoteIdentifier(associationPath.associationPath.join('->'))}.${this.queryGenerator.quoteIdentifier(associationPath.attributeName)}`;\n  }\n\n  formatJsonPath(jsonPathVal: JsonPath, options?: EscapeOptions): string {\n    const value = this.queryGenerator.escape(jsonPathVal.expression, options);\n\n    if (jsonPathVal.path.length === 0) {\n      return value;\n    }\n\n    return this.queryGenerator.jsonPathExtractionQuery(value, jsonPathVal.path, false);\n  }\n\n  formatLiteral(piece: Literal, options?: EscapeOptions): string {\n    const sql = piece.val\n      .map(part => {\n        if (part instanceof BaseSqlExpression) {\n          return this.queryGenerator.formatSqlExpression(part, options);\n        }\n\n        return part;\n      })\n      .join('');\n\n    if (options?.replacements) {\n      return injectReplacements(sql, this.dialect, options.replacements, {\n        onPositionalReplacement: () => {\n          throw new TypeError(`The following literal includes positional replacements (?).\nOnly named replacements (:name) are allowed in literal() because we cannot guarantee the order in which they will be evaluated:\n\u279C literal(${JSON.stringify(sql)})`);\n        },\n      });\n    }\n\n    return sql;\n  }\n\n  formatAttribute(piece: Attribute, options?: EscapeOptions): string {\n    const modelDefinition = options?.model ? extractModelDefinition(options.model) : null;\n\n    // This handles special attribute syntaxes like $association.references$, json.paths, and attribute::casting\n    const columnName =\n      modelDefinition?.getColumnNameLoose(piece.attributeName) ?? piece.attributeName;\n\n    if (options?.mainAlias) {\n      return `${this.queryGenerator.quoteIdentifier(options.mainAlias)}.${this.queryGenerator.quoteIdentifier(columnName)}`;\n    }\n\n    return this.queryGenerator.quoteIdentifier(columnName);\n  }\n\n  formatFn(piece: Fn, options?: EscapeOptions): string {\n    // arguments of a function can be anything, it's not necessarily the type of the attribute,\n    // so we need to remove the type from their escape options\n    const argEscapeOptions =\n      piece.args.length > 0 && options?.type ? { ...options, type: undefined } : options;\n    const args = piece.args\n      .map(arg => {\n        return this.queryGenerator.escape(arg, argEscapeOptions);\n      })\n      .join(', ');\n\n    return `${piece.fn}(${args})`;\n  }\n\n  formatDialectAwareFn(piece: DialectAwareFn, options?: EscapeOptions): string {\n    // arguments of a function can be anything, it's not necessarily the type of the attribute,\n    // so we need to remove the type from their escape options\n    const argEscapeOptions =\n      piece.args.length > 0 && options?.type ? { ...options, type: undefined } : options;\n\n    if (!piece.supportsDialect(this.dialect)) {\n      throw new Error(\n        `Function ${piece.constructor.name} is not supported by ${this.dialect.name}.`,\n      );\n    }\n\n    return piece.applyForDialect(this.dialect, argEscapeOptions);\n  }\n\n  formatCast(cast: Cast, options?: EscapeOptions) {\n    const type = this.sequelize.normalizeDataType(cast.type);\n\n    const castSql = wrapAmbiguousWhere(\n      cast.expression,\n      this.queryGenerator.escape(cast.expression, { ...options, type }),\n    );\n    const targetSql = attributeTypeToSql(type).toUpperCase();\n\n    // TODO: if we're casting to the same SQL DataType, we could skip the SQL cast (but keep the JS cast)\n    //  This is useful because sometimes you want to cast the Sequelize DataType to another Sequelize DataType,\n    //  but they are both the same SQL type, so a SQL cast would be redundant.\n\n    return `CAST(${castSql} AS ${targetSql})`;\n  }\n\n  formatCol(piece: Col, options?: EscapeOptions) {\n    // TODO: can this be removed?\n    if (piece.identifiers.length === 1 && piece.identifiers[0].startsWith('*')) {\n      return '*';\n    }\n\n    // Weird legacy behavior\n    const identifiers = piece.identifiers.length === 1 ? piece.identifiers[0] : piece.identifiers;\n\n    // TODO: use quoteIdentifiers?\n    // @ts-expect-error -- quote is declared on child class\n    return this.queryGenerator.quote(identifiers, options?.model, undefined, options);\n  }\n\n  /**\n   * Returns an SQL fragment for adding result constraints.\n   *\n   * @param _options\n   */\n  addLimitAndOffset(_options: AddLimitOffsetOptions): string {\n    throw new Error(`addLimitAndOffset has not been implemented in ${this.dialect.name}.`);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
