{
  "version": 3,
  "sources": ["../../src/associations/has-many.ts"],
  "sourcesContent": ["import type { AllowIterable } from '@sequelize/utils';\nimport { isPlainObject } from '@sequelize/utils';\nimport isObject from 'lodash/isObject';\nimport upperFirst from 'lodash/upperFirst';\nimport type { WhereOptions } from '../abstract-dialect/where-sql-builder-types.js';\nimport { AssociationError } from '../errors/index.js';\nimport { col } from '../expression-builders/col.js';\nimport { fn } from '../expression-builders/fn.js';\nimport type {\n  AttributeNames,\n  Attributes,\n  CreateOptions,\n  CreationAttributes,\n  DestroyOptions,\n  Filterable,\n  FindOptions,\n  InstanceUpdateOptions,\n  Model,\n  ModelStatic,\n  Transactionable,\n  UpdateValues,\n} from '../model';\nimport { Op } from '../operators';\nimport { isSameInitialModel } from '../utils/model-utils.js';\nimport { removeUndefined } from '../utils/object.js';\nimport type {\n  Association,\n  AssociationOptions,\n  MultiAssociationAccessors,\n  MultiAssociationOptions,\n} from './base';\nimport { MultiAssociation } from './base';\nimport { BelongsToAssociation } from './belongs-to.js';\nimport type { AssociationStatic, NormalizeBaseAssociationOptions } from './helpers';\nimport {\n  defineAssociation,\n  mixinMethods,\n  normalizeBaseAssociationOptions,\n  normalizeInverseAssociation,\n} from './helpers';\n\n/**\n * One-to-many association.\n * See {@link Model.hasMany}\n *\n * Like with {@link HasOneAssociation}, the foreign key will be defined on the target model.\n *\n * In the API reference below, add the name of the association to the method, e.g. for `User.hasMany(Project)` the getter will be `user.getProjects()`.\n * If the association is aliased, use the alias instead, e.g. `User.hasMany(Project, { as: 'jobs' })` will be `user.getJobs()`.\n *\n * @typeParam S The model on which {@link Model.hasMany} has been called, on which the association methods will be added.\n * @typeParam T The model passed to {@link Model.hasMany}. This model will receive the Foreign Key attribute.\n * @typeParam SourceKey The name of the attribute that the foreign key in the target model will reference.\n * @typeParam TargetKey The name of the Foreign Key attribute on the Target model.\n * @typeParam TargetPrimaryKey The name of the Primary Key attribute of the Target model. Used by {@link HasManySetAssociationsMixin} & others.\n */\n// Note: this class is named HasManyAssociation instead of HasMany to prevent naming conflicts with the HasMany decorator\nexport class HasManyAssociation<\n  S extends Model = Model,\n  T extends Model = Model,\n  SourceKey extends AttributeNames<S> = any,\n  TargetKey extends AttributeNames<T> = any,\n  TargetPrimaryKey extends AttributeNames<T> = any,\n> extends MultiAssociation<\n  S,\n  T,\n  TargetKey,\n  TargetPrimaryKey,\n  NormalizedHasManyOptions<SourceKey, TargetKey>\n> {\n  accessors: MultiAssociationAccessors;\n\n  get foreignKey(): TargetKey {\n    return this.inverse.foreignKey;\n  }\n\n  /**\n   * The column name of the foreign key (on the target model)\n   */\n  get identifierField(): string {\n    return this.inverse.identifierField;\n  }\n\n  /**\n   * The name of the attribute the foreign key points to.\n   *\n   * This key is on the Source Model.\n   * The {@link Association.foreignKey} is on the Target Model.\n   */\n  get sourceKey(): SourceKey {\n    return this.inverse.targetKey;\n  }\n\n  /**\n   * @deprecated use {@link sourceKey}\n   */\n  get sourceKeyAttribute(): SourceKey {\n    return this.sourceKey;\n  }\n\n  get sourceKeyField(): string {\n    return this.inverse.targetKeyField;\n  }\n\n  readonly inverse: BelongsToAssociation<T, S, TargetKey, SourceKey>;\n\n  constructor(\n    secret: symbol,\n    source: ModelStatic<S>,\n    target: ModelStatic<T>,\n    options: NormalizedHasManyOptions<SourceKey, TargetKey>,\n    parent?: Association,\n    inverse?: BelongsToAssociation<T, S, TargetKey, SourceKey>,\n  ) {\n    if (options.sourceKey && !source.getAttributes()[options.sourceKey]) {\n      throw new Error(\n        `Unknown attribute \"${options.sourceKey}\" passed as sourceKey, define this attribute on model \"${source.name}\" first`,\n      );\n    }\n\n    if ('keyType' in options) {\n      throw new TypeError(\n        'Option \"keyType\" has been removed from the BelongsTo\\'s options. Set \"foreignKey.type\" instead.',\n      );\n    }\n\n    if ('through' in options) {\n      throw new Error(\n        'The \"through\" option is not available in hasMany. N:M associations are defined using belongsToMany instead.',\n      );\n    }\n\n    super(secret, source, target, options, parent);\n\n    this.inverse =\n      inverse ??\n      BelongsToAssociation.associate(\n        secret,\n        target,\n        source,\n        removeUndefined({\n          as: options.inverse?.as,\n          scope: options.inverse?.scope,\n          foreignKey: options.foreignKey,\n          targetKey: options.sourceKey,\n          foreignKeyConstraints: options.foreignKeyConstraints,\n          hooks: options.hooks,\n        }),\n        this,\n      );\n\n    // Get singular and plural names\n    // try to uppercase the first letter, unless the model forbids it\n    const plural = upperFirst(this.options.name.plural);\n    const singular = upperFirst(this.options.name.singular);\n\n    this.accessors = {\n      get: `get${plural}`,\n      set: `set${plural}`,\n      addMultiple: `add${plural}`,\n      add: `add${singular}`,\n      create: `create${singular}`,\n      remove: `remove${singular}`,\n      removeMultiple: `remove${plural}`,\n      hasSingle: `has${singular}`,\n      hasAll: `has${plural}`,\n      count: `count${plural}`,\n    };\n\n    this.#mixin(source.prototype);\n  }\n\n  static associate<\n    S extends Model,\n    T extends Model,\n    SourceKey extends AttributeNames<S>,\n    TargetKey extends AttributeNames<T>,\n  >(\n    secret: symbol,\n    source: ModelStatic<S>,\n    target: ModelStatic<T>,\n    options: HasManyOptions<SourceKey, TargetKey> = {},\n    parent?: Association<any>,\n    inverse?: BelongsToAssociation<T, S, TargetKey, SourceKey>,\n  ): HasManyAssociation<S, T, SourceKey, TargetKey> {\n    return defineAssociation<\n      HasManyAssociation<S, T, SourceKey, TargetKey>,\n      HasManyOptions<SourceKey, TargetKey>,\n      NormalizedHasManyOptions<SourceKey, TargetKey>\n    >(\n      HasManyAssociation,\n      source,\n      target,\n      options,\n      parent,\n      normalizeHasManyOptions,\n      normalizedOptions => {\n        // self-associations must always set their 'as' parameter\n        if (\n          isSameInitialModel(source, target) &&\n          // use 'options' because this will always be set in 'normalizedOptions'\n          (!options.as ||\n            !normalizedOptions.inverse?.as ||\n            options.as === normalizedOptions.inverse.as)\n        ) {\n          throw new AssociationError(\n            'Both options \"as\" and \"inverse.as\" must be defined for hasMany self-associations, and their value must be different.',\n          );\n        }\n\n        return new HasManyAssociation(secret, source, target, normalizedOptions, parent, inverse);\n      },\n    );\n  }\n\n  #mixin(mixinTargetPrototype: Model) {\n    mixinMethods(\n      this,\n      mixinTargetPrototype,\n      [\n        'get',\n        'count',\n        'hasSingle',\n        'hasAll',\n        'set',\n        'add',\n        'addMultiple',\n        'remove',\n        'removeMultiple',\n        'create',\n      ],\n      {\n        hasSingle: 'has',\n        hasAll: 'has',\n        addMultiple: 'add',\n        removeMultiple: 'remove',\n      },\n    );\n  }\n\n  /**\n   * Get everything currently associated with this, using an optional where clause.\n   *\n   * @param instances source instances\n   * @param options find options\n   */\n  async get(instances: S, options?: HasManyGetAssociationsMixinOptions<T>): Promise<T[]>;\n  async get(\n    instances: S[],\n    options?: HasManyGetAssociationsMixinOptions<T>,\n  ): Promise<Map<any, T[]>>;\n  async get(\n    instances: S | S[],\n    options: HasManyGetAssociationsMixinOptions<T> = {},\n  ): Promise<T[] | Map<any, T[]>> {\n    let isManyMode = true;\n    if (!Array.isArray(instances)) {\n      isManyMode = false;\n      instances = [instances];\n    }\n\n    const findOptions: FindOptions = { ...options };\n\n    const where = Object.create(null);\n\n    // TODO: scopes should be combined using AND instance of overwriting.\n    if (this.scope) {\n      Object.assign(where, this.scope);\n    }\n\n    let values;\n    if (instances.length > 1) {\n      values = instances.map(instance => instance.get(this.sourceKey, { raw: true }));\n\n      if (findOptions.limit && instances.length > 1) {\n        findOptions.groupedLimit = {\n          limit: findOptions.limit,\n          on: this, // association\n          values,\n        };\n\n        delete findOptions.limit;\n      } else {\n        where[this.foreignKey] = {\n          [Op.in]: values,\n        };\n        delete findOptions.groupedLimit;\n      }\n    } else {\n      where[this.foreignKey] = instances[0].get(this.sourceKey, { raw: true });\n    }\n\n    findOptions.where = findOptions.where ? { [Op.and]: [where, findOptions.where] } : where;\n\n    let Model = this.target;\n    if (options.scope != null) {\n      if (!options.scope) {\n        Model = Model.withoutScope();\n      } else if (options.scope !== true) {\n        // 'true' means default scope. Which is the same as not doing anything.\n        Model = Model.withScope(options.scope);\n      }\n    }\n\n    if (options.schema != null) {\n      Model = Model.withSchema({\n        schema: options.schema,\n        schemaDelimiter: options.schemaDelimiter,\n      });\n    }\n\n    const results = await Model.findAll(findOptions);\n    if (!isManyMode) {\n      return results;\n    }\n\n    const result = new Map<any, T[]>();\n    for (const instance of instances) {\n      result.set(instance.get(this.sourceKey, { raw: true }), []);\n    }\n\n    for (const instance of results) {\n      const value = instance.get(this.foreignKey, { raw: true });\n      result.get(value)!.push(instance);\n    }\n\n    return result;\n  }\n\n  /**\n   * Count everything currently associated with this, using an optional where clause.\n   *\n   * @param instance the source instance\n   * @param options find & count options\n   */\n  async count(instance: S, options?: HasManyCountAssociationsMixinOptions<T>): Promise<number> {\n    const findOptions: HasManyGetAssociationsMixinOptions<T> = {\n      ...options,\n      raw: true,\n      plain: true,\n      attributes: [\n        [fn('COUNT', col(`${this.target.name}.${this.target.primaryKeyField}`)), 'count'],\n      ],\n    };\n\n    const result = await this.get(instance, findOptions);\n\n    return Number.parseInt(\n      // @ts-expect-error -- this.get() isn't designed to expect returning a raw output.\n      result.count,\n      10,\n    );\n  }\n\n  /**\n   * Check if one or more rows are associated with `this`.\n   *\n   * @param sourceInstance the source instance\n   * @param targets A list of instances or their primary keys\n   * @param options Options passed to getAssociations\n   */\n  async has(\n    sourceInstance: S,\n    targets: AllowIterable<T | Exclude<T[TargetPrimaryKey], any[]>>,\n    options?: HasManyHasAssociationsMixinOptions<T>,\n  ): Promise<boolean> {\n    const normalizedTargets = this.toInstanceOrPkArray(targets);\n\n    const where = {\n      [Op.or]: normalizedTargets.map(instance => {\n        if (instance instanceof this.target) {\n          // TODO: remove eslint-disable once we drop support for < 5.2\n          // eslint-disable-next-line @typescript-eslint/prefer-ts-expect-error -- TS 5.2 works, but < 5.2 does not\n          // @ts-ignore\n          return instance.where();\n        }\n\n        return {\n          // TODO: support composite foreign keys\n          // @ts-expect-error -- TODO: what if the target has no primary key?\n          [this.target.primaryKeyAttribute]: instance,\n        };\n      }),\n    };\n\n    const findOptions: HasManyGetAssociationsMixinOptions<T> = {\n      ...options,\n      scope: false,\n      // TODO: support composite foreign keys\n      // @ts-expect-error -- TODO: what if the target has no primary key?\n      attributes: [this.target.primaryKeyAttribute],\n      raw: true,\n      // @ts-expect-error -- TODO: current WhereOptions typings do not allow having 'WhereOptions' inside another 'WhereOptions'\n      where: {\n        [Op.and]: [where, options?.where],\n      },\n    };\n\n    const associatedObjects = await this.get(sourceInstance, findOptions);\n\n    return associatedObjects.length === normalizedTargets.length;\n  }\n\n  /**\n   * Set the associated models by passing an array of persisted instances or their primary keys. Everything that is not in the passed array will be un-associated\n   *\n   * @param sourceInstance source instance to associate new instances with\n   * @param targets An array of persisted instances or primary key of instances to associate with this. Pass `null` to remove all associations.\n   * @param options Options passed to `target.findAll` and `update`.\n   */\n  async set(\n    sourceInstance: S,\n    targets: AllowIterable<T | Exclude<T[TargetPrimaryKey], any[]>> | null,\n    options?: HasManySetAssociationsMixinOptions<T>,\n  ): Promise<void> {\n    const normalizedTargets = this.toInstanceArray(targets);\n\n    const oldAssociations = await this.get(sourceInstance, { ...options, scope: false, raw: true });\n    const promises: Array<Promise<any>> = [];\n    const obsoleteAssociations = oldAssociations.filter(old => {\n      return !normalizedTargets.some(obj => {\n        // @ts-expect-error -- old is a raw result\n        return obj.get(this.target.primaryKeyAttribute) === old[this.target.primaryKeyAttribute];\n      });\n    });\n\n    const unassociatedObjects = normalizedTargets.filter(obj => {\n      return !oldAssociations.some(old => {\n        // @ts-expect-error -- old is a raw result\n        return obj.get(this.target.primaryKeyAttribute) === old[this.target.primaryKeyAttribute];\n      });\n    });\n\n    if (obsoleteAssociations.length > 0) {\n      promises.push(\n        this.remove(sourceInstance, obsoleteAssociations, {\n          ...options,\n          destroy: options?.destroyPrevious,\n        }),\n      );\n    }\n\n    if (unassociatedObjects.length > 0) {\n      const update = {\n        [this.foreignKey]: sourceInstance.get(this.sourceKey),\n        ...this.scope,\n      } as UpdateValues<T>;\n\n      const updateWhere = {\n        // @ts-expect-error -- TODO: what if the target has no primary key?\n        [this.target.primaryKeyAttribute]: unassociatedObjects.map(unassociatedObject => {\n          // @ts-expect-error -- TODO: what if the target has no primary key?\n          return unassociatedObject.get(this.target.primaryKeyAttribute);\n        }),\n      };\n\n      promises.push(\n        this.target.withoutScope().update(update, {\n          ...options,\n          where: updateWhere,\n        }),\n      );\n    }\n\n    await Promise.all(promises);\n  }\n\n  /**\n   * Associate one or more target rows with `this`. This method accepts a Model / string / number to associate a single row,\n   * or a mixed array of Model / string / numbers to associate multiple rows.\n   *\n   * @param sourceInstance the source instance\n   * @param [rawTargetInstances] A single instance or primary key, or a mixed array of persisted instances or primary keys\n   * @param [options] Options passed to `target.update`.\n   */\n  async add(\n    sourceInstance: S,\n    rawTargetInstances: AllowIterable<T | Exclude<T[TargetPrimaryKey], any[]>>,\n    options: HasManyAddAssociationsMixinOptions<T> = {},\n  ): Promise<void> {\n    const targetInstances = this.toInstanceArray(rawTargetInstances);\n\n    if (targetInstances.length === 0) {\n      return;\n    }\n\n    const update = {\n      [this.foreignKey]: sourceInstance.get(this.sourceKey),\n      ...this.scope,\n    } as UpdateValues<T>;\n\n    const where = {\n      // @ts-expect-error -- TODO: what if the target has no primary key?\n      [this.target.primaryKeyAttribute]: targetInstances.map(unassociatedObject => {\n        // @ts-expect-error -- TODO: what if the target has no primary key?\n        return unassociatedObject.get(this.target.primaryKeyAttribute);\n      }),\n    };\n\n    await this.target.withoutScope().update(update, { ...options, where });\n  }\n\n  /**\n   * Un-associate one or several target rows.\n   *\n   * @param sourceInstance instance to un associate instances with\n   * @param targets Can be an Instance or its primary key, or a mixed array of instances and primary keys\n   * @param options Options passed to `target.update`\n   */\n  async remove(\n    sourceInstance: S,\n    targets: AllowIterable<T | Exclude<T[TargetPrimaryKey], any[]>>,\n    options: HasManyRemoveAssociationsMixinOptions<T> = {},\n  ): Promise<void> {\n    if (targets == null) {\n      return;\n    }\n\n    const normalizedTargets = this.toInstanceOrPkArray(targets);\n    if (normalizedTargets.length === 0) {\n      return;\n    }\n\n    const where: WhereOptions = {\n      [this.foreignKey]: sourceInstance.get(this.sourceKey),\n      // @ts-expect-error -- TODO: what if the target has no primary key?\n      [this.target.primaryKeyAttribute]: normalizedTargets.map(targetInstance => {\n        if (targetInstance instanceof this.target) {\n          // @ts-expect-error -- TODO: what if the target has no primary key?\n          return targetInstance.get(this.target.primaryKeyAttribute);\n        }\n\n        // raw entity\n        // @ts-expect-error -- TODO: what if the target has no primary key?\n        if (isPlainObject(targetInstance) && this.target.primaryKeyAttribute in targetInstance) {\n          // @ts-expect-error -- implicit any, can't be fixed\n          return targetInstance[this.target.primaryKeyAttribute];\n        }\n\n        // primary key\n        return targetInstance;\n      }),\n    };\n\n    const foreignKeyIsNullable =\n      this.target.modelDefinition.attributes.get(this.foreignKey)?.allowNull ?? true;\n\n    if (options.destroy || !foreignKeyIsNullable) {\n      await this.target.withoutScope().destroy({\n        ...(isObject(options.destroy) ? options.destroy : undefined),\n        logging: options.logging,\n        benchmark: options.benchmark,\n        transaction: options.transaction,\n        where,\n      });\n    } else {\n      const update = {\n        [this.foreignKey]: null,\n      } as UpdateValues<T>;\n\n      await this.target.withoutScope().update(update, { ...options, where });\n    }\n  }\n\n  /**\n   * Create a new instance of the associated model and associate it with this.\n   *\n   * @param sourceInstance source instance\n   * @param values values for target model instance\n   * @param options Options passed to `target.create`\n   */\n  async create(\n    sourceInstance: S,\n    // @ts-expect-error -- {} is not always assignable to 'values', but Target.create will enforce this, not us.\n    values: CreationAttributes<T> = {},\n    options:\n      | HasManyCreateAssociationMixinOptions<T>\n      | HasManyCreateAssociationMixinOptions<T>['fields'] = {},\n  ): Promise<T> {\n    if (Array.isArray(options)) {\n      options = {\n        fields: options,\n      };\n    }\n\n    if (this.scope) {\n      for (const attribute of Object.keys(this.scope)) {\n        // @ts-expect-error -- TODO: fix the typing of {@link AssociationScope}\n        values[attribute] = this.scope[attribute];\n        if (options.fields) {\n          options.fields.push(attribute);\n        }\n      }\n    }\n\n    if (options.fields) {\n      options.fields.push(this.foreignKey);\n    }\n\n    return this.target.create(\n      {\n        ...values,\n        [this.foreignKey]: sourceInstance.get(this.sourceKey),\n      },\n      options,\n    );\n  }\n}\n\n// workaround https://github.com/evanw/esbuild/issues/1260\nObject.defineProperty(HasManyAssociation, 'name', {\n  value: 'HasMany',\n});\n\nexport type NormalizedHasManyOptions<\n  SourceKey extends string,\n  TargetKey extends string,\n> = NormalizeBaseAssociationOptions<Omit<HasManyOptions<SourceKey, TargetKey>, 'inverse'>> & {\n  inverse?: Exclude<HasManyOptions<SourceKey, TargetKey>['inverse'], string>;\n};\n\n/**\n * Options provided when associating models with hasMany relationship\n */\nexport interface HasManyOptions<SourceKey extends string, TargetKey extends string>\n  extends MultiAssociationOptions<TargetKey> {\n  /**\n   * The name of the field to use as the key for the association in the source table. Defaults to the primary\n   * key of the source table\n   */\n  sourceKey?: SourceKey;\n\n  /**\n   * The name of the inverse association, or an object for further association setup.\n   */\n  inverse?:\n    | string\n    | undefined\n    | {\n        as?: AssociationOptions<any>['as'];\n        scope?: AssociationOptions<any>['scope'];\n      };\n}\n\nfunction normalizeHasManyOptions<SourceKey extends string, TargetKey extends string>(\n  type: AssociationStatic<any>,\n  options: HasManyOptions<SourceKey, TargetKey>,\n  source: ModelStatic<Model>,\n  target: ModelStatic<Model>,\n): NormalizedHasManyOptions<SourceKey, TargetKey> {\n  return normalizeBaseAssociationOptions(\n    type,\n    {\n      ...options,\n      inverse: normalizeInverseAssociation(options.inverse),\n    },\n    source,\n    target,\n  );\n}\n\n/**\n * The options for the getAssociations mixin of the hasMany association.\n *\n * Can provide an optional where clause to limit the associated models through {@link HasManyGetAssociationsMixinOptions.where}.\n *\n * @see HasManyGetAssociationsMixin\n */\nexport interface HasManyGetAssociationsMixinOptions<T extends Model>\n  extends FindOptions<Attributes<T>> {\n  /**\n   * Apply a scope on the related model, or remove its default scope by passing false.\n   */\n  scope?: string | string[] | boolean;\n\n  /**\n   * Apply a schema on the related model\n   */\n  schema?: string;\n  schemaDelimiter?: string;\n}\n\n/**\n * The getAssociations mixin applied to models with hasMany.\n * An example of usage is as follows:\n *\n * ```typescript\n * class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n *   declare getRoles: HasManyGetAssociationsMixin<Role>;\n * }\n *\n * User.hasMany(Role);\n * ```\n *\n * @see Model.hasMany\n */\nexport type HasManyGetAssociationsMixin<T extends Model> = (\n  options?: HasManyGetAssociationsMixinOptions<T>,\n) => Promise<T[]>;\n\n/**\n * The options for the setAssociations mixin of the hasMany association.\n *\n * @see HasManySetAssociationsMixin\n */\nexport interface HasManySetAssociationsMixinOptions<T extends Model>\n  extends FindOptions<Attributes<T>>,\n    InstanceUpdateOptions<Attributes<T>> {\n  /**\n   * Delete the previous associated model. Default to false.\n   *\n   * Only applies if the foreign key is nullable. If the foreign key is not nullable,\n   * the previous associated model is always deleted.\n   */\n  destroyPrevious?:\n    | boolean\n    | Omit<DestroyOptions<Attributes<T>>, 'where' | 'transaction' | 'logging' | 'benchmark'>\n    | undefined;\n}\n\n/**\n * The setAssociations mixin applied to models with hasMany.\n * An example of usage is as follows:\n *\n * ```typescript\n * class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n *   declare setRoles: HasManySetAssociationsMixin<Role, Role['id']>;\n * }\n *\n * User.hasMany(Role);\n * ```\n *\n * @see Model.hasMany\n */\nexport type HasManySetAssociationsMixin<T extends Model, TModelPrimaryKey> = (\n  newAssociations?: Iterable<T | TModelPrimaryKey> | null,\n  options?: HasManySetAssociationsMixinOptions<T>,\n) => Promise<void>;\n\n/**\n * The options for the addAssociations mixin of the hasMany association.\n *\n * @see HasManyAddAssociationsMixin\n */\nexport interface HasManyAddAssociationsMixinOptions<T extends Model>\n  extends InstanceUpdateOptions<Attributes<T>> {}\n\n/**\n * The addAssociations mixin applied to models with hasMany.\n * An example of usage is as follows:\n *\n * ```typescript\n * class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n *   declare addRoles: HasManyAddAssociationsMixin<Role, Role['id']>;\n * }\n *\n * User.hasMany(Role);\n * ```\n *\n * @see Model.hasMany\n */\nexport type HasManyAddAssociationsMixin<T extends Model, TModelPrimaryKey> = (\n  newAssociations?: Iterable<T | TModelPrimaryKey>,\n  options?: HasManyAddAssociationsMixinOptions<T>,\n) => Promise<void>;\n\n/**\n * The options for the addAssociation mixin of the hasMany association.\n *\n * @see HasManyAddAssociationMixin\n */\nexport interface HasManyAddAssociationMixinOptions<T extends Model>\n  extends HasManyAddAssociationsMixinOptions<T> {}\n\n/**\n * The addAssociation mixin applied to models with hasMany.\n * An example of usage is as follows:\n *\n * ```typescript\n * class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n *   declare addRole: HasManyAddAssociationMixin<Role, Role['id']>;\n * }\n *\n * User.hasMany(Role);\n * ```\n *\n * @see Model.hasMany\n */\nexport type HasManyAddAssociationMixin<T extends Model, TModelPrimaryKey> = (\n  newAssociation?: T | TModelPrimaryKey,\n  options?: HasManyAddAssociationMixinOptions<T>,\n) => Promise<void>;\n\n/**\n * The options for the createAssociation mixin of the hasMany association.\n *\n * @see HasManyCreateAssociationMixin\n */\nexport interface HasManyCreateAssociationMixinOptions<T extends Model>\n  extends CreateOptions<Attributes<T>> {}\n\n/**\n * The createAssociation mixin applied to models with hasMany.\n * An example of usage is as follows:\n *\n * ```typescript\n * class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n *   declare createRole: HasManyCreateAssociationMixin<Role>;\n * }\n *\n * User.hasMany(Role);\n * ```\n *\n * @see Model.hasMany\n */\nexport type HasManyCreateAssociationMixin<\n  Target extends Model,\n  ExcludedAttributes extends keyof CreationAttributes<Target> = never,\n> = (\n  values?: Omit<CreationAttributes<Target>, ExcludedAttributes>,\n  options?: HasManyCreateAssociationMixinOptions<Target>,\n) => Promise<Target>;\n\n/**\n * The options for the removeAssociation mixin of the hasMany association.\n *\n * @see HasManyRemoveAssociationMixin\n */\nexport interface HasManyRemoveAssociationMixinOptions<T extends Model>\n  extends HasManyRemoveAssociationsMixinOptions<T> {}\n\n/**\n * The removeAssociation mixin applied to models with hasMany.\n * An example of usage is as follows:\n *\n * ```typescript\n * class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n *   declare removeRole: HasManyRemoveAssociationMixin<Role, Role['id']>;\n * }\n *\n * User.hasMany(Role);\n * ```\n *\n * @see Model.hasMany\n */\nexport type HasManyRemoveAssociationMixin<T extends Model, TModelPrimaryKey> = (\n  oldAssociated?: T | TModelPrimaryKey,\n  options?: HasManyRemoveAssociationMixinOptions<T>,\n) => Promise<void>;\n\n/**\n * The options for the removeAssociations mixin of the hasMany association.\n *\n * @see HasManyRemoveAssociationsMixin\n */\nexport interface HasManyRemoveAssociationsMixinOptions<T extends Model>\n  extends Omit<InstanceUpdateOptions<Attributes<T>>, 'where'> {\n  /**\n   * Delete the associated model. Default to false.\n   *\n   * Only applies if the foreign key is nullable. If the foreign key is not nullable,\n   * the associated model is always deleted.\n   */\n  destroy?:\n    | boolean\n    | Omit<DestroyOptions<Attributes<T>>, 'where' | 'transaction' | 'logging' | 'benchmark'>\n    | undefined;\n}\n\n/**\n * The removeAssociations mixin applied to models with hasMany.\n * An example of usage is as follows:\n *\n * ```typescript\n * class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n *   declare removeRoles: HasManyRemoveAssociationsMixin<Role, Role['id']>;\n * }\n *\n * User.hasMany(Role);\n * ```\n *\n * @see Model.hasMany\n */\nexport type HasManyRemoveAssociationsMixin<T extends Model, TModelPrimaryKey> = (\n  oldAssociateds?: Iterable<T | TModelPrimaryKey>,\n  options?: HasManyRemoveAssociationsMixinOptions<T>,\n) => Promise<void>;\n\n/**\n * The options for the hasAssociation mixin of the hasMany association.\n *\n * @see HasManyHasAssociationMixin\n */\nexport interface HasManyHasAssociationMixinOptions<T extends Model>\n  extends HasManyGetAssociationsMixinOptions<T> {}\n\n/**\n * The hasAssociation mixin applied to models with hasMany.\n * An example of usage is as follows:\n *\n * ```typescript\n * class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n *   declare hasRole: HasManyHasAssociationMixin<Role, Role['id']>;\n * }\n *\n * User.hasMany(Role);\n * ```\n *\n * @see Model.hasMany\n */\nexport type HasManyHasAssociationMixin<TModel extends Model, TModelPrimaryKey> = (\n  target: TModel | TModelPrimaryKey,\n  options?: HasManyHasAssociationMixinOptions<TModel>,\n) => Promise<boolean>;\n\n/**\n * The options for the hasAssociations mixin of the hasMany association.\n *\n * @see HasManyHasAssociationsMixin\n */\nexport interface HasManyHasAssociationsMixinOptions<T extends Model>\n  extends HasManyGetAssociationsMixinOptions<T> {}\n\n/**\n * The removeAssociations mixin applied to models with hasMany.\n * An example of usage is as follows:\n *\n * ```typescript\n * class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n *   declare hasRoles: HasManyHasAssociationsMixin<Role, Role['id']>;\n * }\n *\n * User.hasMany(Role);\n * ```\n *\n * @see Model.hasMany\n */\n// TODO: this should be renamed to \"HasManyHasAllAssociationsMixin\",\n//       we should also add a \"HasManyHasAnyAssociationsMixin\"\n//       and \"HasManyHasAssociationsMixin\" should instead return a Map of id -> boolean or WeakMap of instance -> boolean\nexport type HasManyHasAssociationsMixin<TModel extends Model, TModelPrimaryKey> = (\n  targets: Iterable<TModel | TModelPrimaryKey>,\n  options?: HasManyHasAssociationsMixinOptions<TModel>,\n) => Promise<boolean>;\n\n/**\n * The options for the countAssociations mixin of the hasMany association.\n *\n * @see HasManyCountAssociationsMixin\n */\nexport interface HasManyCountAssociationsMixinOptions<T extends Model>\n  extends Transactionable,\n    Filterable<Attributes<T>> {\n  /**\n   * Apply a scope on the related model, or remove its default scope by passing false.\n   */\n  scope?: string | boolean;\n}\n\n/**\n * The countAssociations mixin applied to models with hasMany.\n * An example of usage is as follows:\n *\n * ```typescript\n * class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\n *   declare countRoles: HasManyCountAssociationsMixin<Role>;\n * }\n *\n * User.hasMany(Role);\n * ```\n *\n * @see Model.hasMany\n */\nexport type HasManyCountAssociationsMixin<T extends Model> = (\n  options?: HasManyCountAssociationsMixinOptions<T>,\n) => Promise<number>;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,mBAA8B;AAC9B,sBAAqB;AACrB,wBAAuB;AAEvB,oBAAiC;AACjC,iBAAoB;AACpB,gBAAmB;AAenB,uBAAmB;AACnB,yBAAmC;AACnC,oBAAgC;AAOhC,kBAAiC;AACjC,wBAAqC;AAErC,qBAKO;AAkBA,MAAM,2BAMH,6BAMR;AAAA,EACA;AAAA,EAEA,IAAI,aAAwB;AAC1B,WAAO,KAAK,QAAQ;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,kBAA0B;AAC5B,WAAO,KAAK,QAAQ;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,YAAuB;AACzB,WAAO,KAAK,QAAQ;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,qBAAgC;AAClC,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,iBAAyB;AAC3B,WAAO,KAAK,QAAQ;AAAA,EACtB;AAAA,EAES;AAAA,EAET,YACE,QACA,QACA,QACA,SACA,QACA,SACA;AACA,QAAI,QAAQ,aAAa,CAAC,OAAO,cAAc,EAAE,QAAQ,SAAS,GAAG;AACnE,YAAM,IAAI;AAAA,QACR,sBAAsB,QAAQ,mEAAmE,OAAO;AAAA,MAC1G;AAAA,IACF;AAEA,QAAI,aAAa,SAAS;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,aAAa,SAAS;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,UAAM,QAAQ,QAAQ,QAAQ,SAAS,MAAM;AAE7C,SAAK,UACH,WACA,uCAAqB;AAAA,MACnB;AAAA,MACA;AAAA,MACA;AAAA,UACA,+BAAgB;AAAA,QACd,IAAI,QAAQ,SAAS;AAAA,QACrB,OAAO,QAAQ,SAAS;AAAA,QACxB,YAAY,QAAQ;AAAA,QACpB,WAAW,QAAQ;AAAA,QACnB,uBAAuB,QAAQ;AAAA,QAC/B,OAAO,QAAQ;AAAA,MACjB,CAAC;AAAA,MACD;AAAA,IACF;AAIF,UAAM,aAAS,kBAAAA,SAAW,KAAK,QAAQ,KAAK,MAAM;AAClD,UAAM,eAAW,kBAAAA,SAAW,KAAK,QAAQ,KAAK,QAAQ;AAEtD,SAAK,YAAY;AAAA,MACf,KAAK,MAAM;AAAA,MACX,KAAK,MAAM;AAAA,MACX,aAAa,MAAM;AAAA,MACnB,KAAK,MAAM;AAAA,MACX,QAAQ,SAAS;AAAA,MACjB,QAAQ,SAAS;AAAA,MACjB,gBAAgB,SAAS;AAAA,MACzB,WAAW,MAAM;AAAA,MACjB,QAAQ,MAAM;AAAA,MACd,OAAO,QAAQ;AAAA,IACjB;AAEA,SAAK,OAAO,OAAO,SAAS;AAAA,EAC9B;AAAA,EAEA,OAAO,UAML,QACA,QACA,QACA,UAAgD,CAAC,GACjD,QACA,SACgD;AAChD,eAAO;AAAA,MAKL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,uBAAqB;AAEnB,gBACE,uCAAmB,QAAQ,MAAM;AAAA,SAEhC,CAAC,QAAQ,MACR,CAAC,kBAAkB,SAAS,MAC5B,QAAQ,OAAO,kBAAkB,QAAQ,KAC3C;AACA,gBAAM,IAAI;AAAA,YACR;AAAA,UACF;AAAA,QACF;AAEA,eAAO,IAAI,mBAAmB,QAAQ,QAAQ,QAAQ,mBAAmB,QAAQ,OAAO;AAAA,MAC1F;AAAA,IACF;AAAA,EACF;AAAA,EAEA,OAAO,sBAA6B;AAClC;AAAA,MACE;AAAA,MACA;AAAA,MACA;AAAA,QACE;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,MACA;AAAA,QACE,WAAW;AAAA,QACX,QAAQ;AAAA,QACR,aAAa;AAAA,QACb,gBAAgB;AAAA,MAClB;AAAA,IACF;AAAA,EACF;AAAA,EAaA,MAAM,IACJ,WACA,UAAiD,CAAC,GACpB;AAC9B,QAAI,aAAa;AACjB,QAAI,CAAC,MAAM,QAAQ,SAAS,GAAG;AAC7B,mBAAa;AACb,kBAAY,CAAC,SAAS;AAAA,IACxB;AAEA,UAAM,cAA2B,EAAE,GAAG,QAAQ;AAE9C,UAAM,QAAQ,uBAAO,OAAO,IAAI;AAGhC,QAAI,KAAK,OAAO;AACd,aAAO,OAAO,OAAO,KAAK,KAAK;AAAA,IACjC;AAEA,QAAI;AACJ,QAAI,UAAU,SAAS,GAAG;AACxB,eAAS,UAAU,IAAI,cAAY,SAAS,IAAI,KAAK,WAAW,EAAE,KAAK,KAAK,CAAC,CAAC;AAE9E,UAAI,YAAY,SAAS,UAAU,SAAS,GAAG;AAC7C,oBAAY,eAAe;AAAA,UACzB,OAAO,YAAY;AAAA,UACnB,IAAI;AAAA;AAAA,UACJ;AAAA,QACF;AAEA,eAAO,YAAY;AAAA,MACrB,OAAO;AACL,cAAM,KAAK,UAAU,IAAI;AAAA,UACvB,CAAC,oBAAG,EAAE,GAAG;AAAA,QACX;AACA,eAAO,YAAY;AAAA,MACrB;AAAA,IACF,OAAO;AACL,YAAM,KAAK,UAAU,IAAI,UAAU,CAAC,EAAE,IAAI,KAAK,WAAW,EAAE,KAAK,KAAK,CAAC;AAAA,IACzE;AAEA,gBAAY,QAAQ,YAAY,QAAQ,EAAE,CAAC,oBAAG,GAAG,GAAG,CAAC,OAAO,YAAY,KAAK,EAAE,IAAI;AAEnF,QAAI,QAAQ,KAAK;AACjB,QAAI,QAAQ,SAAS,MAAM;AACzB,UAAI,CAAC,QAAQ,OAAO;AAClB,gBAAQ,MAAM,aAAa;AAAA,MAC7B,WAAW,QAAQ,UAAU,MAAM;AAEjC,gBAAQ,MAAM,UAAU,QAAQ,KAAK;AAAA,MACvC;AAAA,IACF;AAEA,QAAI,QAAQ,UAAU,MAAM;AAC1B,cAAQ,MAAM,WAAW;AAAA,QACvB,QAAQ,QAAQ;AAAA,QAChB,iBAAiB,QAAQ;AAAA,MAC3B,CAAC;AAAA,IACH;AAEA,UAAM,UAAU,MAAM,MAAM,QAAQ,WAAW;AAC/C,QAAI,CAAC,YAAY;AACf,aAAO;AAAA,IACT;AAEA,UAAM,SAAS,oBAAI,IAAc;AACjC,eAAW,YAAY,WAAW;AAChC,aAAO,IAAI,SAAS,IAAI,KAAK,WAAW,EAAE,KAAK,KAAK,CAAC,GAAG,CAAC,CAAC;AAAA,IAC5D;AAEA,eAAW,YAAY,SAAS;AAC9B,YAAM,QAAQ,SAAS,IAAI,KAAK,YAAY,EAAE,KAAK,KAAK,CAAC;AACzD,aAAO,IAAI,KAAK,EAAG,KAAK,QAAQ;AAAA,IAClC;AAEA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,MAAM,UAAa,SAAoE;AAC3F,UAAM,cAAqD;AAAA,MACzD,GAAG;AAAA,MACH,KAAK;AAAA,MACL,OAAO;AAAA,MACP,YAAY;AAAA,QACV,KAAC,cAAG,aAAS,gBAAI,GAAG,KAAK,OAAO,QAAQ,KAAK,OAAO,iBAAiB,CAAC,GAAG,OAAO;AAAA,MAClF;AAAA,IACF;AAEA,UAAM,SAAS,MAAM,KAAK,IAAI,UAAU,WAAW;AAEnD,WAAO,OAAO;AAAA;AAAA,MAEZ,OAAO;AAAA,MACP;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,IACJ,gBACA,SACA,SACkB;AAClB,UAAM,oBAAoB,KAAK,oBAAoB,OAAO;AAE1D,UAAM,QAAQ;AAAA,MACZ,CAAC,oBAAG,EAAE,GAAG,kBAAkB,IAAI,cAAY;AACzC,YAAI,oBAAoB,KAAK,QAAQ;AAInC,iBAAO,SAAS,MAAM;AAAA,QACxB;AAEA,eAAO;AAAA;AAAA;AAAA,UAGL,CAAC,KAAK,OAAO,mBAAmB,GAAG;AAAA,QACrC;AAAA,MACF,CAAC;AAAA,IACH;AAEA,UAAM,cAAqD;AAAA,MACzD,GAAG;AAAA,MACH,OAAO;AAAA;AAAA;AAAA,MAGP,YAAY,CAAC,KAAK,OAAO,mBAAmB;AAAA,MAC5C,KAAK;AAAA;AAAA,MAEL,OAAO;AAAA,QACL,CAAC,oBAAG,GAAG,GAAG,CAAC,OAAO,SAAS,KAAK;AAAA,MAClC;AAAA,IACF;AAEA,UAAM,oBAAoB,MAAM,KAAK,IAAI,gBAAgB,WAAW;AAEpE,WAAO,kBAAkB,WAAW,kBAAkB;AAAA,EACxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,IACJ,gBACA,SACA,SACe;AACf,UAAM,oBAAoB,KAAK,gBAAgB,OAAO;AAEtD,UAAM,kBAAkB,MAAM,KAAK,IAAI,gBAAgB,EAAE,GAAG,SAAS,OAAO,OAAO,KAAK,KAAK,CAAC;AAC9F,UAAM,WAAgC,CAAC;AACvC,UAAM,uBAAuB,gBAAgB,OAAO,SAAO;AACzD,aAAO,CAAC,kBAAkB,KAAK,SAAO;AAEpC,eAAO,IAAI,IAAI,KAAK,OAAO,mBAAmB,MAAM,IAAI,KAAK,OAAO,mBAAmB;AAAA,MACzF,CAAC;AAAA,IACH,CAAC;AAED,UAAM,sBAAsB,kBAAkB,OAAO,SAAO;AAC1D,aAAO,CAAC,gBAAgB,KAAK,SAAO;AAElC,eAAO,IAAI,IAAI,KAAK,OAAO,mBAAmB,MAAM,IAAI,KAAK,OAAO,mBAAmB;AAAA,MACzF,CAAC;AAAA,IACH,CAAC;AAED,QAAI,qBAAqB,SAAS,GAAG;AACnC,eAAS;AAAA,QACP,KAAK,OAAO,gBAAgB,sBAAsB;AAAA,UAChD,GAAG;AAAA,UACH,SAAS,SAAS;AAAA,QACpB,CAAC;AAAA,MACH;AAAA,IACF;AAEA,QAAI,oBAAoB,SAAS,GAAG;AAClC,YAAM,SAAS;AAAA,QACb,CAAC,KAAK,UAAU,GAAG,eAAe,IAAI,KAAK,SAAS;AAAA,QACpD,GAAG,KAAK;AAAA,MACV;AAEA,YAAM,cAAc;AAAA;AAAA,QAElB,CAAC,KAAK,OAAO,mBAAmB,GAAG,oBAAoB,IAAI,wBAAsB;AAE/E,iBAAO,mBAAmB,IAAI,KAAK,OAAO,mBAAmB;AAAA,QAC/D,CAAC;AAAA,MACH;AAEA,eAAS;AAAA,QACP,KAAK,OAAO,aAAa,EAAE,OAAO,QAAQ;AAAA,UACxC,GAAG;AAAA,UACH,OAAO;AAAA,QACT,CAAC;AAAA,MACH;AAAA,IACF;AAEA,UAAM,QAAQ,IAAI,QAAQ;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAM,IACJ,gBACA,oBACA,UAAiD,CAAC,GACnC;AACf,UAAM,kBAAkB,KAAK,gBAAgB,kBAAkB;AAE/D,QAAI,gBAAgB,WAAW,GAAG;AAChC;AAAA,IACF;AAEA,UAAM,SAAS;AAAA,MACb,CAAC,KAAK,UAAU,GAAG,eAAe,IAAI,KAAK,SAAS;AAAA,MACpD,GAAG,KAAK;AAAA,IACV;AAEA,UAAM,QAAQ;AAAA;AAAA,MAEZ,CAAC,KAAK,OAAO,mBAAmB,GAAG,gBAAgB,IAAI,wBAAsB;AAE3E,eAAO,mBAAmB,IAAI,KAAK,OAAO,mBAAmB;AAAA,MAC/D,CAAC;AAAA,IACH;AAEA,UAAM,KAAK,OAAO,aAAa,EAAE,OAAO,QAAQ,EAAE,GAAG,SAAS,MAAM,CAAC;AAAA,EACvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,OACJ,gBACA,SACA,UAAoD,CAAC,GACtC;AACf,QAAI,WAAW,MAAM;AACnB;AAAA,IACF;AAEA,UAAM,oBAAoB,KAAK,oBAAoB,OAAO;AAC1D,QAAI,kBAAkB,WAAW,GAAG;AAClC;AAAA,IACF;AAEA,UAAM,QAAsB;AAAA,MAC1B,CAAC,KAAK,UAAU,GAAG,eAAe,IAAI,KAAK,SAAS;AAAA;AAAA,MAEpD,CAAC,KAAK,OAAO,mBAAmB,GAAG,kBAAkB,IAAI,oBAAkB;AACzE,YAAI,0BAA0B,KAAK,QAAQ;AAEzC,iBAAO,eAAe,IAAI,KAAK,OAAO,mBAAmB;AAAA,QAC3D;AAIA,gBAAI,4BAAc,cAAc,KAAK,KAAK,OAAO,uBAAuB,gBAAgB;AAEtF,iBAAO,eAAe,KAAK,OAAO,mBAAmB;AAAA,QACvD;AAGA,eAAO;AAAA,MACT,CAAC;AAAA,IACH;AAEA,UAAM,uBACJ,KAAK,OAAO,gBAAgB,WAAW,IAAI,KAAK,UAAU,GAAG,aAAa;AAE5E,QAAI,QAAQ,WAAW,CAAC,sBAAsB;AAC5C,YAAM,KAAK,OAAO,aAAa,EAAE,QAAQ;AAAA,QACvC,OAAI,gBAAAC,SAAS,QAAQ,OAAO,IAAI,QAAQ,UAAU;AAAA,QAClD,SAAS,QAAQ;AAAA,QACjB,WAAW,QAAQ;AAAA,QACnB,aAAa,QAAQ;AAAA,QACrB;AAAA,MACF,CAAC;AAAA,IACH,OAAO;AACL,YAAM,SAAS;AAAA,QACb,CAAC,KAAK,UAAU,GAAG;AAAA,MACrB;AAEA,YAAM,KAAK,OAAO,aAAa,EAAE,OAAO,QAAQ,EAAE,GAAG,SAAS,MAAM,CAAC;AAAA,IACvE;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,OACJ,gBAEA,SAAgC,CAAC,GACjC,UAEwD,CAAC,GAC7C;AACZ,QAAI,MAAM,QAAQ,OAAO,GAAG;AAC1B,gBAAU;AAAA,QACR,QAAQ;AAAA,MACV;AAAA,IACF;AAEA,QAAI,KAAK,OAAO;AACd,iBAAW,aAAa,OAAO,KAAK,KAAK,KAAK,GAAG;AAE/C,eAAO,SAAS,IAAI,KAAK,MAAM,SAAS;AACxC,YAAI,QAAQ,QAAQ;AAClB,kBAAQ,OAAO,KAAK,SAAS;AAAA,QAC/B;AAAA,MACF;AAAA,IACF;AAEA,QAAI,QAAQ,QAAQ;AAClB,cAAQ,OAAO,KAAK,KAAK,UAAU;AAAA,IACrC;AAEA,WAAO,KAAK,OAAO;AAAA,MACjB;AAAA,QACE,GAAG;AAAA,QACH,CAAC,KAAK,UAAU,GAAG,eAAe,IAAI,KAAK,SAAS;AAAA,MACtD;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACF;AAGA,OAAO,eAAe,oBAAoB,QAAQ;AAAA,EAChD,OAAO;AACT,CAAC;AAgCD,SAAS,wBACP,MACA,SACA,QACA,QACgD;AAChD,aAAO;AAAA,IACL;AAAA,IACA;AAAA,MACE,GAAG;AAAA,MACH,aAAS,4CAA4B,QAAQ,OAAO;AAAA,IACtD;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;",
  "names": ["upperFirst", "isObject"]
}
