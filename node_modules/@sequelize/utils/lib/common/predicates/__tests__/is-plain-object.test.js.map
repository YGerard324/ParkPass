{
  "version": 3,
  "sources": ["../../../../src/common/predicates/__tests__/is-plain-object.test.ts"],
  "sourcesContent": ["import type { AnyRecord } from '@sequelize/utils';\nimport { isPlainObject, pojo, upcast } from '@sequelize/utils';\nimport { expect } from 'chai';\nimport { expectTypeOf } from 'expect-type';\n\ndescribe('isPlainObject', () => {\n  it('returns true for plain object (Object prototype or null prototype)', () => {\n    expect(isPlainObject({})).to.be.true;\n    expect(isPlainObject(pojo())).to.be.true;\n  });\n\n  it('returns false for non-plain object', () => {\n    expect(isPlainObject(42)).to.be.false;\n    expect(isPlainObject('42')).to.be.false;\n    expect(isPlainObject(() => {})).to.be.false;\n    expect(isPlainObject(new Date())).to.be.false;\n    expect(isPlainObject([])).to.be.false;\n  });\n\n  it('narrows the TypeScript type', () => {\n    const value = upcast<AnyRecord | null>(null);\n    if (isPlainObject(value)) {\n      expectTypeOf(value).toEqualTypeOf<AnyRecord>();\n    } else {\n      expectTypeOf(value).toEqualTypeOf<null>();\n    }\n  });\n});\n"],
  "mappings": ";AACA,mBAA4C;AAC5C,kBAAuB;AACvB,yBAA6B;AAE7B,SAAS,iBAAiB,MAAM;AAC9B,KAAG,sEAAsE,MAAM;AAC7E,gCAAO,4BAAc,CAAC,CAAC,CAAC,EAAE,GAAG,GAAG;AAChC,gCAAO,gCAAc,mBAAK,CAAC,CAAC,EAAE,GAAG,GAAG;AAAA,EACtC,CAAC;AAED,KAAG,sCAAsC,MAAM;AAC7C,gCAAO,4BAAc,EAAE,CAAC,EAAE,GAAG,GAAG;AAChC,gCAAO,4BAAc,IAAI,CAAC,EAAE,GAAG,GAAG;AAClC,gCAAO,4BAAc,MAAM;AAAA,IAAC,CAAC,CAAC,EAAE,GAAG,GAAG;AACtC,gCAAO,4BAAc,oBAAI,KAAK,CAAC,CAAC,EAAE,GAAG,GAAG;AACxC,gCAAO,4BAAc,CAAC,CAAC,CAAC,EAAE,GAAG,GAAG;AAAA,EAClC,CAAC;AAED,KAAG,+BAA+B,MAAM;AACtC,UAAM,YAAQ,qBAAyB,IAAI;AAC3C,YAAI,4BAAc,KAAK,GAAG;AACxB,2CAAa,KAAK,EAAE,cAAyB;AAAA,IAC/C,OAAO;AACL,2CAAa,KAAK,EAAE,cAAoB;AAAA,IAC1C;AAAA,EACF,CAAC;AACH,CAAC;",
  "names": []
}
