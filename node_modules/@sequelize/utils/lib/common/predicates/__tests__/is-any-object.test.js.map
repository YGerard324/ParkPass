{
  "version": 3,
  "sources": ["../../../../src/common/predicates/__tests__/is-any-object.test.ts"],
  "sourcesContent": ["import { isAnyObject, upcast } from '@sequelize/utils';\nimport { expect } from 'chai';\nimport { expectTypeOf } from 'expect-type';\n\ndescribe('isAnyObject', () => {\n  it('returns true for plain objects', () => {\n    expect(isAnyObject({})).to.be.true;\n  });\n\n  it('returns true for functions', () => {\n    expect(isAnyObject(() => {})).to.be.true;\n  });\n\n  it('returns true for non-plain objects', () => {\n    expect(isAnyObject(new Date())).to.be.true;\n    expect(isAnyObject([1, 2, 3])).to.be.true;\n  });\n\n  it('returns false for primitives', () => {\n    expect(isAnyObject(null)).to.be.false;\n    expect(isAnyObject(42)).to.be.false;\n    expect(isAnyObject('string')).to.be.false;\n    expect(isAnyObject(true)).to.be.false;\n    // eslint-disable-next-line unicorn/no-useless-undefined -- false positive\n    expect(isAnyObject(undefined)).to.be.false;\n    expect(isAnyObject(Symbol('symbol'))).to.be.false;\n    expect(isAnyObject(123n)).to.be.false;\n  });\n\n  it('narrows the TypeScript type', () => {\n    const value = upcast<Date | null>(null);\n    if (isAnyObject(value)) {\n      expectTypeOf(value).toEqualTypeOf<Date>();\n    } else {\n      expectTypeOf(value).toEqualTypeOf<null>();\n    }\n  });\n});\n"],
  "mappings": ";AAAA,mBAAoC;AACpC,kBAAuB;AACvB,yBAA6B;AAE7B,SAAS,eAAe,MAAM;AAC5B,KAAG,kCAAkC,MAAM;AACzC,gCAAO,0BAAY,CAAC,CAAC,CAAC,EAAE,GAAG,GAAG;AAAA,EAChC,CAAC;AAED,KAAG,8BAA8B,MAAM;AACrC,gCAAO,0BAAY,MAAM;AAAA,IAAC,CAAC,CAAC,EAAE,GAAG,GAAG;AAAA,EACtC,CAAC;AAED,KAAG,sCAAsC,MAAM;AAC7C,gCAAO,0BAAY,oBAAI,KAAK,CAAC,CAAC,EAAE,GAAG,GAAG;AACtC,gCAAO,0BAAY,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,GAAG;AAAA,EACvC,CAAC;AAED,KAAG,gCAAgC,MAAM;AACvC,gCAAO,0BAAY,IAAI,CAAC,EAAE,GAAG,GAAG;AAChC,gCAAO,0BAAY,EAAE,CAAC,EAAE,GAAG,GAAG;AAC9B,gCAAO,0BAAY,QAAQ,CAAC,EAAE,GAAG,GAAG;AACpC,gCAAO,0BAAY,IAAI,CAAC,EAAE,GAAG,GAAG;AAEhC,gCAAO,0BAAY,MAAS,CAAC,EAAE,GAAG,GAAG;AACrC,gCAAO,0BAAY,OAAO,QAAQ,CAAC,CAAC,EAAE,GAAG,GAAG;AAC5C,gCAAO,0BAAY,IAAI,CAAC,EAAE,GAAG,GAAG;AAAA,EAClC,CAAC;AAED,KAAG,+BAA+B,MAAM;AACtC,UAAM,YAAQ,qBAAoB,IAAI;AACtC,YAAI,0BAAY,KAAK,GAAG;AACtB,2CAAa,KAAK,EAAE,cAAoB;AAAA,IAC1C,OAAO;AACL,2CAAa,KAAK,EAAE,cAAoB;AAAA,IAC1C;AAAA,EACF,CAAC;AACH,CAAC;",
  "names": []
}
