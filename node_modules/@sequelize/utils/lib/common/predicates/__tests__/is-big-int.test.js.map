{
  "version": 3,
  "sources": ["../../../../src/common/predicates/__tests__/is-big-int.test.ts"],
  "sourcesContent": ["import { isBigInt, upcast } from '@sequelize/utils';\nimport { expect } from 'chai';\nimport { expectTypeOf } from 'expect-type';\n\ndescribe('isBigInt', () => {\n  it('returns true for bigint', () => {\n    expect(isBigInt(123n)).to.be.true;\n  });\n\n  it('returns false for non-bigint', () => {\n    expect(isBigInt(42)).to.be.false;\n    expect(isBigInt('42')).to.be.false;\n    expect(\n      isBigInt({\n        [Symbol.toPrimitive]() {\n          return 42n;\n        },\n      }),\n    ).to.be.false;\n  });\n\n  it('narrows the TypeScript type', () => {\n    const value = upcast<bigint | null>(null);\n    if (isBigInt(value)) {\n      expectTypeOf(value).toEqualTypeOf<bigint>();\n    } else {\n      expectTypeOf(value).toEqualTypeOf<null>();\n    }\n  });\n});\n"],
  "mappings": ";AAAA,mBAAiC;AACjC,kBAAuB;AACvB,yBAA6B;AAE7B,SAAS,YAAY,MAAM;AACzB,KAAG,2BAA2B,MAAM;AAClC,gCAAO,uBAAS,IAAI,CAAC,EAAE,GAAG,GAAG;AAAA,EAC/B,CAAC;AAED,KAAG,gCAAgC,MAAM;AACvC,gCAAO,uBAAS,EAAE,CAAC,EAAE,GAAG,GAAG;AAC3B,gCAAO,uBAAS,IAAI,CAAC,EAAE,GAAG,GAAG;AAC7B;AAAA,UACE,uBAAS;AAAA,QACP,CAAC,OAAO,WAAW,IAAI;AACrB,iBAAO;AAAA,QACT;AAAA,MACF,CAAC;AAAA,IACH,EAAE,GAAG,GAAG;AAAA,EACV,CAAC;AAED,KAAG,+BAA+B,MAAM;AACtC,UAAM,YAAQ,qBAAsB,IAAI;AACxC,YAAI,uBAAS,KAAK,GAAG;AACnB,2CAAa,KAAK,EAAE,cAAsB;AAAA,IAC5C,OAAO;AACL,2CAAa,KAAK,EAAE,cAAoB;AAAA,IAC1C;AAAA,EACF,CAAC;AACH,CAAC;",
  "names": []
}
