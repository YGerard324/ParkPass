{
  "version": 3,
  "sources": ["../../../src/common/_internal/build-parser.ts"],
  "sourcesContent": ["import type { NonNullish } from '../types.js';\n\nexport function buildNullBasedParser<In extends unknown[], Out extends NonNullish>(\n  parseValue: (...value: In) => Out | null,\n  buildError: (...value: In) => string,\n): Parser<In, Out> {\n  const parse: Parser<In, Out> = (...value: In): Out | null => {\n    return parseValue(...value);\n  };\n\n  parse.orThrow = (...value: In): Out => {\n    const out = parseValue(...value);\n    if (out === null) {\n      throw new ParseError(buildError(...value));\n    }\n\n    return out;\n  };\n\n  return parse;\n}\n\nexport function buildThrowBasedParser<In extends unknown[], Out extends NonNullish>(\n  parseValue: (...value: In) => Out,\n): Parser<In, Out> {\n  const parse: Parser<In, Out> = (...value: In): Out | null => {\n    try {\n      return parseValue(...value);\n    } catch (error) {\n      if (error instanceof ParseError) {\n        return null;\n      }\n\n      throw error;\n    }\n  };\n\n  parse.orThrow = (...value: In): Out => {\n    return parseValue(...value);\n  };\n\n  return parse;\n}\n\nexport interface Parser<In extends unknown[], Out> {\n  (...value: In): Out | null;\n\n  orThrow(...value: In): Out;\n}\n\nexport class ParseError extends Error {}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEO,SAAS,qBACd,YACA,YACiB;AACjB,QAAM,QAAyB,IAAI,UAA0B;AAC3D,WAAO,WAAW,GAAG,KAAK;AAAA,EAC5B;AAEA,QAAM,UAAU,IAAI,UAAmB;AACrC,UAAM,MAAM,WAAW,GAAG,KAAK;AAC/B,QAAI,QAAQ,MAAM;AAChB,YAAM,IAAI,WAAW,WAAW,GAAG,KAAK,CAAC;AAAA,IAC3C;AAEA,WAAO;AAAA,EACT;AAEA,SAAO;AACT;AAEO,SAAS,sBACd,YACiB;AACjB,QAAM,QAAyB,IAAI,UAA0B;AAC3D,QAAI;AACF,aAAO,WAAW,GAAG,KAAK;AAAA,IAC5B,SAAS,OAAP;AACA,UAAI,iBAAiB,YAAY;AAC/B,eAAO;AAAA,MACT;AAEA,YAAM;AAAA,IACR;AAAA,EACF;AAEA,QAAM,UAAU,IAAI,UAAmB;AACrC,WAAO,WAAW,GAAG,KAAK;AAAA,EAC5B;AAEA,SAAO;AACT;AAQO,MAAM,mBAAmB,MAAM;AAAC;",
  "names": []
}
