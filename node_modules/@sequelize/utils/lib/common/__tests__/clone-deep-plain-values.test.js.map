{
  "version": 3,
  "sources": ["../../../src/common/__tests__/clone-deep-plain-values.test.ts"],
  "sourcesContent": ["import { cloneDeepPlainValues } from '@sequelize/utils';\nimport { expect } from 'chai';\n\ndescribe('cloneDeepPlainValues', () => {\n  it('should clone plain values', () => {\n    const value = { a: 1, b: 2 };\n    const clonedValue = cloneDeepPlainValues(value);\n    expect(clonedValue).to.deep.equal(value);\n    expect(clonedValue).not.to.equal(value);\n  });\n\n  it('should clone arrays', () => {\n    const value = [1, 2, 3];\n    const clonedValue = cloneDeepPlainValues(value);\n    expect(clonedValue).to.deep.equal(value);\n    expect(clonedValue).not.to.equal(value);\n  });\n\n  it('should clone nested structures', () => {\n    const value = { a: { b: { c: 1 } } };\n    const clonedValue = cloneDeepPlainValues(value);\n    expect(clonedValue).to.deep.equal(value);\n    expect(clonedValue).not.to.equal(value);\n  });\n\n  it('should transfer unclonable values when flag is set', () => {\n    const value = { a: new Map() };\n    const clonedValue = cloneDeepPlainValues(value, true);\n    expect(clonedValue).to.deep.equal(value);\n    expect(clonedValue).not.to.equal(value);\n    expect(clonedValue.a).to.equal(value.a);\n  });\n\n  it('should throw an error when encountering unclonable values and the transfer flag is not set', () => {\n    const value = { a: new Map() };\n    expect(() => cloneDeepPlainValues(value)).to.throw();\n  });\n});\n"],
  "mappings": ";AAAA,mBAAqC;AACrC,kBAAuB;AAEvB,SAAS,wBAAwB,MAAM;AACrC,KAAG,6BAA6B,MAAM;AACpC,UAAM,QAAQ,EAAE,GAAG,GAAG,GAAG,EAAE;AAC3B,UAAM,kBAAc,mCAAqB,KAAK;AAC9C,4BAAO,WAAW,EAAE,GAAG,KAAK,MAAM,KAAK;AACvC,4BAAO,WAAW,EAAE,IAAI,GAAG,MAAM,KAAK;AAAA,EACxC,CAAC;AAED,KAAG,uBAAuB,MAAM;AAC9B,UAAM,QAAQ,CAAC,GAAG,GAAG,CAAC;AACtB,UAAM,kBAAc,mCAAqB,KAAK;AAC9C,4BAAO,WAAW,EAAE,GAAG,KAAK,MAAM,KAAK;AACvC,4BAAO,WAAW,EAAE,IAAI,GAAG,MAAM,KAAK;AAAA,EACxC,CAAC;AAED,KAAG,kCAAkC,MAAM;AACzC,UAAM,QAAQ,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE;AACnC,UAAM,kBAAc,mCAAqB,KAAK;AAC9C,4BAAO,WAAW,EAAE,GAAG,KAAK,MAAM,KAAK;AACvC,4BAAO,WAAW,EAAE,IAAI,GAAG,MAAM,KAAK;AAAA,EACxC,CAAC;AAED,KAAG,sDAAsD,MAAM;AAC7D,UAAM,QAAQ,EAAE,GAAG,oBAAI,IAAI,EAAE;AAC7B,UAAM,kBAAc,mCAAqB,OAAO,IAAI;AACpD,4BAAO,WAAW,EAAE,GAAG,KAAK,MAAM,KAAK;AACvC,4BAAO,WAAW,EAAE,IAAI,GAAG,MAAM,KAAK;AACtC,4BAAO,YAAY,CAAC,EAAE,GAAG,MAAM,MAAM,CAAC;AAAA,EACxC,CAAC;AAED,KAAG,8FAA8F,MAAM;AACrG,UAAM,QAAQ,EAAE,GAAG,oBAAI,IAAI,EAAE;AAC7B,4BAAO,UAAM,mCAAqB,KAAK,CAAC,EAAE,GAAG,MAAM;AAAA,EACrD,CAAC;AACH,CAAC;",
  "names": []
}
