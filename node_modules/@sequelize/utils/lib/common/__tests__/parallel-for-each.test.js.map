{
  "version": 3,
  "sources": ["../../../src/common/__tests__/parallel-for-each.test.ts"],
  "sourcesContent": ["import { parallelForEach } from '@sequelize/utils';\nimport { expect } from 'chai';\nimport { setTimeout } from 'node:timers/promises';\n\ndescribe('parallelForEach', () => {\n  it('executes the callbacks in parallel', async () => {\n    const array = [1, 2, 3];\n    const order: number[] = [];\n\n    await parallelForEach(array, async (value, index) => {\n      await setTimeout((3 - index) * 100);\n      order.push(value);\n    });\n\n    expect(order).to.deep.equal([3, 2, 1]);\n  });\n\n  it('treats holes as undefined', async () => {\n    // eslint-disable-next-line no-sparse-arrays -- Testing sparse arrays\n    const array = [1, , 3];\n    const values: Array<number | undefined> = [];\n    await parallelForEach(array, async value => {\n      values.push(value);\n    });\n\n    expect(values).to.deep.equal([1, undefined, 3]);\n  });\n\n  it('should pass the correct index to the callback', async () => {\n    const array = ['a', 'b', 'c'];\n    const indices: number[] = [];\n    await parallelForEach(array, async (_, index) => {\n      indices.push(index);\n    });\n\n    expect(indices).to.deep.equal([0, 1, 2]);\n  });\n});\n"],
  "mappings": ";AAAA,mBAAgC;AAChC,kBAAuB;AACvB,sBAA2B;AAE3B,SAAS,mBAAmB,MAAM;AAChC,KAAG,sCAAsC,YAAY;AACnD,UAAM,QAAQ,CAAC,GAAG,GAAG,CAAC;AACtB,UAAM,QAAkB,CAAC;AAEzB,cAAM,8BAAgB,OAAO,OAAO,OAAO,UAAU;AACnD,gBAAM,6BAAY,IAAI,SAAS,GAAG;AAClC,YAAM,KAAK,KAAK;AAAA,IAClB,CAAC;AAED,4BAAO,KAAK,EAAE,GAAG,KAAK,MAAM,CAAC,GAAG,GAAG,CAAC,CAAC;AAAA,EACvC,CAAC;AAED,KAAG,6BAA6B,YAAY;AAE1C,UAAM,QAAQ,CAAC,GAAG,EAAE,CAAC;AACrB,UAAM,SAAoC,CAAC;AAC3C,cAAM,8BAAgB,OAAO,OAAM,UAAS;AAC1C,aAAO,KAAK,KAAK;AAAA,IACnB,CAAC;AAED,4BAAO,MAAM,EAAE,GAAG,KAAK,MAAM,CAAC,GAAG,QAAW,CAAC,CAAC;AAAA,EAChD,CAAC;AAED,KAAG,iDAAiD,YAAY;AAC9D,UAAM,QAAQ,CAAC,KAAK,KAAK,GAAG;AAC5B,UAAM,UAAoB,CAAC;AAC3B,cAAM,8BAAgB,OAAO,OAAO,GAAG,UAAU;AAC/C,cAAQ,KAAK,KAAK;AAAA,IACpB,CAAC;AAED,4BAAO,OAAO,EAAE,GAAG,KAAK,MAAM,CAAC,GAAG,GAAG,CAAC,CAAC;AAAA,EACzC,CAAC;AACH,CAAC;",
  "names": []
}
