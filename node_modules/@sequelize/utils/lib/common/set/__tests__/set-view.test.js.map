{
  "version": 3,
  "sources": ["../../../../src/common/set/__tests__/set-view.test.ts"],
  "sourcesContent": ["import { SetView } from '@sequelize/utils';\nimport { expect } from 'chai';\n\ndescribe('SetView', () => {\n  const view = new SetView(new Set(['value']));\n\n  describe('size', () => {\n    it('returns the number of unique elements in the Set', () => {\n      expect(view.size).to.eq(1);\n    });\n  });\n\n  describe('has', () => {\n    it('returns a boolean indicating whether an element with the specified value exists in the Set or not', () => {\n      expect(view.has('value')).to.be.true;\n      expect(view.has('unknown')).to.be.false;\n    });\n  });\n\n  describe('find', () => {\n    it('returns the element if the callback function returns true', () => {\n      expect(view.find(value => value === 'value')).to.eq('value');\n    });\n\n    it('returns undefined if the callback function does not return true for any element', () => {\n      expect(view.find(value => value === 'unknown')).to.be.undefined;\n    });\n  });\n\n  describe('Symbol.iterator', () => {\n    it('returns an iterator', () => {\n      expect([...view]).to.eql(['value']);\n    });\n  });\n\n  describe('values', () => {\n    it('returns an iterator', () => {\n      expect([...view.values()]).to.eql(['value']);\n    });\n  });\n\n  describe('toMutableSet', () => {\n    it('returns a new Set', () => {\n      const set = view.toMutableSet();\n      expect(set).to.be.an.instanceOf(Set);\n\n      expect([...set.values()]).to.deep.eq([...view.values()]);\n    });\n  });\n});\n"],
  "mappings": ";AAAA,mBAAwB;AACxB,kBAAuB;AAEvB,SAAS,WAAW,MAAM;AACxB,QAAM,OAAO,IAAI,qBAAQ,oBAAI,IAAI,CAAC,OAAO,CAAC,CAAC;AAE3C,WAAS,QAAQ,MAAM;AACrB,OAAG,oDAAoD,MAAM;AAC3D,8BAAO,KAAK,IAAI,EAAE,GAAG,GAAG,CAAC;AAAA,IAC3B,CAAC;AAAA,EACH,CAAC;AAED,WAAS,OAAO,MAAM;AACpB,OAAG,qGAAqG,MAAM;AAC5G,8BAAO,KAAK,IAAI,OAAO,CAAC,EAAE,GAAG,GAAG;AAChC,8BAAO,KAAK,IAAI,SAAS,CAAC,EAAE,GAAG,GAAG;AAAA,IACpC,CAAC;AAAA,EACH,CAAC;AAED,WAAS,QAAQ,MAAM;AACrB,OAAG,6DAA6D,MAAM;AACpE,8BAAO,KAAK,KAAK,WAAS,UAAU,OAAO,CAAC,EAAE,GAAG,GAAG,OAAO;AAAA,IAC7D,CAAC;AAED,OAAG,mFAAmF,MAAM;AAC1F,8BAAO,KAAK,KAAK,WAAS,UAAU,SAAS,CAAC,EAAE,GAAG,GAAG;AAAA,IACxD,CAAC;AAAA,EACH,CAAC;AAED,WAAS,mBAAmB,MAAM;AAChC,OAAG,uBAAuB,MAAM;AAC9B,8BAAO,CAAC,GAAG,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC;AAAA,IACpC,CAAC;AAAA,EACH,CAAC;AAED,WAAS,UAAU,MAAM;AACvB,OAAG,uBAAuB,MAAM;AAC9B,8BAAO,CAAC,GAAG,KAAK,OAAO,CAAC,CAAC,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC;AAAA,IAC7C,CAAC;AAAA,EACH,CAAC;AAED,WAAS,gBAAgB,MAAM;AAC7B,OAAG,qBAAqB,MAAM;AAC5B,YAAM,MAAM,KAAK,aAAa;AAC9B,8BAAO,GAAG,EAAE,GAAG,GAAG,GAAG,WAAW,GAAG;AAEnC,8BAAO,CAAC,GAAG,IAAI,OAAO,CAAC,CAAC,EAAE,GAAG,KAAK,GAAG,CAAC,GAAG,KAAK,OAAO,CAAC,CAAC;AAAA,IACzD,CAAC;AAAA,EACH,CAAC;AACH,CAAC;",
  "names": []
}
