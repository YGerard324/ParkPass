{
  "version": 3,
  "sources": ["../../../src/common/set/set-view.ts"],
  "sourcesContent": ["import { find } from '../iterator-utils/find.js';\nimport type { ReadonlySetLike } from '../types.js';\n\nexport class SetView<V> implements ReadonlySetLike<V> {\n  readonly #target: Set<V>;\n\n  /**\n   * @returns the number of (unique) elements in Set.\n   */\n  get size() {\n    return this.#target.size;\n  }\n\n  constructor(target: Set<V>) {\n    this.#target = target;\n  }\n\n  /**\n   * @param value\n   * @returns a boolean indicating whether an element with the specified value exists in the Set or not.\n   */\n  has(value: V): boolean {\n    return this.#target.has(value);\n  }\n\n  find(callback: (model: V) => boolean): V | undefined {\n    return find(this, callback);\n  }\n\n  [Symbol.iterator](): IterableIterator<V> {\n    return this.#target[Symbol.iterator]();\n  }\n\n  values(): IterableIterator<V> {\n    return this.#target.values();\n  }\n\n  toMutableSet(): Set<V> {\n    return new Set(this.#target);\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAqB;AAGd,MAAM,QAAyC;AAAA,EAC3C;AAAA;AAAA;AAAA;AAAA,EAKT,IAAI,OAAO;AACT,WAAO,KAAK,QAAQ;AAAA,EACtB;AAAA,EAEA,YAAY,QAAgB;AAC1B,SAAK,UAAU;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,OAAmB;AACrB,WAAO,KAAK,QAAQ,IAAI,KAAK;AAAA,EAC/B;AAAA,EAEA,KAAK,UAAgD;AACnD,eAAO,kBAAK,MAAM,QAAQ;AAAA,EAC5B;AAAA,EAEA,CAAC,OAAO,QAAQ,IAAyB;AACvC,WAAO,KAAK,QAAQ,OAAO,QAAQ,EAAE;AAAA,EACvC;AAAA,EAEA,SAA8B;AAC5B,WAAO,KAAK,QAAQ,OAAO;AAAA,EAC7B;AAAA,EAEA,eAAuB;AACrB,WAAO,IAAI,IAAI,KAAK,OAAO;AAAA,EAC7B;AACF;",
  "names": []
}
