{
  "version": 3,
  "sources": ["../../../../src/common/map/__tests__/multi-map.test.ts"],
  "sourcesContent": ["import { MultiMap } from '@sequelize/utils';\nimport { expect } from 'chai';\n\ndescribe('MultiMap', () => {\n  describe('constructor', () => {\n    it('ignores duplicate values', () => {\n      const multiMap = new MultiMap([['key', ['value', 'value']]]);\n      expect(multiMap.get('key')).to.deep.eq(['value']);\n    });\n\n    it('does not store empty values', () => {\n      const multiMap = new MultiMap([['key', []]]);\n      expect(multiMap.has('key')).to.eq(false);\n      expect(multiMap.size).to.eq(0);\n    });\n  });\n\n  describe('size', () => {\n    it('returns the number of keys in the Map', () => {\n      const multiMap = new MultiMap();\n      expect(multiMap.size).to.eq(0);\n\n      multiMap.append('key', 'value1');\n      expect(multiMap.size).to.eq(1);\n\n      multiMap.append('key', 'value2');\n      expect(multiMap.size).to.eq(1);\n\n      multiMap.append('key2', 'value');\n      expect(multiMap.size).to.eq(2);\n    });\n  });\n\n  describe('clear', () => {\n    it('clears all the keys in the Map', () => {\n      const multiMap = new MultiMap([['key', ['value']]]);\n\n      multiMap.clear();\n\n      expect(multiMap.size).to.eq(0);\n    });\n  });\n\n  describe('append', () => {\n    it('appends a value to the key', () => {\n      const multiMap = new MultiMap();\n\n      multiMap.append('key', 'value1');\n      expect(multiMap.get('key')).to.deep.eq(['value1']);\n\n      multiMap.append('key', 'value2');\n      expect(multiMap.get('key')).to.deep.eq(['value1', 'value2']);\n\n      // ignores duplicate values\n      multiMap.append('key', 'value1');\n      expect(multiMap.get('key')).to.deep.eq(['value1', 'value2']);\n    });\n  });\n\n  describe('deleteValue', () => {\n    it('deletes a value from the key', () => {\n      const multiMap = new MultiMap([['key', ['value']]]);\n\n      multiMap.deleteValue('key', 'value');\n      expect(multiMap.get('key')).to.deep.eq([]);\n      expect(multiMap.has('key')).to.eq(false);\n      expect(multiMap.size).to.eq(0);\n    });\n  });\n\n  describe('delete', () => {\n    it('deletes a key from the Map', () => {\n      const multiMap = new MultiMap([['key', ['value']]]);\n\n      multiMap.delete('key');\n      expect(multiMap.size).to.eq(0);\n      expect(multiMap.get('key')).to.deep.eq([]);\n    });\n  });\n\n  describe('keys', () => {\n    it('returns the keys of the Map', () => {\n      const multiMap = new MultiMap([['key', ['value']]]);\n\n      expect([...multiMap.keys()]).to.deep.eq(['key']);\n    });\n  });\n\n  describe('count', () => {\n    it('returns the number of values for the key', () => {\n      const multiMap = new MultiMap([['key', ['value1', 'value2']]]);\n\n      expect(multiMap.count('key')).to.eq(2);\n    });\n\n    it('returns 0 if the key does not exist', () => {\n      const multiMap = new MultiMap();\n\n      expect(multiMap.count('key')).to.eq(0);\n    });\n  });\n\n  describe('values', () => {\n    it('returns the values of the Map', () => {\n      const multiMap = new MultiMap([['key', ['value1', 'value2']]]);\n\n      expect([...multiMap.values()]).to.deep.eq([['value1', 'value2']]);\n    });\n  });\n\n  describe('entries', () => {\n    it('returns the entries of the Map', () => {\n      const multiMap = new MultiMap([['key', ['value1', 'value2']]]);\n\n      expect([...multiMap.entries()]).to.deep.eq([['key', ['value1', 'value2']]]);\n    });\n  });\n\n  describe('has', () => {\n    it('returns true if the key exists', () => {\n      const multiMap = new MultiMap([['key', ['value']]]);\n\n      expect(multiMap.has('key')).to.eq(true);\n    });\n\n    it('returns false if the key does not exist', () => {\n      const multiMap = new MultiMap();\n\n      expect(multiMap.has('key')).to.eq(false);\n    });\n  });\n\n  describe('Symbol.iterator', () => {\n    it('returns the iterator of the Map', () => {\n      const multiMap = new MultiMap([['key', ['value1', 'value2']]]);\n\n      expect([...multiMap[Symbol.iterator]()]).to.deep.eq([['key', ['value1', 'value2']]]);\n    });\n  });\n\n  describe('get', () => {\n    it('returns the values of the key', () => {\n      const multiMap = new MultiMap([['key', ['value1', 'value2']]]);\n\n      expect(multiMap.get('key')).to.deep.eq(['value1', 'value2']);\n    });\n\n    it('returns an empty array if the key does not exist', () => {\n      const multiMap = new MultiMap();\n\n      expect(multiMap.get('key')).to.deep.eq([]);\n    });\n  });\n\n  describe('set', () => {\n    it('sets the values of the key', () => {\n      const multiMap = new MultiMap();\n\n      multiMap.set('key', ['value1', 'value2']);\n      expect(multiMap.get('key')).to.deep.eq(['value1', 'value2']);\n    });\n\n    it('ignores duplicate values', () => {\n      const multiMap = new MultiMap();\n\n      multiMap.set('key', ['value', 'value']);\n      expect(multiMap.get('key')).to.deep.eq(['value']);\n    });\n\n    it('deletes empty values', () => {\n      const multiMap = new MultiMap();\n\n      multiMap.set('key', ['value']);\n      multiMap.set('key', []);\n\n      expect(multiMap.has('key')).to.eq(false);\n      expect(multiMap.size).to.eq(0);\n    });\n\n    it('ignores mutations done after setting the value', () => {\n      const multiMap = new MultiMap();\n      const values = ['value1', 'value2'];\n\n      multiMap.set('key', values);\n      values.push('value3');\n\n      expect(multiMap.get('key')).to.deep.eq(['value1', 'value2']);\n    });\n  });\n});\n"],
  "mappings": "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",
  "names": []
}
