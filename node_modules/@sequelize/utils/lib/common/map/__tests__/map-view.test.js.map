{
  "version": 3,
  "sources": ["../../../../src/common/map/__tests__/map-view.test.ts"],
  "sourcesContent": ["import { MapView } from '@sequelize/utils';\nimport { expect } from 'chai';\nimport NodeUtils from 'node:util';\n\ndescribe('MapView', () => {\n  const view = new MapView(new Map([['key', 'value']]));\n\n  describe('size', () => {\n    it('returns the number of elements in the Map', () => {\n      expect(view.size).to.eq(1);\n    });\n  });\n\n  describe('get', () => {\n    it('returns the element associated with the specified key', () => {\n      expect(view.get('key')).to.eq('value');\n    });\n\n    it('returns undefined if no element is associated with the specified key', () => {\n      expect(view.get('unknown')).to.be.undefined;\n    });\n  });\n\n  describe('getOrThrow', () => {\n    it('returns the element associated with the specified key', () => {\n      expect(view.getOrThrow('key')).to.eq('value');\n    });\n\n    it('throws an error if no element is associated with the specified key', () => {\n      expect(() => view.getOrThrow('unknown')).to.throw('No value found for key: unknown');\n    });\n  });\n\n  describe('has', () => {\n    it('returns a boolean indicating whether an element with the specified key exists or not', () => {\n      expect(view.has('key')).to.be.true;\n      expect(view.has('unknown')).to.be.false;\n    });\n  });\n\n  describe('Symbol.iterator', () => {\n    it('returns an iterator', () => {\n      expect([...view]).to.eql([['key', 'value']]);\n    });\n  });\n\n  describe('entries', () => {\n    it('returns an iterator', () => {\n      expect([...view.entries()]).to.eql([['key', 'value']]);\n    });\n  });\n\n  describe('keys', () => {\n    it('returns an iterator', () => {\n      expect([...view.keys()]).to.eql(['key']);\n    });\n  });\n\n  describe('values', () => {\n    it('returns an iterator', () => {\n      expect([...view.values()]).to.eql(['value']);\n    });\n  });\n\n  describe('toMutableMap', () => {\n    it('returns a new Map', () => {\n      const map = view.toMutableMap();\n      expect(map).to.be.an.instanceOf(Map);\n\n      expect([...map.entries()]).to.deep.eq([...view.entries()]);\n    });\n  });\n\n  it('reflects mutations done to the original map', () => {\n    const original = new Map([['key', 'value']]);\n    const newView = new MapView(original);\n\n    original.set('newKey', 'newValue');\n\n    expect(newView.get('newKey')).to.eq('newValue');\n  });\n\n  it('is inspectable', () => {\n    expect(NodeUtils.inspect(view)).to.eq(\"MapView(1) { 'key' => 'value' }\");\n  });\n});\n"],
  "mappings": "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",
  "names": ["NodeUtils"]
}
