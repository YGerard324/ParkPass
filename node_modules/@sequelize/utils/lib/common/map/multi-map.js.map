{
  "version": 3,
  "sources": ["../../../src/common/map/multi-map.ts"],
  "sourcesContent": ["import uniq from 'lodash/uniq.js';\nimport { EMPTY_ARRAY } from '../consts.js';\nimport type { Entry, MapLike } from '../types.js';\n\nexport class MultiMap<K, V> implements MapLike<K, readonly V[]> {\n  readonly #internalMap = new Map<K, readonly V[]>();\n\n  constructor(entries?: Iterable<readonly [K, readonly V[]]>) {\n    if (entries) {\n      for (const [key, values] of entries) {\n        this.set(key, values);\n      }\n    }\n  }\n\n  get size() {\n    return this.#internalMap.size;\n  }\n\n  clear() {\n    this.#internalMap.clear();\n  }\n\n  append(key: K, value: V): this {\n    const valueSet = this.#internalMap.get(key);\n    if (valueSet?.includes(value)) {\n      return this;\n    }\n\n    const newValue = valueSet ? [...valueSet, value] : [value];\n    Object.freeze(newValue);\n\n    this.#internalMap.set(key, newValue);\n\n    return this;\n  }\n\n  deleteValue(key: K, value: V): boolean {\n    const valueSet = this.#internalMap.get(key);\n    if (valueSet == null) {\n      return false;\n    }\n\n    const newValueSet = valueSet.filter(val => val !== value);\n    if (newValueSet.length === valueSet.length) {\n      return false;\n    }\n\n    if (newValueSet.length === 0) {\n      this.#internalMap.delete(key);\n\n      return true;\n    }\n\n    Object.freeze(newValueSet);\n    this.#internalMap.set(key, newValueSet);\n\n    return true;\n  }\n\n  delete(key: K): boolean {\n    return this.#internalMap.delete(key);\n  }\n\n  keys(): IterableIterator<K> {\n    return this.#internalMap.keys();\n  }\n\n  count(key: K): number {\n    const values = this.#internalMap.get(key);\n\n    return values?.length ?? 0;\n  }\n\n  [Symbol.iterator](): IterableIterator<Entry<K, readonly V[]>> {\n    return this.#internalMap[Symbol.iterator]();\n  }\n\n  entries(): IterableIterator<Entry<K, readonly V[]>> {\n    return this.#internalMap.entries();\n  }\n\n  get(key: K): readonly V[] {\n    return this.#internalMap.get(key) ?? EMPTY_ARRAY;\n  }\n\n  has(key: K): boolean {\n    return this.#internalMap.has(key);\n  }\n\n  set(key: K, values: readonly V[]): this {\n    if (values.length === 0) {\n      this.#internalMap.delete(key);\n\n      return this;\n    }\n\n    const uniqueValues = Object.freeze(uniq(values));\n\n    this.#internalMap.set(key, uniqueValues);\n\n    return this;\n  }\n\n  values(): IterableIterator<readonly V[]> {\n    return this.#internalMap.values();\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAiB;AACjB,oBAA4B;AAGrB,MAAM,SAAmD;AAAA,EACrD,eAAe,oBAAI,IAAqB;AAAA,EAEjD,YAAY,SAAgD;AAC1D,QAAI,SAAS;AACX,iBAAW,CAAC,KAAK,MAAM,KAAK,SAAS;AACnC,aAAK,IAAI,KAAK,MAAM;AAAA,MACtB;AAAA,IACF;AAAA,EACF;AAAA,EAEA,IAAI,OAAO;AACT,WAAO,KAAK,aAAa;AAAA,EAC3B;AAAA,EAEA,QAAQ;AACN,SAAK,aAAa,MAAM;AAAA,EAC1B;AAAA,EAEA,OAAO,KAAQ,OAAgB;AAC7B,UAAM,WAAW,KAAK,aAAa,IAAI,GAAG;AAC1C,QAAI,UAAU,SAAS,KAAK,GAAG;AAC7B,aAAO;AAAA,IACT;AAEA,UAAM,WAAW,WAAW,CAAC,GAAG,UAAU,KAAK,IAAI,CAAC,KAAK;AACzD,WAAO,OAAO,QAAQ;AAEtB,SAAK,aAAa,IAAI,KAAK,QAAQ;AAEnC,WAAO;AAAA,EACT;AAAA,EAEA,YAAY,KAAQ,OAAmB;AACrC,UAAM,WAAW,KAAK,aAAa,IAAI,GAAG;AAC1C,QAAI,YAAY,MAAM;AACpB,aAAO;AAAA,IACT;AAEA,UAAM,cAAc,SAAS,OAAO,SAAO,QAAQ,KAAK;AACxD,QAAI,YAAY,WAAW,SAAS,QAAQ;AAC1C,aAAO;AAAA,IACT;AAEA,QAAI,YAAY,WAAW,GAAG;AAC5B,WAAK,aAAa,OAAO,GAAG;AAE5B,aAAO;AAAA,IACT;AAEA,WAAO,OAAO,WAAW;AACzB,SAAK,aAAa,IAAI,KAAK,WAAW;AAEtC,WAAO;AAAA,EACT;AAAA,EAEA,OAAO,KAAiB;AACtB,WAAO,KAAK,aAAa,OAAO,GAAG;AAAA,EACrC;AAAA,EAEA,OAA4B;AAC1B,WAAO,KAAK,aAAa,KAAK;AAAA,EAChC;AAAA,EAEA,MAAM,KAAgB;AACpB,UAAM,SAAS,KAAK,aAAa,IAAI,GAAG;AAExC,WAAO,QAAQ,UAAU;AAAA,EAC3B;AAAA,EAEA,CAAC,OAAO,QAAQ,IAA8C;AAC5D,WAAO,KAAK,aAAa,OAAO,QAAQ,EAAE;AAAA,EAC5C;AAAA,EAEA,UAAoD;AAClD,WAAO,KAAK,aAAa,QAAQ;AAAA,EACnC;AAAA,EAEA,IAAI,KAAsB;AACxB,WAAO,KAAK,aAAa,IAAI,GAAG,KAAK;AAAA,EACvC;AAAA,EAEA,IAAI,KAAiB;AACnB,WAAO,KAAK,aAAa,IAAI,GAAG;AAAA,EAClC;AAAA,EAEA,IAAI,KAAQ,QAA4B;AACtC,QAAI,OAAO,WAAW,GAAG;AACvB,WAAK,aAAa,OAAO,GAAG;AAE5B,aAAO;AAAA,IACT;AAEA,UAAM,eAAe,OAAO,WAAO,YAAAA,SAAK,MAAM,CAAC;AAE/C,SAAK,aAAa,IAAI,KAAK,YAAY;AAEvC,WAAO;AAAA,EACT;AAAA,EAEA,SAAyC;AACvC,WAAO,KAAK,aAAa,OAAO;AAAA,EAClC;AACF;",
  "names": ["uniq"]
}
