{
  "version": 3,
  "sources": ["../../../../src/common/parsers/__tests__/parse-bigint.test.ts"],
  "sourcesContent": ["import { parseBigInt } from '@sequelize/utils';\nimport { expect } from 'chai';\n\ndescribe('parseBigInt', () => {\n  it('should return null when input is not a valid number syntax', () => {\n    expect(parseBigInt('not a number')).to.be.null;\n    // \"BigInt\" would have returned 0 instead\n    expect(parseBigInt('')).to.be.null;\n    expect(parseBigInt('-')).to.be.null;\n    expect(parseBigInt(' -1')).to.be.null;\n  });\n\n  it('should return null when input is an unsafe integer', () => {\n    expect(parseBigInt(Number.MAX_SAFE_INTEGER + 1)).to.be.null;\n    expect(parseBigInt(Number.MIN_SAFE_INTEGER - 1)).to.be.null;\n  });\n\n  it('should return bigint when input is a safe integer', () => {\n    expect(parseBigInt(10)).to.deep.equal(10n);\n    expect(parseBigInt(-10)).to.deep.equal(-10n);\n    expect(parseBigInt('9007199254740992')).to.deep.equal(9_007_199_254_740_992n);\n    expect(parseBigInt('-9007199254740992')).to.deep.equal(-9_007_199_254_740_992n);\n  });\n\n  it('should return null when input is a non-integer number', () => {\n    expect(parseBigInt(10.5)).to.be.null;\n    expect(parseBigInt(Infinity)).to.be.null;\n    expect(parseBigInt(-Infinity)).to.be.null;\n    expect(parseBigInt(NaN)).to.be.null;\n  });\n\n  it('should return null when input is a non-integer string', () => {\n    expect(parseBigInt('10.5')).to.be.null;\n  });\n\n  it('should return bigint when input is a string representation of an integer', () => {\n    expect(parseBigInt('10')).to.deep.equal(BigInt(10));\n  });\n\n  it('should return bigint when input is a string representation of a negative integer', () => {\n    expect(parseBigInt('-10')).to.deep.equal(BigInt(-10));\n  });\n});\n\ndescribe('parseBigInt.orThrow', () => {\n  it('should throw an error if the input cannot be a bigint', () => {\n    expect(() => parseBigInt.orThrow(Number.MAX_SAFE_INTEGER + 1)).to.throw();\n  });\n\n  it('should return bigint if the input can be a bigint', () => {\n    expect(parseBigInt.orThrow(10)).to.deep.equal(10n);\n  });\n});\n"],
  "mappings": ";AAAA,mBAA4B;AAC5B,kBAAuB;AAEvB,SAAS,eAAe,MAAM;AAC5B,KAAG,8DAA8D,MAAM;AACrE,gCAAO,0BAAY,cAAc,CAAC,EAAE,GAAG,GAAG;AAE1C,gCAAO,0BAAY,EAAE,CAAC,EAAE,GAAG,GAAG;AAC9B,gCAAO,0BAAY,GAAG,CAAC,EAAE,GAAG,GAAG;AAC/B,gCAAO,0BAAY,KAAK,CAAC,EAAE,GAAG,GAAG;AAAA,EACnC,CAAC;AAED,KAAG,sDAAsD,MAAM;AAC7D,gCAAO,0BAAY,OAAO,mBAAmB,CAAC,CAAC,EAAE,GAAG,GAAG;AACvD,gCAAO,0BAAY,OAAO,mBAAmB,CAAC,CAAC,EAAE,GAAG,GAAG;AAAA,EACzD,CAAC;AAED,KAAG,qDAAqD,MAAM;AAC5D,gCAAO,0BAAY,EAAE,CAAC,EAAE,GAAG,KAAK,MAAM,GAAG;AACzC,gCAAO,0BAAY,GAAG,CAAC,EAAE,GAAG,KAAK,MAAM,CAAC,GAAG;AAC3C,gCAAO,0BAAY,kBAAkB,CAAC,EAAE,GAAG,KAAK,MAAM,iBAAsB;AAC5E,gCAAO,0BAAY,mBAAmB,CAAC,EAAE,GAAG,KAAK,MAAM,CAAC,iBAAsB;AAAA,EAChF,CAAC;AAED,KAAG,yDAAyD,MAAM;AAChE,gCAAO,0BAAY,IAAI,CAAC,EAAE,GAAG,GAAG;AAChC,gCAAO,0BAAY,QAAQ,CAAC,EAAE,GAAG,GAAG;AACpC,gCAAO,0BAAY,SAAS,CAAC,EAAE,GAAG,GAAG;AACrC,gCAAO,0BAAY,GAAG,CAAC,EAAE,GAAG,GAAG;AAAA,EACjC,CAAC;AAED,KAAG,yDAAyD,MAAM;AAChE,gCAAO,0BAAY,MAAM,CAAC,EAAE,GAAG,GAAG;AAAA,EACpC,CAAC;AAED,KAAG,4EAA4E,MAAM;AACnF,gCAAO,0BAAY,IAAI,CAAC,EAAE,GAAG,KAAK,MAAM,OAAO,EAAE,CAAC;AAAA,EACpD,CAAC;AAED,KAAG,oFAAoF,MAAM;AAC3F,gCAAO,0BAAY,KAAK,CAAC,EAAE,GAAG,KAAK,MAAM,OAAO,GAAG,CAAC;AAAA,EACtD,CAAC;AACH,CAAC;AAED,SAAS,uBAAuB,MAAM;AACpC,KAAG,yDAAyD,MAAM;AAChE,4BAAO,MAAM,yBAAY,QAAQ,OAAO,mBAAmB,CAAC,CAAC,EAAE,GAAG,MAAM;AAAA,EAC1E,CAAC;AAED,KAAG,qDAAqD,MAAM;AAC5D,4BAAO,yBAAY,QAAQ,EAAE,CAAC,EAAE,GAAG,KAAK,MAAM,GAAG;AAAA,EACnD,CAAC;AACH,CAAC;",
  "names": []
}
