{
  "version": 3,
  "sources": ["../../../../src/common/parsers/__tests__/parse-finite-number.test.ts"],
  "sourcesContent": ["import { parseFiniteNumber } from '@sequelize/utils';\nimport { expect } from 'chai';\n\ndescribe('parseFiniteNumber', () => {\n  it('should return null when input is not a valid number syntax', () => {\n    expect(parseFiniteNumber('not a number')).to.be.null;\n    // \"Number\" would have returned 0 instead\n    expect(parseFiniteNumber('')).to.be.null;\n    expect(parseFiniteNumber('-')).to.be.null;\n    expect(parseFiniteNumber(' -1')).to.be.null;\n  });\n\n  it('should return null when input is an infinite number', () => {\n    expect(parseFiniteNumber('Infinity')).to.be.null;\n  });\n\n  it('should return a number when input is a valid number string', () => {\n    expect(parseFiniteNumber('123')).to.equal(123);\n    expect(parseFiniteNumber('-123')).to.equal(-123);\n  });\n\n  it('should return a number when input is a valid number in scientific notation', () => {\n    expect(parseFiniteNumber('5e1')).to.equal(50);\n    expect(parseFiniteNumber('-5e1')).to.equal(-50);\n  });\n\n  it('should return a number when input is a valid decimal number', () => {\n    expect(parseFiniteNumber('123.456')).to.equal(123.456);\n    expect(parseFiniteNumber('-123.456')).to.equal(-123.456);\n  });\n\n  it('should return null when input is a BigInt outside of the Safe Integer range', () => {\n    expect(parseFiniteNumber(BigInt(Number.MAX_SAFE_INTEGER) + 1n)).to.be.null;\n  });\n\n  it('should return a number when input is a valid BigInt within the Safe Integer range', () => {\n    expect(parseFiniteNumber(123n)).to.equal(123);\n    expect(parseFiniteNumber(-123n)).to.equal(-123);\n  });\n});\n\ndescribe('parseFiniteNumber.orThrow', () => {\n  it('throws an error when the input is not parseable as a finite number', () => {\n    expect(() => parseFiniteNumber.orThrow('not a number')).to.throw();\n  });\n\n  it('returns the parsed number when the input is parseable as a finite number', () => {\n    expect(parseFiniteNumber.orThrow('123')).to.equal(123);\n  });\n});\n"],
  "mappings": ";AAAA,mBAAkC;AAClC,kBAAuB;AAEvB,SAAS,qBAAqB,MAAM;AAClC,KAAG,8DAA8D,MAAM;AACrE,gCAAO,gCAAkB,cAAc,CAAC,EAAE,GAAG,GAAG;AAEhD,gCAAO,gCAAkB,EAAE,CAAC,EAAE,GAAG,GAAG;AACpC,gCAAO,gCAAkB,GAAG,CAAC,EAAE,GAAG,GAAG;AACrC,gCAAO,gCAAkB,KAAK,CAAC,EAAE,GAAG,GAAG;AAAA,EACzC,CAAC;AAED,KAAG,uDAAuD,MAAM;AAC9D,gCAAO,gCAAkB,UAAU,CAAC,EAAE,GAAG,GAAG;AAAA,EAC9C,CAAC;AAED,KAAG,8DAA8D,MAAM;AACrE,gCAAO,gCAAkB,KAAK,CAAC,EAAE,GAAG,MAAM,GAAG;AAC7C,gCAAO,gCAAkB,MAAM,CAAC,EAAE,GAAG,MAAM,IAAI;AAAA,EACjD,CAAC;AAED,KAAG,8EAA8E,MAAM;AACrF,gCAAO,gCAAkB,KAAK,CAAC,EAAE,GAAG,MAAM,EAAE;AAC5C,gCAAO,gCAAkB,MAAM,CAAC,EAAE,GAAG,MAAM,GAAG;AAAA,EAChD,CAAC;AAED,KAAG,+DAA+D,MAAM;AACtE,gCAAO,gCAAkB,SAAS,CAAC,EAAE,GAAG,MAAM,OAAO;AACrD,gCAAO,gCAAkB,UAAU,CAAC,EAAE,GAAG,MAAM,QAAQ;AAAA,EACzD,CAAC;AAED,KAAG,+EAA+E,MAAM;AACtF,gCAAO,gCAAkB,OAAO,OAAO,gBAAgB,IAAI,EAAE,CAAC,EAAE,GAAG,GAAG;AAAA,EACxE,CAAC;AAED,KAAG,qFAAqF,MAAM;AAC5F,gCAAO,gCAAkB,IAAI,CAAC,EAAE,GAAG,MAAM,GAAG;AAC5C,gCAAO,gCAAkB,CAAC,IAAI,CAAC,EAAE,GAAG,MAAM,IAAI;AAAA,EAChD,CAAC;AACH,CAAC;AAED,SAAS,6BAA6B,MAAM;AAC1C,KAAG,sEAAsE,MAAM;AAC7E,4BAAO,MAAM,+BAAkB,QAAQ,cAAc,CAAC,EAAE,GAAG,MAAM;AAAA,EACnE,CAAC;AAED,KAAG,4EAA4E,MAAM;AACnF,4BAAO,+BAAkB,QAAQ,KAAK,CAAC,EAAE,GAAG,MAAM,GAAG;AAAA,EACvD,CAAC;AACH,CAAC;",
  "names": []
}
