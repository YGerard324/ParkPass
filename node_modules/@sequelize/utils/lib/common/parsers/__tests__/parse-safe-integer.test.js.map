{
  "version": 3,
  "sources": ["../../../../src/common/parsers/__tests__/parse-safe-integer.test.ts"],
  "sourcesContent": ["import { parseSafeInteger } from '@sequelize/utils';\nimport { expect } from 'chai';\n\ndescribe('parseSafeInteger', () => {\n  it('returns null when input is not a valid integer syntax', () => {\n    expect(parseSafeInteger('not an integer')).to.be.null;\n    expect(parseSafeInteger('')).to.be.null;\n    expect(parseSafeInteger('-')).to.be.null;\n    expect(parseSafeInteger(' -1')).to.be.null;\n  });\n\n  it('returns null when input is an unsafe integer', () => {\n    expect(parseSafeInteger('9007199254740992')).to.be.null;\n    expect(parseSafeInteger('-9007199254740992')).to.be.null;\n\n    expect(parseSafeInteger(9_007_199_254_740_992n)).to.be.null;\n    expect(parseSafeInteger(-9_007_199_254_740_992n)).to.be.null;\n  });\n\n  it('returns a number when input is a valid integer string', () => {\n    expect(parseSafeInteger('123')).to.equal(123);\n    expect(parseSafeInteger('-123')).to.equal(-123);\n  });\n\n  it('returns a number when input is a safe bigint', () => {\n    expect(parseSafeInteger(123n)).to.equal(123);\n    expect(parseSafeInteger(-123n)).to.equal(-123);\n  });\n\n  it('returns null when input is a non-integer number', () => {\n    expect(parseSafeInteger('123.456')).to.be.null;\n  });\n\n  it('returns a number if the input contains the scientific notation in base 10', () => {\n    expect(parseSafeInteger('1e3')).to.equal(1e3);\n    expect(parseSafeInteger('1e3', 10)).to.equal(1e3);\n  });\n\n  it('returns null if the input contains the scientific notation in base other than 10', () => {\n    // note: for radix 15 and above, the letter \"e\" is a valid digit so this would be a valid number,\n    // but not one written in the scientific notation.\n    expect(parseSafeInteger('1e3', 8)).to.equal(null);\n  });\n\n  it('returns null if the input contains a numeric separator', () => {\n    // opt-in support could be added in the future, as well as localized separators\n    expect(parseSafeInteger('1_000')).to.be.null;\n  });\n\n  it('returns a number when input is a valid base 2 integer', () => {\n    expect(parseSafeInteger('1010', 2)).to.equal(0b1010);\n  });\n\n  it('returns null when input is a valid base 2 integer with invalid characters', () => {\n    expect(parseSafeInteger('10102', 2)).to.be.null;\n  });\n\n  it('returns a number when input is a valid base 8 integer', () => {\n    expect(parseSafeInteger('0755', 8)).to.equal(0o0755);\n  });\n\n  it('returns null when input is a valid base 8 integer with invalid characters', () => {\n    expect(parseSafeInteger('0758', 8)).to.be.null;\n  });\n\n  it('returns a number when input is a valid base 16 integer', () => {\n    expect(parseSafeInteger('ffffff', 16)).to.equal(0xff_ff_ff);\n  });\n\n  it('returns null if the number includes a prefix', () => {\n    // could be supported one day using the \"auto\" radix (which would support 0x, 0b, 0o prefixes, and base 10 without prefix)\n    expect(parseSafeInteger('0xffffff', 16)).to.be.null;\n    expect(parseSafeInteger('0xffffff')).to.be.null;\n  });\n\n  it('returns null when input is a valid base 16 integer with invalid characters', () => {\n    expect(parseSafeInteger('fffg', 16)).to.be.null;\n  });\n\n  it('is case insensitive', () => {\n    expect(parseSafeInteger('Ff', 16)).to.equal(0xff);\n  });\n\n  it('returns a number when input is a valid base 36 integer', () => {\n    expect(parseSafeInteger('z', 36)).to.equal(35);\n  });\n\n  it('returns null when input is a valid base 36 integer with invalid characters', () => {\n    expect(parseSafeInteger('z(', 36)).to.be.null;\n  });\n\n  it('throws when radix is less than 2 or more than 36', () => {\n    expect(() => parseSafeInteger('123', 1)).to.throw();\n    expect(() => parseSafeInteger('123', 37)).to.throw();\n  });\n});\n\ndescribe('parseSafeInteger.orThrow', () => {\n  it('throws an error when the input is not parseable as a safe integer', () => {\n    expect(() => parseSafeInteger.orThrow('not an integer')).to.throw();\n  });\n\n  it('returns the parsed number when the input is parseable as a safe integer', () => {\n    expect(parseSafeInteger.orThrow('123')).to.equal(123);\n  });\n});\n"],
  "mappings": "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",
  "names": []
}
