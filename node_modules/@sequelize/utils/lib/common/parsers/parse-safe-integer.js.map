{
  "version": 3,
  "sources": ["../../../src/common/parsers/parse-safe-integer.ts"],
  "sourcesContent": ["import { buildNullBasedParser } from '../_internal/build-parser.js';\nimport { inspect } from '../inspect.js';\nimport { isBigInt } from '../predicates/is-big-int.js';\nimport { isNumber } from '../predicates/is-number.js';\nimport { isValidIntegerSyntax } from '../predicates/is-valid-integer-syntax.js';\nimport { parseFiniteNumber } from './parse-finite-number.js';\n\nfunction parseSafeIntegerInternal(\n  value: string | bigint | number,\n  radix: number = 10,\n): number | null {\n  let result: number | null;\n  if (isNumber(value)) {\n    result = value;\n  } else if (isBigInt(value) || radix === 10) {\n    // delegating to parseNumber as it supports scientific notation & only base 10 is allowed\n    result = parseFiniteNumber(value);\n  } else {\n    if (!isValidIntegerSyntax(value, radix)) {\n      return null;\n    }\n\n    result = Number.parseInt(value, radix);\n  }\n\n  if (!Number.isSafeInteger(result)) {\n    return null;\n  }\n\n  return result;\n}\n\n/**\n * Parses a string as a safe integer in the specified radix.\n * This method supports the scientific notation (e.g. 5e1 produces 50).\n * The Scientific notation is only allowed in base 10.\n *\n * @param value The string to parse as a safe integer\n * @param radix The radix\n * @returns null if the input is not an integer or is not safely representable by the JS number type (use parseBigInt for that)\n */\nexport const parseSafeInteger = buildNullBasedParser(\n  parseSafeIntegerInternal,\n  (value, radix = 10) => `Value ${inspect(value)} is not a valid base ${inspect(radix)} integer`,\n);\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAqC;AACrC,qBAAwB;AACxB,wBAAyB;AACzB,uBAAyB;AACzB,qCAAqC;AACrC,iCAAkC;AAElC,SAAS,yBACP,OACA,QAAgB,IACD;AACf,MAAI;AACJ,UAAI,2BAAS,KAAK,GAAG;AACnB,aAAS;AAAA,EACX,eAAW,4BAAS,KAAK,KAAK,UAAU,IAAI;AAE1C,iBAAS,8CAAkB,KAAK;AAAA,EAClC,OAAO;AACL,QAAI,KAAC,qDAAqB,OAAO,KAAK,GAAG;AACvC,aAAO;AAAA,IACT;AAEA,aAAS,OAAO,SAAS,OAAO,KAAK;AAAA,EACvC;AAEA,MAAI,CAAC,OAAO,cAAc,MAAM,GAAG;AACjC,WAAO;AAAA,EACT;AAEA,SAAO;AACT;AAWO,MAAM,uBAAmB;AAAA,EAC9B;AAAA,EACA,CAAC,OAAO,QAAQ,OAAO,aAAS,wBAAQ,KAAK,6BAAyB,wBAAQ,KAAK;AACrF;",
  "names": []
}
