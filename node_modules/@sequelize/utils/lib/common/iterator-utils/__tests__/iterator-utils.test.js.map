{
  "version": 3,
  "sources": ["../../../../src/common/iterator-utils/__tests__/iterator-utils.test.ts"],
  "sourcesContent": ["import {\n  combinedIterator,\n  count,\n  every,\n  find,\n  isIterable,\n  join,\n  map,\n  some,\n} from '@sequelize/utils';\nimport { expect } from 'chai';\n\ndescribe('combinedIterator', () => {\n  it('chains iterables', () => {\n    const iter1 = [1, 2, 3];\n    const iter2 = new Set([4, 5, 6]);\n\n    const combined = combinedIterator(iter1, iter2);\n\n    isIterable.assert(combined);\n\n    const result = [...combined];\n    expect(result).to.deep.eq([1, 2, 3, 4, 5, 6]);\n  });\n});\n\ndescribe('count', () => {\n  it('returns the number of elements that match the predicate', () => {\n    const iter = [1, 2, 3, 4, 5, 6];\n\n    const result = count(iter, x => x % 2 === 0);\n\n    expect(result).to.eq(3);\n  });\n});\n\ndescribe('every', () => {\n  it('returns true if all elements match the predicate', () => {\n    const iter = [1, 2, 3, 4, 5, 6];\n\n    const areAllEven = every(iter, x => x % 2 === 0);\n    const areAllPositive = every(iter, x => x > 0);\n\n    expect(areAllEven).to.be.false;\n    expect(areAllPositive).to.be.true;\n  });\n\n  it('always returns true if the iterable is empty', () => {\n    const result = every([], () => false);\n\n    expect(result).to.be.true;\n  });\n});\n\ndescribe('find', () => {\n  it('returns the first element that matches the predicate', () => {\n    const iter = [1, 2, 3, 4, 5, 6];\n\n    const result = find(iter, x => x % 2 === 0);\n\n    expect(result).to.eq(2);\n  });\n});\n\ndescribe('join', () => {\n  it('joins the strings of an iterable into a string', () => {\n    expect(join(['a', 'b', 'c'], '-')).to.eq('a-b-c');\n    expect(join([], '-')).to.eq('');\n  });\n});\n\ndescribe('map', () => {\n  it('maps the iterable', () => {\n    const iter = [1, 2, 3, 4, 5, 6];\n\n    const result = map(iter, x => x * 2);\n\n    isIterable.assert(result);\n\n    expect([...result]).to.deep.eq([2, 4, 6, 8, 10, 12]);\n  });\n});\n\ndescribe('some', () => {\n  it('returns true if at least one element matches the predicate', () => {\n    const iter = [1, 2, 3, 4, 5, 6];\n\n    const hasAnEven = some(iter, x => x % 2 === 0);\n    const hasANegative = some(iter, x => x < 0);\n\n    expect(hasAnEven).to.be.true;\n    expect(hasANegative).to.be.false;\n  });\n\n  it('always returns false if the iterable is empty', () => {\n    const result = some([], () => true);\n\n    expect(result).to.be.false;\n  });\n});\n"],
  "mappings": "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",
  "names": []
}
